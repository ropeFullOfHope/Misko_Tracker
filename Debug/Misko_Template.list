
Misko_Template.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000036c0  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00030028  08003898  08003898  00013898  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080338c0  080338c0  0005000c  2**0
                  CONTENTS
  4 .ARM          00000000  080338c0  080338c0  0005000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080338c0  080338c0  0005000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080338c0  080338c0  000438c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080338c4  080338c4  000438c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080338c8  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000e94  2000000c  080338d4  0005000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000ea0  080338d4  00050ea0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0005000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c898  00000000  00000000  0005003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024de  00000000  00000000  0005c8d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d90  00000000  00000000  0005edb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c30  00000000  00000000  0005fb48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002af08  00000000  00000000  00060778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cef3  00000000  00000000  0008b680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010981f  00000000  00000000  00098573  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001a1d92  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000035b4  00000000  00000000  001a1de4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08003880 	.word	0x08003880

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08003880 	.word	0x08003880

08000218 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8000218:	b480      	push	{r7}
 800021a:	b083      	sub	sp, #12
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	689b      	ldr	r3, [r3, #8]
 8000224:	f003 0301 	and.w	r3, r3, #1
 8000228:	2b01      	cmp	r3, #1
 800022a:	d101      	bne.n	8000230 <LL_ADC_IsEnabled+0x18>
 800022c:	2301      	movs	r3, #1
 800022e:	e000      	b.n	8000232 <LL_ADC_IsEnabled+0x1a>
 8000230:	2300      	movs	r3, #0
}
 8000232:	4618      	mov	r0, r3
 8000234:	370c      	adds	r7, #12
 8000236:	46bd      	mov	sp, r7
 8000238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800023c:	4770      	bx	lr

0800023e <LL_ADC_REG_ReadConversionData12>:
  * @rmtoll DR       RDATA          LL_ADC_REG_ReadConversionData12
  * @param  ADCx ADC instance
  * @retval Value between Min_Data=0x000 and Max_Data=0xFFF
  */
__STATIC_INLINE uint16_t LL_ADC_REG_ReadConversionData12(const ADC_TypeDef *ADCx)
{
 800023e:	b480      	push	{r7}
 8000240:	b083      	sub	sp, #12
 8000242:	af00      	add	r7, sp, #0
 8000244:	6078      	str	r0, [r7, #4]
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800024a:	b29b      	uxth	r3, r3
}
 800024c:	4618      	mov	r0, r3
 800024e:	370c      	adds	r7, #12
 8000250:	46bd      	mov	sp, r7
 8000252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000256:	4770      	bx	lr

08000258 <LL_ADC_IsActiveFlag_EOC>:
  * @rmtoll ISR      EOC            LL_ADC_IsActiveFlag_EOC
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_EOC(const ADC_TypeDef *ADCx)
{
 8000258:	b480      	push	{r7}
 800025a:	b083      	sub	sp, #12
 800025c:	af00      	add	r7, sp, #0
 800025e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC)) ? 1UL : 0UL);
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	f003 0304 	and.w	r3, r3, #4
 8000268:	2b04      	cmp	r3, #4
 800026a:	d101      	bne.n	8000270 <LL_ADC_IsActiveFlag_EOC+0x18>
 800026c:	2301      	movs	r3, #1
 800026e:	e000      	b.n	8000272 <LL_ADC_IsActiveFlag_EOC+0x1a>
 8000270:	2300      	movs	r3, #0
}
 8000272:	4618      	mov	r0, r3
 8000274:	370c      	adds	r7, #12
 8000276:	46bd      	mov	sp, r7
 8000278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800027c:	4770      	bx	lr
	...

08000280 <app_main>:
#include "stm32g4xx_ll_adc.h"
#include "stm32g4xx_ll_tim.h"
static uint32_t joystick[2] = {0};

void app_main(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b08c      	sub	sp, #48	; 0x30
 8000284:	af00      	add	r7, sp, #0

    for (int y = 0; y < 8; y++) {
 8000286:	2300      	movs	r3, #0
 8000288:	62fb      	str	r3, [r7, #44]	; 0x2c
 800028a:	e018      	b.n	80002be <app_main+0x3e>
        for (int x = 0; x < 16; x++) {
 800028c:	2300      	movs	r3, #0
 800028e:	62bb      	str	r3, [r7, #40]	; 0x28
 8000290:	e00f      	b.n	80002b2 <app_main+0x32>
            LCD_draw((uint8_t) y * 16 + x, x + 0, y + 0, COLOR_NORMAL);
 8000292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000294:	b2db      	uxtb	r3, r3
 8000296:	011b      	lsls	r3, r3, #4
 8000298:	b2da      	uxtb	r2, r3
 800029a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800029c:	b2db      	uxtb	r3, r3
 800029e:	4413      	add	r3, r2
 80002a0:	b2d8      	uxtb	r0, r3
 80002a2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80002a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80002a6:	2300      	movs	r3, #0
 80002a8:	f003 fa50 	bl	800374c <LCD_draw>
        for (int x = 0; x < 16; x++) {
 80002ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80002ae:	3301      	adds	r3, #1
 80002b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80002b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80002b4:	2b0f      	cmp	r3, #15
 80002b6:	ddec      	ble.n	8000292 <app_main+0x12>
    for (int y = 0; y < 8; y++) {
 80002b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80002ba:	3301      	adds	r3, #1
 80002bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80002be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80002c0:	2b07      	cmp	r3, #7
 80002c2:	dde3      	ble.n	800028c <app_main+0xc>
        }
    }
    for (int y = 0; y < 8; y++) {
 80002c4:	2300      	movs	r3, #0
 80002c6:	627b      	str	r3, [r7, #36]	; 0x24
 80002c8:	e01a      	b.n	8000300 <app_main+0x80>
        for (int x = 0; x < 16; x++) {
 80002ca:	2300      	movs	r3, #0
 80002cc:	623b      	str	r3, [r7, #32]
 80002ce:	e011      	b.n	80002f4 <app_main+0x74>
            LCD_draw((uint8_t) y * 16 + x, x + 17, y + 0, COLOR_NORMAL_FADE);
 80002d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80002d2:	b2db      	uxtb	r3, r3
 80002d4:	011b      	lsls	r3, r3, #4
 80002d6:	b2da      	uxtb	r2, r3
 80002d8:	6a3b      	ldr	r3, [r7, #32]
 80002da:	b2db      	uxtb	r3, r3
 80002dc:	4413      	add	r3, r2
 80002de:	b2d8      	uxtb	r0, r3
 80002e0:	6a3b      	ldr	r3, [r7, #32]
 80002e2:	3311      	adds	r3, #17
 80002e4:	4619      	mov	r1, r3
 80002e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80002e8:	2303      	movs	r3, #3
 80002ea:	f003 fa2f 	bl	800374c <LCD_draw>
        for (int x = 0; x < 16; x++) {
 80002ee:	6a3b      	ldr	r3, [r7, #32]
 80002f0:	3301      	adds	r3, #1
 80002f2:	623b      	str	r3, [r7, #32]
 80002f4:	6a3b      	ldr	r3, [r7, #32]
 80002f6:	2b0f      	cmp	r3, #15
 80002f8:	ddea      	ble.n	80002d0 <app_main+0x50>
    for (int y = 0; y < 8; y++) {
 80002fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80002fc:	3301      	adds	r3, #1
 80002fe:	627b      	str	r3, [r7, #36]	; 0x24
 8000300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000302:	2b07      	cmp	r3, #7
 8000304:	dde1      	ble.n	80002ca <app_main+0x4a>
        }
    }
    for (int y = 0; y < 8; y++) {
 8000306:	2300      	movs	r3, #0
 8000308:	61fb      	str	r3, [r7, #28]
 800030a:	e01a      	b.n	8000342 <app_main+0xc2>
        for (int x = 0; x < 16; x++) {
 800030c:	2300      	movs	r3, #0
 800030e:	61bb      	str	r3, [r7, #24]
 8000310:	e011      	b.n	8000336 <app_main+0xb6>
            LCD_draw((uint8_t) y * 16 + x, x + 0, y + 9, COLOR_DARK);
 8000312:	69fb      	ldr	r3, [r7, #28]
 8000314:	b2db      	uxtb	r3, r3
 8000316:	011b      	lsls	r3, r3, #4
 8000318:	b2da      	uxtb	r2, r3
 800031a:	69bb      	ldr	r3, [r7, #24]
 800031c:	b2db      	uxtb	r3, r3
 800031e:	4413      	add	r3, r2
 8000320:	b2d8      	uxtb	r0, r3
 8000322:	69b9      	ldr	r1, [r7, #24]
 8000324:	69fb      	ldr	r3, [r7, #28]
 8000326:	3309      	adds	r3, #9
 8000328:	461a      	mov	r2, r3
 800032a:	2301      	movs	r3, #1
 800032c:	f003 fa0e 	bl	800374c <LCD_draw>
        for (int x = 0; x < 16; x++) {
 8000330:	69bb      	ldr	r3, [r7, #24]
 8000332:	3301      	adds	r3, #1
 8000334:	61bb      	str	r3, [r7, #24]
 8000336:	69bb      	ldr	r3, [r7, #24]
 8000338:	2b0f      	cmp	r3, #15
 800033a:	ddea      	ble.n	8000312 <app_main+0x92>
    for (int y = 0; y < 8; y++) {
 800033c:	69fb      	ldr	r3, [r7, #28]
 800033e:	3301      	adds	r3, #1
 8000340:	61fb      	str	r3, [r7, #28]
 8000342:	69fb      	ldr	r3, [r7, #28]
 8000344:	2b07      	cmp	r3, #7
 8000346:	dde1      	ble.n	800030c <app_main+0x8c>
        }
    }
    for (int y = 0; y < 8; y++) {
 8000348:	2300      	movs	r3, #0
 800034a:	617b      	str	r3, [r7, #20]
 800034c:	e01c      	b.n	8000388 <app_main+0x108>
        for (int x = 0; x < 16; x++) {
 800034e:	2300      	movs	r3, #0
 8000350:	613b      	str	r3, [r7, #16]
 8000352:	e013      	b.n	800037c <app_main+0xfc>
            LCD_draw((uint8_t) y * 16 + x, x + 17, y + 9, COLOR_DARK_FADE);
 8000354:	697b      	ldr	r3, [r7, #20]
 8000356:	b2db      	uxtb	r3, r3
 8000358:	011b      	lsls	r3, r3, #4
 800035a:	b2da      	uxtb	r2, r3
 800035c:	693b      	ldr	r3, [r7, #16]
 800035e:	b2db      	uxtb	r3, r3
 8000360:	4413      	add	r3, r2
 8000362:	b2d8      	uxtb	r0, r3
 8000364:	693b      	ldr	r3, [r7, #16]
 8000366:	3311      	adds	r3, #17
 8000368:	4619      	mov	r1, r3
 800036a:	697b      	ldr	r3, [r7, #20]
 800036c:	3309      	adds	r3, #9
 800036e:	461a      	mov	r2, r3
 8000370:	2304      	movs	r3, #4
 8000372:	f003 f9eb 	bl	800374c <LCD_draw>
        for (int x = 0; x < 16; x++) {
 8000376:	693b      	ldr	r3, [r7, #16]
 8000378:	3301      	adds	r3, #1
 800037a:	613b      	str	r3, [r7, #16]
 800037c:	693b      	ldr	r3, [r7, #16]
 800037e:	2b0f      	cmp	r3, #15
 8000380:	dde8      	ble.n	8000354 <app_main+0xd4>
    for (int y = 0; y < 8; y++) {
 8000382:	697b      	ldr	r3, [r7, #20]
 8000384:	3301      	adds	r3, #1
 8000386:	617b      	str	r3, [r7, #20]
 8000388:	697b      	ldr	r3, [r7, #20]
 800038a:	2b07      	cmp	r3, #7
 800038c:	dddf      	ble.n	800034e <app_main+0xce>
        }
    }
    for (int y = 0; y < 8; y++) {
 800038e:	2300      	movs	r3, #0
 8000390:	60fb      	str	r3, [r7, #12]
 8000392:	e01a      	b.n	80003ca <app_main+0x14a>
        for (int x = 0; x < 16; x++) {
 8000394:	2300      	movs	r3, #0
 8000396:	60bb      	str	r3, [r7, #8]
 8000398:	e011      	b.n	80003be <app_main+0x13e>
            LCD_draw((uint8_t) y * 16 + x, x + 0, y + 18, COLOR_HIGHLIGHT);
 800039a:	68fb      	ldr	r3, [r7, #12]
 800039c:	b2db      	uxtb	r3, r3
 800039e:	011b      	lsls	r3, r3, #4
 80003a0:	b2da      	uxtb	r2, r3
 80003a2:	68bb      	ldr	r3, [r7, #8]
 80003a4:	b2db      	uxtb	r3, r3
 80003a6:	4413      	add	r3, r2
 80003a8:	b2d8      	uxtb	r0, r3
 80003aa:	68b9      	ldr	r1, [r7, #8]
 80003ac:	68fb      	ldr	r3, [r7, #12]
 80003ae:	3312      	adds	r3, #18
 80003b0:	461a      	mov	r2, r3
 80003b2:	2302      	movs	r3, #2
 80003b4:	f003 f9ca 	bl	800374c <LCD_draw>
        for (int x = 0; x < 16; x++) {
 80003b8:	68bb      	ldr	r3, [r7, #8]
 80003ba:	3301      	adds	r3, #1
 80003bc:	60bb      	str	r3, [r7, #8]
 80003be:	68bb      	ldr	r3, [r7, #8]
 80003c0:	2b0f      	cmp	r3, #15
 80003c2:	ddea      	ble.n	800039a <app_main+0x11a>
    for (int y = 0; y < 8; y++) {
 80003c4:	68fb      	ldr	r3, [r7, #12]
 80003c6:	3301      	adds	r3, #1
 80003c8:	60fb      	str	r3, [r7, #12]
 80003ca:	68fb      	ldr	r3, [r7, #12]
 80003cc:	2b07      	cmp	r3, #7
 80003ce:	dde1      	ble.n	8000394 <app_main+0x114>
        }
    }
    for (int y = 0; y < 8; y++) {
 80003d0:	2300      	movs	r3, #0
 80003d2:	607b      	str	r3, [r7, #4]
 80003d4:	e01c      	b.n	8000410 <app_main+0x190>
        for (int x = 0; x < 16; x++) {
 80003d6:	2300      	movs	r3, #0
 80003d8:	603b      	str	r3, [r7, #0]
 80003da:	e013      	b.n	8000404 <app_main+0x184>
            LCD_draw((uint8_t) y * 16 + x, x + 17, y + 18, COLOR_HIGHLIGHT_FADE);
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	b2db      	uxtb	r3, r3
 80003e0:	011b      	lsls	r3, r3, #4
 80003e2:	b2da      	uxtb	r2, r3
 80003e4:	683b      	ldr	r3, [r7, #0]
 80003e6:	b2db      	uxtb	r3, r3
 80003e8:	4413      	add	r3, r2
 80003ea:	b2d8      	uxtb	r0, r3
 80003ec:	683b      	ldr	r3, [r7, #0]
 80003ee:	3311      	adds	r3, #17
 80003f0:	4619      	mov	r1, r3
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	3312      	adds	r3, #18
 80003f6:	461a      	mov	r2, r3
 80003f8:	2305      	movs	r3, #5
 80003fa:	f003 f9a7 	bl	800374c <LCD_draw>
        for (int x = 0; x < 16; x++) {
 80003fe:	683b      	ldr	r3, [r7, #0]
 8000400:	3301      	adds	r3, #1
 8000402:	603b      	str	r3, [r7, #0]
 8000404:	683b      	ldr	r3, [r7, #0]
 8000406:	2b0f      	cmp	r3, #15
 8000408:	dde8      	ble.n	80003dc <app_main+0x15c>
    for (int y = 0; y < 8; y++) {
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	3301      	adds	r3, #1
 800040e:	607b      	str	r3, [r7, #4]
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	2b07      	cmp	r3, #7
 8000414:	dddf      	ble.n	80003d6 <app_main+0x156>
        }
    }
    LCD_update_screen();
 8000416:	f003 f912 	bl	800363e <LCD_update_screen>

    while(1) {
        if (LL_ADC_IsEnabled(ADC4)) {
 800041a:	4811      	ldr	r0, [pc, #68]	; (8000460 <app_main+0x1e0>)
 800041c:	f7ff fefc 	bl	8000218 <LL_ADC_IsEnabled>
 8000420:	4603      	mov	r3, r0
 8000422:	2b00      	cmp	r3, #0
 8000424:	d0f9      	beq.n	800041a <app_main+0x19a>
            //LL_ADC_REG_StartConversion(ADC4);
            while(!LL_ADC_IsActiveFlag_EOC(ADC4));
 8000426:	bf00      	nop
 8000428:	480d      	ldr	r0, [pc, #52]	; (8000460 <app_main+0x1e0>)
 800042a:	f7ff ff15 	bl	8000258 <LL_ADC_IsActiveFlag_EOC>
 800042e:	4603      	mov	r3, r0
 8000430:	2b00      	cmp	r3, #0
 8000432:	d0f9      	beq.n	8000428 <app_main+0x1a8>
            joystick[0] = LL_ADC_REG_ReadConversionData12(ADC4);
 8000434:	480a      	ldr	r0, [pc, #40]	; (8000460 <app_main+0x1e0>)
 8000436:	f7ff ff02 	bl	800023e <LL_ADC_REG_ReadConversionData12>
 800043a:	4603      	mov	r3, r0
 800043c:	461a      	mov	r2, r3
 800043e:	4b09      	ldr	r3, [pc, #36]	; (8000464 <app_main+0x1e4>)
 8000440:	601a      	str	r2, [r3, #0]
            //LL_ADC_ClearFlag_EOC(ADC4);
            //LL_ADC_REG_StartConversion(ADC4);
            while(!LL_ADC_IsActiveFlag_EOC(ADC4));
 8000442:	bf00      	nop
 8000444:	4806      	ldr	r0, [pc, #24]	; (8000460 <app_main+0x1e0>)
 8000446:	f7ff ff07 	bl	8000258 <LL_ADC_IsActiveFlag_EOC>
 800044a:	4603      	mov	r3, r0
 800044c:	2b00      	cmp	r3, #0
 800044e:	d0f9      	beq.n	8000444 <app_main+0x1c4>
            joystick[1] = LL_ADC_REG_ReadConversionData12(ADC4);
 8000450:	4803      	ldr	r0, [pc, #12]	; (8000460 <app_main+0x1e0>)
 8000452:	f7ff fef4 	bl	800023e <LL_ADC_REG_ReadConversionData12>
 8000456:	4603      	mov	r3, r0
 8000458:	461a      	mov	r2, r3
 800045a:	4b02      	ldr	r3, [pc, #8]	; (8000464 <app_main+0x1e4>)
 800045c:	605a      	str	r2, [r3, #4]
        if (LL_ADC_IsEnabled(ADC4)) {
 800045e:	e7dc      	b.n	800041a <app_main+0x19a>
 8000460:	50000500 	.word	0x50000500
 8000464:	20000028 	.word	0x20000028

08000468 <LL_ADC_SetCommonPathInternalCh>:
{
 8000468:	b480      	push	{r7}
 800046a:	b083      	sub	sp, #12
 800046c:	af00      	add	r7, sp, #0
 800046e:	6078      	str	r0, [r7, #4]
 8000470:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	689b      	ldr	r3, [r3, #8]
 8000476:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800047a:	683b      	ldr	r3, [r7, #0]
 800047c:	431a      	orrs	r2, r3
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	609a      	str	r2, [r3, #8]
}
 8000482:	bf00      	nop
 8000484:	370c      	adds	r7, #12
 8000486:	46bd      	mov	sp, r7
 8000488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800048c:	4770      	bx	lr

0800048e <LL_ADC_SetGainCompensation>:
{
 800048e:	b480      	push	{r7}
 8000490:	b083      	sub	sp, #12
 8000492:	af00      	add	r7, sp, #0
 8000494:	6078      	str	r0, [r7, #4]
 8000496:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800049e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80004a2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80004a6:	683a      	ldr	r2, [r7, #0]
 80004a8:	431a      	orrs	r2, r3
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_CFGR2_GCOMP_Pos);
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	691b      	ldr	r3, [r3, #16]
 80004b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80004b8:	683a      	ldr	r2, [r7, #0]
 80004ba:	2a00      	cmp	r2, #0
 80004bc:	d002      	beq.n	80004c4 <LL_ADC_SetGainCompensation+0x36>
 80004be:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80004c2:	e000      	b.n	80004c6 <LL_ADC_SetGainCompensation+0x38>
 80004c4:	2200      	movs	r2, #0
 80004c6:	431a      	orrs	r2, r3
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	611a      	str	r2, [r3, #16]
}
 80004cc:	bf00      	nop
 80004ce:	370c      	adds	r7, #12
 80004d0:	46bd      	mov	sp, r7
 80004d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d6:	4770      	bx	lr

080004d8 <LL_ADC_REG_SetTriggerSource>:
{
 80004d8:	b480      	push	{r7}
 80004da:	b083      	sub	sp, #12
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
 80004e0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_EXTEN | ADC_CFGR_EXTSEL, TriggerSource);
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	68db      	ldr	r3, [r3, #12]
 80004e6:	f423 627e 	bic.w	r2, r3, #4064	; 0xfe0
 80004ea:	683b      	ldr	r3, [r7, #0]
 80004ec:	431a      	orrs	r2, r3
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	60da      	str	r2, [r3, #12]
}
 80004f2:	bf00      	nop
 80004f4:	370c      	adds	r7, #12
 80004f6:	46bd      	mov	sp, r7
 80004f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fc:	4770      	bx	lr

080004fe <LL_ADC_REG_SetTriggerEdge>:
{
 80004fe:	b480      	push	{r7}
 8000500:	b083      	sub	sp, #12
 8000502:	af00      	add	r7, sp, #0
 8000504:	6078      	str	r0, [r7, #4]
 8000506:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_EXTEN, ExternalTriggerEdge);
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	68db      	ldr	r3, [r3, #12]
 800050c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8000510:	683b      	ldr	r3, [r7, #0]
 8000512:	431a      	orrs	r2, r3
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	60da      	str	r2, [r3, #12]
}
 8000518:	bf00      	nop
 800051a:	370c      	adds	r7, #12
 800051c:	46bd      	mov	sp, r7
 800051e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000522:	4770      	bx	lr

08000524 <LL_ADC_REG_SetSequencerRanks>:
{
 8000524:	b480      	push	{r7}
 8000526:	b087      	sub	sp, #28
 8000528:	af00      	add	r7, sp, #0
 800052a:	60f8      	str	r0, [r7, #12]
 800052c:	60b9      	str	r1, [r7, #8]
 800052e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8000530:	68fb      	ldr	r3, [r7, #12]
 8000532:	3330      	adds	r3, #48	; 0x30
 8000534:	461a      	mov	r2, r3
 8000536:	68bb      	ldr	r3, [r7, #8]
 8000538:	0a1b      	lsrs	r3, r3, #8
 800053a:	009b      	lsls	r3, r3, #2
 800053c:	f003 030c 	and.w	r3, r3, #12
 8000540:	4413      	add	r3, r2
 8000542:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8000544:	697b      	ldr	r3, [r7, #20]
 8000546:	681a      	ldr	r2, [r3, #0]
 8000548:	68bb      	ldr	r3, [r7, #8]
 800054a:	f003 031f 	and.w	r3, r3, #31
 800054e:	211f      	movs	r1, #31
 8000550:	fa01 f303 	lsl.w	r3, r1, r3
 8000554:	43db      	mvns	r3, r3
 8000556:	401a      	ands	r2, r3
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	0e9b      	lsrs	r3, r3, #26
 800055c:	f003 011f 	and.w	r1, r3, #31
 8000560:	68bb      	ldr	r3, [r7, #8]
 8000562:	f003 031f 	and.w	r3, r3, #31
 8000566:	fa01 f303 	lsl.w	r3, r1, r3
 800056a:	431a      	orrs	r2, r3
 800056c:	697b      	ldr	r3, [r7, #20]
 800056e:	601a      	str	r2, [r3, #0]
}
 8000570:	bf00      	nop
 8000572:	371c      	adds	r7, #28
 8000574:	46bd      	mov	sp, r7
 8000576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057a:	4770      	bx	lr

0800057c <LL_ADC_SetChannelSamplingTime>:
{
 800057c:	b480      	push	{r7}
 800057e:	b087      	sub	sp, #28
 8000580:	af00      	add	r7, sp, #0
 8000582:	60f8      	str	r0, [r7, #12]
 8000584:	60b9      	str	r1, [r7, #8]
 8000586:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8000588:	68fb      	ldr	r3, [r7, #12]
 800058a:	3314      	adds	r3, #20
 800058c:	461a      	mov	r2, r3
 800058e:	68bb      	ldr	r3, [r7, #8]
 8000590:	0e5b      	lsrs	r3, r3, #25
 8000592:	009b      	lsls	r3, r3, #2
 8000594:	f003 0304 	and.w	r3, r3, #4
 8000598:	4413      	add	r3, r2
 800059a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 800059c:	697b      	ldr	r3, [r7, #20]
 800059e:	681a      	ldr	r2, [r3, #0]
 80005a0:	68bb      	ldr	r3, [r7, #8]
 80005a2:	0d1b      	lsrs	r3, r3, #20
 80005a4:	f003 031f 	and.w	r3, r3, #31
 80005a8:	2107      	movs	r1, #7
 80005aa:	fa01 f303 	lsl.w	r3, r1, r3
 80005ae:	43db      	mvns	r3, r3
 80005b0:	401a      	ands	r2, r3
 80005b2:	68bb      	ldr	r3, [r7, #8]
 80005b4:	0d1b      	lsrs	r3, r3, #20
 80005b6:	f003 031f 	and.w	r3, r3, #31
 80005ba:	6879      	ldr	r1, [r7, #4]
 80005bc:	fa01 f303 	lsl.w	r3, r1, r3
 80005c0:	431a      	orrs	r2, r3
 80005c2:	697b      	ldr	r3, [r7, #20]
 80005c4:	601a      	str	r2, [r3, #0]
}
 80005c6:	bf00      	nop
 80005c8:	371c      	adds	r7, #28
 80005ca:	46bd      	mov	sp, r7
 80005cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d0:	4770      	bx	lr
	...

080005d4 <LL_ADC_SetChannelSingleDiff>:
{
 80005d4:	b480      	push	{r7}
 80005d6:	b085      	sub	sp, #20
 80005d8:	af00      	add	r7, sp, #0
 80005da:	60f8      	str	r0, [r7, #12]
 80005dc:	60b9      	str	r1, [r7, #8]
 80005de:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->DIFSEL,
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80005e6:	68bb      	ldr	r3, [r7, #8]
 80005e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80005ec:	43db      	mvns	r3, r3
 80005ee:	401a      	ands	r2, r3
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	f003 0318 	and.w	r3, r3, #24
 80005f6:	4908      	ldr	r1, [pc, #32]	; (8000618 <LL_ADC_SetChannelSingleDiff+0x44>)
 80005f8:	40d9      	lsrs	r1, r3
 80005fa:	68bb      	ldr	r3, [r7, #8]
 80005fc:	400b      	ands	r3, r1
 80005fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000602:	431a      	orrs	r2, r3
 8000604:	68fb      	ldr	r3, [r7, #12]
 8000606:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 800060a:	bf00      	nop
 800060c:	3714      	adds	r7, #20
 800060e:	46bd      	mov	sp, r7
 8000610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000614:	4770      	bx	lr
 8000616:	bf00      	nop
 8000618:	0007ffff 	.word	0x0007ffff

0800061c <LL_ADC_SetOverSamplingScope>:
{
 800061c:	b480      	push	{r7}
 800061e:	b083      	sub	sp, #12
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
 8000624:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_ROVSE | ADC_CFGR2_JOVSE | ADC_CFGR2_ROVSM, OvsScope);
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	691b      	ldr	r3, [r3, #16]
 800062a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800062e:	f023 0303 	bic.w	r3, r3, #3
 8000632:	683a      	ldr	r2, [r7, #0]
 8000634:	431a      	orrs	r2, r3
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	611a      	str	r2, [r3, #16]
}
 800063a:	bf00      	nop
 800063c:	370c      	adds	r7, #12
 800063e:	46bd      	mov	sp, r7
 8000640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000644:	4770      	bx	lr

08000646 <LL_ADC_DisableDeepPowerDown>:
{
 8000646:	b480      	push	{r7}
 8000648:	b083      	sub	sp, #12
 800064a:	af00      	add	r7, sp, #0
 800064c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	689b      	ldr	r3, [r3, #8]
 8000652:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8000656:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800065a:	687a      	ldr	r2, [r7, #4]
 800065c:	6093      	str	r3, [r2, #8]
}
 800065e:	bf00      	nop
 8000660:	370c      	adds	r7, #12
 8000662:	46bd      	mov	sp, r7
 8000664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000668:	4770      	bx	lr

0800066a <LL_ADC_EnableInternalRegulator>:
{
 800066a:	b480      	push	{r7}
 800066c:	b083      	sub	sp, #12
 800066e:	af00      	add	r7, sp, #0
 8000670:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	689b      	ldr	r3, [r3, #8]
 8000676:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800067a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800067e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	609a      	str	r2, [r3, #8]
}
 8000686:	bf00      	nop
 8000688:	370c      	adds	r7, #12
 800068a:	46bd      	mov	sp, r7
 800068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000690:	4770      	bx	lr

08000692 <LL_ADC_Enable>:
{
 8000692:	b480      	push	{r7}
 8000694:	b083      	sub	sp, #12
 8000696:	af00      	add	r7, sp, #0
 8000698:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	689b      	ldr	r3, [r3, #8]
 800069e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80006a2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80006a6:	f043 0201 	orr.w	r2, r3, #1
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	609a      	str	r2, [r3, #8]
}
 80006ae:	bf00      	nop
 80006b0:	370c      	adds	r7, #12
 80006b2:	46bd      	mov	sp, r7
 80006b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b8:	4770      	bx	lr

080006ba <LL_ADC_StartCalibration>:
{
 80006ba:	b480      	push	{r7}
 80006bc:	b083      	sub	sp, #12
 80006be:	af00      	add	r7, sp, #0
 80006c0:	6078      	str	r0, [r7, #4]
 80006c2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	689b      	ldr	r3, [r3, #8]
 80006c8:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80006cc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80006d0:	683a      	ldr	r2, [r7, #0]
 80006d2:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80006d6:	4313      	orrs	r3, r2
 80006d8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	609a      	str	r2, [r3, #8]
}
 80006e0:	bf00      	nop
 80006e2:	370c      	adds	r7, #12
 80006e4:	46bd      	mov	sp, r7
 80006e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ea:	4770      	bx	lr

080006ec <LL_ADC_IsCalibrationOnGoing>:
{
 80006ec:	b480      	push	{r7}
 80006ee:	b083      	sub	sp, #12
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	689b      	ldr	r3, [r3, #8]
 80006f8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80006fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000700:	d101      	bne.n	8000706 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8000702:	2301      	movs	r3, #1
 8000704:	e000      	b.n	8000708 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8000706:	2300      	movs	r3, #0
}
 8000708:	4618      	mov	r0, r3
 800070a:	370c      	adds	r7, #12
 800070c:	46bd      	mov	sp, r7
 800070e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000712:	4770      	bx	lr

08000714 <LL_ADC_IsActiveFlag_ADRDY>:
{
 8000714:	b480      	push	{r7}
 8000716:	b083      	sub	sp, #12
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	f003 0301 	and.w	r3, r3, #1
 8000724:	2b01      	cmp	r3, #1
 8000726:	d101      	bne.n	800072c <LL_ADC_IsActiveFlag_ADRDY+0x18>
 8000728:	2301      	movs	r3, #1
 800072a:	e000      	b.n	800072e <LL_ADC_IsActiveFlag_ADRDY+0x1a>
 800072c:	2300      	movs	r3, #0
}
 800072e:	4618      	mov	r0, r3
 8000730:	370c      	adds	r7, #12
 8000732:	46bd      	mov	sp, r7
 8000734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000738:	4770      	bx	lr
	...

0800073c <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
 800073c:	b480      	push	{r7}
 800073e:	b087      	sub	sp, #28
 8000740:	af00      	add	r7, sp, #0
 8000742:	60f8      	str	r0, [r7, #12]
 8000744:	60b9      	str	r1, [r7, #8]
 8000746:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR,
 800074c:	4a0e      	ldr	r2, [pc, #56]	; (8000788 <LL_DMA_SetDataTransferDirection+0x4c>)
 800074e:	68bb      	ldr	r3, [r7, #8]
 8000750:	4413      	add	r3, r2
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	461a      	mov	r2, r3
 8000756:	697b      	ldr	r3, [r7, #20]
 8000758:	4413      	add	r3, r2
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000760:	f023 0310 	bic.w	r3, r3, #16
 8000764:	4908      	ldr	r1, [pc, #32]	; (8000788 <LL_DMA_SetDataTransferDirection+0x4c>)
 8000766:	68ba      	ldr	r2, [r7, #8]
 8000768:	440a      	add	r2, r1
 800076a:	7812      	ldrb	r2, [r2, #0]
 800076c:	4611      	mov	r1, r2
 800076e:	697a      	ldr	r2, [r7, #20]
 8000770:	440a      	add	r2, r1
 8000772:	4611      	mov	r1, r2
 8000774:	687a      	ldr	r2, [r7, #4]
 8000776:	4313      	orrs	r3, r2
 8000778:	600b      	str	r3, [r1, #0]
             DMA_CCR_DIR | DMA_CCR_MEM2MEM, Direction);
}
 800077a:	bf00      	nop
 800077c:	371c      	adds	r7, #28
 800077e:	46bd      	mov	sp, r7
 8000780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000784:	4770      	bx	lr
 8000786:	bf00      	nop
 8000788:	08003898 	.word	0x08003898

0800078c <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_NORMAL
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Mode)
{
 800078c:	b480      	push	{r7}
 800078e:	b087      	sub	sp, #28
 8000790:	af00      	add	r7, sp, #0
 8000792:	60f8      	str	r0, [r7, #12]
 8000794:	60b9      	str	r1, [r7, #8]
 8000796:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_CIRC,
 800079c:	4a0d      	ldr	r2, [pc, #52]	; (80007d4 <LL_DMA_SetMode+0x48>)
 800079e:	68bb      	ldr	r3, [r7, #8]
 80007a0:	4413      	add	r3, r2
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	461a      	mov	r2, r3
 80007a6:	697b      	ldr	r3, [r7, #20]
 80007a8:	4413      	add	r3, r2
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	f023 0220 	bic.w	r2, r3, #32
 80007b0:	4908      	ldr	r1, [pc, #32]	; (80007d4 <LL_DMA_SetMode+0x48>)
 80007b2:	68bb      	ldr	r3, [r7, #8]
 80007b4:	440b      	add	r3, r1
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	4619      	mov	r1, r3
 80007ba:	697b      	ldr	r3, [r7, #20]
 80007bc:	440b      	add	r3, r1
 80007be:	4619      	mov	r1, r3
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	4313      	orrs	r3, r2
 80007c4:	600b      	str	r3, [r1, #0]
             Mode);
}
 80007c6:	bf00      	nop
 80007c8:	371c      	adds	r7, #28
 80007ca:	46bd      	mov	sp, r7
 80007cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d0:	4770      	bx	lr
 80007d2:	bf00      	nop
 80007d4:	08003898 	.word	0x08003898

080007d8 <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcIncMode)
{
 80007d8:	b480      	push	{r7}
 80007da:	b087      	sub	sp, #28
 80007dc:	af00      	add	r7, sp, #0
 80007de:	60f8      	str	r0, [r7, #12]
 80007e0:	60b9      	str	r1, [r7, #8]
 80007e2:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_PINC,
 80007e8:	4a0d      	ldr	r2, [pc, #52]	; (8000820 <LL_DMA_SetPeriphIncMode+0x48>)
 80007ea:	68bb      	ldr	r3, [r7, #8]
 80007ec:	4413      	add	r3, r2
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	461a      	mov	r2, r3
 80007f2:	697b      	ldr	r3, [r7, #20]
 80007f4:	4413      	add	r3, r2
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80007fc:	4908      	ldr	r1, [pc, #32]	; (8000820 <LL_DMA_SetPeriphIncMode+0x48>)
 80007fe:	68bb      	ldr	r3, [r7, #8]
 8000800:	440b      	add	r3, r1
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	4619      	mov	r1, r3
 8000806:	697b      	ldr	r3, [r7, #20]
 8000808:	440b      	add	r3, r1
 800080a:	4619      	mov	r1, r3
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	4313      	orrs	r3, r2
 8000810:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcIncMode);
}
 8000812:	bf00      	nop
 8000814:	371c      	adds	r7, #28
 8000816:	46bd      	mov	sp, r7
 8000818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081c:	4770      	bx	lr
 800081e:	bf00      	nop
 8000820:	08003898 	.word	0x08003898

08000824 <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstIncMode)
{
 8000824:	b480      	push	{r7}
 8000826:	b087      	sub	sp, #28
 8000828:	af00      	add	r7, sp, #0
 800082a:	60f8      	str	r0, [r7, #12]
 800082c:	60b9      	str	r1, [r7, #8]
 800082e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_MINC,
 8000834:	4a0d      	ldr	r2, [pc, #52]	; (800086c <LL_DMA_SetMemoryIncMode+0x48>)
 8000836:	68bb      	ldr	r3, [r7, #8]
 8000838:	4413      	add	r3, r2
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	461a      	mov	r2, r3
 800083e:	697b      	ldr	r3, [r7, #20]
 8000840:	4413      	add	r3, r2
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000848:	4908      	ldr	r1, [pc, #32]	; (800086c <LL_DMA_SetMemoryIncMode+0x48>)
 800084a:	68bb      	ldr	r3, [r7, #8]
 800084c:	440b      	add	r3, r1
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	4619      	mov	r1, r3
 8000852:	697b      	ldr	r3, [r7, #20]
 8000854:	440b      	add	r3, r1
 8000856:	4619      	mov	r1, r3
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	4313      	orrs	r3, r2
 800085c:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstIncMode);
}
 800085e:	bf00      	nop
 8000860:	371c      	adds	r7, #28
 8000862:	46bd      	mov	sp, r7
 8000864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000868:	4770      	bx	lr
 800086a:	bf00      	nop
 800086c:	08003898 	.word	0x08003898

08000870 <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcDataSize)
{
 8000870:	b480      	push	{r7}
 8000872:	b087      	sub	sp, #28
 8000874:	af00      	add	r7, sp, #0
 8000876:	60f8      	str	r0, [r7, #12]
 8000878:	60b9      	str	r1, [r7, #8]
 800087a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_PSIZE,
 8000880:	4a0d      	ldr	r2, [pc, #52]	; (80008b8 <LL_DMA_SetPeriphSize+0x48>)
 8000882:	68bb      	ldr	r3, [r7, #8]
 8000884:	4413      	add	r3, r2
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	461a      	mov	r2, r3
 800088a:	697b      	ldr	r3, [r7, #20]
 800088c:	4413      	add	r3, r2
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8000894:	4908      	ldr	r1, [pc, #32]	; (80008b8 <LL_DMA_SetPeriphSize+0x48>)
 8000896:	68bb      	ldr	r3, [r7, #8]
 8000898:	440b      	add	r3, r1
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	4619      	mov	r1, r3
 800089e:	697b      	ldr	r3, [r7, #20]
 80008a0:	440b      	add	r3, r1
 80008a2:	4619      	mov	r1, r3
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	4313      	orrs	r3, r2
 80008a8:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcDataSize);
}
 80008aa:	bf00      	nop
 80008ac:	371c      	adds	r7, #28
 80008ae:	46bd      	mov	sp, r7
 80008b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b4:	4770      	bx	lr
 80008b6:	bf00      	nop
 80008b8:	08003898 	.word	0x08003898

080008bc <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstDataSize)
{
 80008bc:	b480      	push	{r7}
 80008be:	b087      	sub	sp, #28
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	60f8      	str	r0, [r7, #12]
 80008c4:	60b9      	str	r1, [r7, #8]
 80008c6:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_MSIZE,
 80008cc:	4a0d      	ldr	r2, [pc, #52]	; (8000904 <LL_DMA_SetMemorySize+0x48>)
 80008ce:	68bb      	ldr	r3, [r7, #8]
 80008d0:	4413      	add	r3, r2
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	461a      	mov	r2, r3
 80008d6:	697b      	ldr	r3, [r7, #20]
 80008d8:	4413      	add	r3, r2
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80008e0:	4908      	ldr	r1, [pc, #32]	; (8000904 <LL_DMA_SetMemorySize+0x48>)
 80008e2:	68bb      	ldr	r3, [r7, #8]
 80008e4:	440b      	add	r3, r1
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	4619      	mov	r1, r3
 80008ea:	697b      	ldr	r3, [r7, #20]
 80008ec:	440b      	add	r3, r1
 80008ee:	4619      	mov	r1, r3
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	4313      	orrs	r3, r2
 80008f4:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstDataSize);
}
 80008f6:	bf00      	nop
 80008f8:	371c      	adds	r7, #28
 80008fa:	46bd      	mov	sp, r7
 80008fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000900:	4770      	bx	lr
 8000902:	bf00      	nop
 8000904:	08003898 	.word	0x08003898

08000908 <LL_DMA_SetChannelPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
 8000908:	b480      	push	{r7}
 800090a:	b087      	sub	sp, #28
 800090c:	af00      	add	r7, sp, #0
 800090e:	60f8      	str	r0, [r7, #12]
 8000910:	60b9      	str	r1, [r7, #8]
 8000912:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_PL,
 8000918:	4a0d      	ldr	r2, [pc, #52]	; (8000950 <LL_DMA_SetChannelPriorityLevel+0x48>)
 800091a:	68bb      	ldr	r3, [r7, #8]
 800091c:	4413      	add	r3, r2
 800091e:	781b      	ldrb	r3, [r3, #0]
 8000920:	461a      	mov	r2, r3
 8000922:	697b      	ldr	r3, [r7, #20]
 8000924:	4413      	add	r3, r2
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800092c:	4908      	ldr	r1, [pc, #32]	; (8000950 <LL_DMA_SetChannelPriorityLevel+0x48>)
 800092e:	68bb      	ldr	r3, [r7, #8]
 8000930:	440b      	add	r3, r1
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	4619      	mov	r1, r3
 8000936:	697b      	ldr	r3, [r7, #20]
 8000938:	440b      	add	r3, r1
 800093a:	4619      	mov	r1, r3
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	4313      	orrs	r3, r2
 8000940:	600b      	str	r3, [r1, #0]
             Priority);
}
 8000942:	bf00      	nop
 8000944:	371c      	adds	r7, #28
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr
 800094e:	bf00      	nop
 8000950:	08003898 	.word	0x08003898

08000954 <LL_DMA_SetPeriphRequest>:
  *         @arg @ref LL_DMAMUX_REQ_UCPD1_TX
  *         (*) Not on all G4 devices
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphRequest(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphRequest)
{
 8000954:	b480      	push	{r7}
 8000956:	b087      	sub	sp, #28
 8000958:	af00      	add	r7, sp, #0
 800095a:	60f8      	str	r0, [r7, #12]
 800095c:	60b9      	str	r1, [r7, #8]
 800095e:	607a      	str	r2, [r7, #4]
  uint32_t dmamux_ccr_offset = ((((uint32_t)DMAx ^ (uint32_t)DMA1) >> 10U) * 8U);
 8000960:	68fb      	ldr	r3, [r7, #12]
 8000962:	0a9b      	lsrs	r3, r3, #10
 8000964:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000968:	f083 0380 	eor.w	r3, r3, #128	; 0x80
 800096c:	00db      	lsls	r3, r3, #3
 800096e:	617b      	str	r3, [r7, #20]
  MODIFY_REG((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID, PeriphRequest);
 8000970:	68ba      	ldr	r2, [r7, #8]
 8000972:	697b      	ldr	r3, [r7, #20]
 8000974:	4413      	add	r3, r2
 8000976:	009b      	lsls	r3, r3, #2
 8000978:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800097c:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8000986:	68ba      	ldr	r2, [r7, #8]
 8000988:	697b      	ldr	r3, [r7, #20]
 800098a:	4413      	add	r3, r2
 800098c:	009b      	lsls	r3, r3, #2
 800098e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000992:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8000996:	687a      	ldr	r2, [r7, #4]
 8000998:	430a      	orrs	r2, r1
 800099a:	601a      	str	r2, [r3, #0]
}
 800099c:	bf00      	nop
 800099e:	371c      	adds	r7, #28
 80009a0:	46bd      	mov	sp, r7
 80009a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a6:	4770      	bx	lr

080009a8 <LL_RCC_HSE_EnableBypass>:
  * @brief  Enable HSE external oscillator (HSE Bypass)
  * @rmtoll CR           HSEBYP        LL_RCC_HSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableBypass(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 80009ac:	4b05      	ldr	r3, [pc, #20]	; (80009c4 <LL_RCC_HSE_EnableBypass+0x1c>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	4a04      	ldr	r2, [pc, #16]	; (80009c4 <LL_RCC_HSE_EnableBypass+0x1c>)
 80009b2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009b6:	6013      	str	r3, [r2, #0]
}
 80009b8:	bf00      	nop
 80009ba:	46bd      	mov	sp, r7
 80009bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop
 80009c4:	40021000 	.word	0x40021000

080009c8 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80009cc:	4b05      	ldr	r3, [pc, #20]	; (80009e4 <LL_RCC_HSE_Enable+0x1c>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	4a04      	ldr	r2, [pc, #16]	; (80009e4 <LL_RCC_HSE_Enable+0x1c>)
 80009d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80009d6:	6013      	str	r3, [r2, #0]
}
 80009d8:	bf00      	nop
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr
 80009e2:	bf00      	nop
 80009e4:	40021000 	.word	0x40021000

080009e8 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80009ec:	4b07      	ldr	r3, [pc, #28]	; (8000a0c <LL_RCC_HSE_IsReady+0x24>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80009f8:	d101      	bne.n	80009fe <LL_RCC_HSE_IsReady+0x16>
 80009fa:	2301      	movs	r3, #1
 80009fc:	e000      	b.n	8000a00 <LL_RCC_HSE_IsReady+0x18>
 80009fe:	2300      	movs	r3, #0
}
 8000a00:	4618      	mov	r0, r3
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop
 8000a0c:	40021000 	.word	0x40021000

08000a10 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b083      	sub	sp, #12
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000a18:	4b06      	ldr	r3, [pc, #24]	; (8000a34 <LL_RCC_SetSysClkSource+0x24>)
 8000a1a:	689b      	ldr	r3, [r3, #8]
 8000a1c:	f023 0203 	bic.w	r2, r3, #3
 8000a20:	4904      	ldr	r1, [pc, #16]	; (8000a34 <LL_RCC_SetSysClkSource+0x24>)
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	4313      	orrs	r3, r2
 8000a26:	608b      	str	r3, [r1, #8]
}
 8000a28:	bf00      	nop
 8000a2a:	370c      	adds	r7, #12
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a32:	4770      	bx	lr
 8000a34:	40021000 	.word	0x40021000

08000a38 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000a3c:	4b04      	ldr	r3, [pc, #16]	; (8000a50 <LL_RCC_GetSysClkSource+0x18>)
 8000a3e:	689b      	ldr	r3, [r3, #8]
 8000a40:	f003 030c 	and.w	r3, r3, #12
}
 8000a44:	4618      	mov	r0, r3
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	40021000 	.word	0x40021000

08000a54 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b083      	sub	sp, #12
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000a5c:	4b06      	ldr	r3, [pc, #24]	; (8000a78 <LL_RCC_SetAHBPrescaler+0x24>)
 8000a5e:	689b      	ldr	r3, [r3, #8]
 8000a60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000a64:	4904      	ldr	r1, [pc, #16]	; (8000a78 <LL_RCC_SetAHBPrescaler+0x24>)
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	4313      	orrs	r3, r2
 8000a6a:	608b      	str	r3, [r1, #8]
}
 8000a6c:	bf00      	nop
 8000a6e:	370c      	adds	r7, #12
 8000a70:	46bd      	mov	sp, r7
 8000a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a76:	4770      	bx	lr
 8000a78:	40021000 	.word	0x40021000

08000a7c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b083      	sub	sp, #12
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000a84:	4b06      	ldr	r3, [pc, #24]	; (8000aa0 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000a86:	689b      	ldr	r3, [r3, #8]
 8000a88:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000a8c:	4904      	ldr	r1, [pc, #16]	; (8000aa0 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	4313      	orrs	r3, r2
 8000a92:	608b      	str	r3, [r1, #8]
}
 8000a94:	bf00      	nop
 8000a96:	370c      	adds	r7, #12
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9e:	4770      	bx	lr
 8000aa0:	40021000 	.word	0x40021000

08000aa4 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b083      	sub	sp, #12
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000aac:	4b06      	ldr	r3, [pc, #24]	; (8000ac8 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000aae:	689b      	ldr	r3, [r3, #8]
 8000ab0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000ab4:	4904      	ldr	r1, [pc, #16]	; (8000ac8 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	4313      	orrs	r3, r2
 8000aba:	608b      	str	r3, [r1, #8]
}
 8000abc:	bf00      	nop
 8000abe:	370c      	adds	r7, #12
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac6:	4770      	bx	lr
 8000ac8:	40021000 	.word	0x40021000

08000acc <LL_RCC_SetADCClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetADCClockSource(uint32_t ADCxSource)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b083      	sub	sp, #12
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, 3U << ((ADCxSource & 0x001F0000U) >> 16U), ((ADCxSource & 0x000000FFU) << ((ADCxSource & 0x001F0000U) >> 16U)));
 8000ad4:	4b0e      	ldr	r3, [pc, #56]	; (8000b10 <LL_RCC_SetADCClockSource+0x44>)
 8000ad6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	0c1b      	lsrs	r3, r3, #16
 8000ade:	f003 031f 	and.w	r3, r3, #31
 8000ae2:	2103      	movs	r1, #3
 8000ae4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ae8:	43db      	mvns	r3, r3
 8000aea:	401a      	ands	r2, r3
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	b2d9      	uxtb	r1, r3
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	0c1b      	lsrs	r3, r3, #16
 8000af4:	f003 031f 	and.w	r3, r3, #31
 8000af8:	fa01 f303 	lsl.w	r3, r1, r3
 8000afc:	4904      	ldr	r1, [pc, #16]	; (8000b10 <LL_RCC_SetADCClockSource+0x44>)
 8000afe:	4313      	orrs	r3, r2
 8000b00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8000b04:	bf00      	nop
 8000b06:	370c      	adds	r7, #12
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0e:	4770      	bx	lr
 8000b10:	40021000 	.word	0x40021000

08000b14 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000b18:	4b05      	ldr	r3, [pc, #20]	; (8000b30 <LL_RCC_PLL_Enable+0x1c>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a04      	ldr	r2, [pc, #16]	; (8000b30 <LL_RCC_PLL_Enable+0x1c>)
 8000b1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000b22:	6013      	str	r3, [r2, #0]
}
 8000b24:	bf00      	nop
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop
 8000b30:	40021000 	.word	0x40021000

08000b34 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8000b38:	4b07      	ldr	r3, [pc, #28]	; (8000b58 <LL_RCC_PLL_IsReady+0x24>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b40:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000b44:	d101      	bne.n	8000b4a <LL_RCC_PLL_IsReady+0x16>
 8000b46:	2301      	movs	r3, #1
 8000b48:	e000      	b.n	8000b4c <LL_RCC_PLL_IsReady+0x18>
 8000b4a:	2300      	movs	r3, #0
}
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	40021000 	.word	0x40021000

08000b5c <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b085      	sub	sp, #20
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	60f8      	str	r0, [r7, #12]
 8000b64:	60b9      	str	r1, [r7, #8]
 8000b66:	607a      	str	r2, [r7, #4]
 8000b68:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 8000b6a:	4b0a      	ldr	r3, [pc, #40]	; (8000b94 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8000b6c:	68da      	ldr	r2, [r3, #12]
 8000b6e:	4b0a      	ldr	r3, [pc, #40]	; (8000b98 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 8000b70:	4013      	ands	r3, r2
 8000b72:	68f9      	ldr	r1, [r7, #12]
 8000b74:	68ba      	ldr	r2, [r7, #8]
 8000b76:	4311      	orrs	r1, r2
 8000b78:	687a      	ldr	r2, [r7, #4]
 8000b7a:	0212      	lsls	r2, r2, #8
 8000b7c:	4311      	orrs	r1, r2
 8000b7e:	683a      	ldr	r2, [r7, #0]
 8000b80:	430a      	orrs	r2, r1
 8000b82:	4904      	ldr	r1, [pc, #16]	; (8000b94 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8000b84:	4313      	orrs	r3, r2
 8000b86:	60cb      	str	r3, [r1, #12]
             Source | PLLM | (PLLN << RCC_PLLCFGR_PLLN_Pos) | PLLR);
}
 8000b88:	bf00      	nop
 8000b8a:	3714      	adds	r7, #20
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b92:	4770      	bx	lr
 8000b94:	40021000 	.word	0x40021000
 8000b98:	f9ff800c 	.word	0xf9ff800c

08000b9c <LL_RCC_PLL_EnableDomain_SYS>:
  * @brief  Enable PLL output mapped on SYSCLK domain
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 8000ba0:	4b05      	ldr	r3, [pc, #20]	; (8000bb8 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 8000ba2:	68db      	ldr	r3, [r3, #12]
 8000ba4:	4a04      	ldr	r2, [pc, #16]	; (8000bb8 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 8000ba6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000baa:	60d3      	str	r3, [r2, #12]
}
 8000bac:	bf00      	nop
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop
 8000bb8:	40021000 	.word	0x40021000

08000bbc <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_FLASH
  *         @arg @ref LL_AHB1_GRP1_PERIPH_CRC
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b085      	sub	sp, #20
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000bc4:	4b08      	ldr	r3, [pc, #32]	; (8000be8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000bc6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000bc8:	4907      	ldr	r1, [pc, #28]	; (8000be8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	4313      	orrs	r3, r2
 8000bce:	648b      	str	r3, [r1, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000bd0:	4b05      	ldr	r3, [pc, #20]	; (8000be8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000bd2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	4013      	ands	r3, r2
 8000bd8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000bda:	68fb      	ldr	r3, [r7, #12]
}
 8000bdc:	bf00      	nop
 8000bde:	3714      	adds	r7, #20
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr
 8000be8:	40021000 	.word	0x40021000

08000bec <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b085      	sub	sp, #20
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000bf4:	4b08      	ldr	r3, [pc, #32]	; (8000c18 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000bf6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000bf8:	4907      	ldr	r1, [pc, #28]	; (8000c18 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	4313      	orrs	r3, r2
 8000bfe:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000c00:	4b05      	ldr	r3, [pc, #20]	; (8000c18 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000c02:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	4013      	ands	r3, r2
 8000c08:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c0a:	68fb      	ldr	r3, [r7, #12]
}
 8000c0c:	bf00      	nop
 8000c0e:	3714      	adds	r7, #20
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr
 8000c18:	40021000 	.word	0x40021000

08000c1c <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b085      	sub	sp, #20
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000c24:	4b08      	ldr	r3, [pc, #32]	; (8000c48 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000c26:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000c28:	4907      	ldr	r1, [pc, #28]	; (8000c48 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	4313      	orrs	r3, r2
 8000c2e:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000c30:	4b05      	ldr	r3, [pc, #20]	; (8000c48 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000c32:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	4013      	ands	r3, r2
 8000c38:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c3a:	68fb      	ldr	r3, [r7, #12]
}
 8000c3c:	bf00      	nop
 8000c3e:	3714      	adds	r7, #20
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr
 8000c48:	40021000 	.word	0x40021000

08000c4c <LL_FLASH_SetLatency>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b083      	sub	sp, #12
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000c54:	4b06      	ldr	r3, [pc, #24]	; (8000c70 <LL_FLASH_SetLatency+0x24>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	f023 020f 	bic.w	r2, r3, #15
 8000c5c:	4904      	ldr	r1, [pc, #16]	; (8000c70 <LL_FLASH_SetLatency+0x24>)
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	4313      	orrs	r3, r2
 8000c62:	600b      	str	r3, [r1, #0]
}
 8000c64:	bf00      	nop
 8000c66:	370c      	adds	r7, #12
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6e:	4770      	bx	lr
 8000c70:	40022000 	.word	0x40022000

08000c74 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_15 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000c78:	4b04      	ldr	r3, [pc, #16]	; (8000c8c <LL_FLASH_GetLatency+0x18>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	f003 030f 	and.w	r3, r3, #15
}
 8000c80:	4618      	mov	r0, r3
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop
 8000c8c:	40022000 	.word	0x40022000

08000c90 <LL_PWR_EnableRange1BoostMode>:
  * @brief  Enable main regulator voltage range 1 boost mode
  * @rmtoll CR5          R1MODE        LL_PWR_EnableRange1BoostMode
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableRange1BoostMode(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000c94:	4b06      	ldr	r3, [pc, #24]	; (8000cb0 <LL_PWR_EnableRange1BoostMode+0x20>)
 8000c96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000c9a:	4a05      	ldr	r2, [pc, #20]	; (8000cb0 <LL_PWR_EnableRange1BoostMode+0x20>)
 8000c9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000ca0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
}
 8000ca4:	bf00      	nop
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	40007000 	.word	0x40007000

08000cb4 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b083      	sub	sp, #12
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	f043 0201 	orr.w	r2, r3, #1
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	601a      	str	r2, [r3, #0]
}
 8000cc8:	bf00      	nop
 8000cca:	370c      	adds	r7, #12
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr

08000cd4 <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b083      	sub	sp, #12
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	601a      	str	r2, [r3, #0]
}
 8000ce8:	bf00      	nop
 8000cea:	370c      	adds	r7, #12
 8000cec:	46bd      	mov	sp, r7
 8000cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf2:	4770      	bx	lr

08000cf4 <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH5
  *         @arg @ref LL_TIM_CHANNEL_CH6
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b083      	sub	sp, #12
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
 8000cfc:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	6a1a      	ldr	r2, [r3, #32]
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	431a      	orrs	r2, r3
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	621a      	str	r2, [r3, #32]
}
 8000d0a:	bf00      	nop
 8000d0c:	370c      	adds	r7, #12
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
	...

08000d18 <LL_TIM_OC_DisableFast>:
  *         @arg @ref LL_TIM_CHANNEL_CH5
  *         @arg @ref LL_TIM_CHANNEL_CH6
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_DisableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b085      	sub	sp, #20
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
 8000d20:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	2b01      	cmp	r3, #1
 8000d26:	d02e      	beq.n	8000d86 <LL_TIM_OC_DisableFast+0x6e>
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	2b04      	cmp	r3, #4
 8000d2c:	d029      	beq.n	8000d82 <LL_TIM_OC_DisableFast+0x6a>
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	2b10      	cmp	r3, #16
 8000d32:	d024      	beq.n	8000d7e <LL_TIM_OC_DisableFast+0x66>
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	2b40      	cmp	r3, #64	; 0x40
 8000d38:	d01f      	beq.n	8000d7a <LL_TIM_OC_DisableFast+0x62>
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000d40:	d019      	beq.n	8000d76 <LL_TIM_OC_DisableFast+0x5e>
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d48:	d013      	beq.n	8000d72 <LL_TIM_OC_DisableFast+0x5a>
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000d50:	d00d      	beq.n	8000d6e <LL_TIM_OC_DisableFast+0x56>
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000d58:	d007      	beq.n	8000d6a <LL_TIM_OC_DisableFast+0x52>
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d60:	d101      	bne.n	8000d66 <LL_TIM_OC_DisableFast+0x4e>
 8000d62:	2308      	movs	r3, #8
 8000d64:	e010      	b.n	8000d88 <LL_TIM_OC_DisableFast+0x70>
 8000d66:	2309      	movs	r3, #9
 8000d68:	e00e      	b.n	8000d88 <LL_TIM_OC_DisableFast+0x70>
 8000d6a:	2307      	movs	r3, #7
 8000d6c:	e00c      	b.n	8000d88 <LL_TIM_OC_DisableFast+0x70>
 8000d6e:	2306      	movs	r3, #6
 8000d70:	e00a      	b.n	8000d88 <LL_TIM_OC_DisableFast+0x70>
 8000d72:	2305      	movs	r3, #5
 8000d74:	e008      	b.n	8000d88 <LL_TIM_OC_DisableFast+0x70>
 8000d76:	2304      	movs	r3, #4
 8000d78:	e006      	b.n	8000d88 <LL_TIM_OC_DisableFast+0x70>
 8000d7a:	2303      	movs	r3, #3
 8000d7c:	e004      	b.n	8000d88 <LL_TIM_OC_DisableFast+0x70>
 8000d7e:	2302      	movs	r3, #2
 8000d80:	e002      	b.n	8000d88 <LL_TIM_OC_DisableFast+0x70>
 8000d82:	2301      	movs	r3, #1
 8000d84:	e000      	b.n	8000d88 <LL_TIM_OC_DisableFast+0x70>
 8000d86:	2300      	movs	r3, #0
 8000d88:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	3318      	adds	r3, #24
 8000d8e:	4619      	mov	r1, r3
 8000d90:	7bfb      	ldrb	r3, [r7, #15]
 8000d92:	4a0b      	ldr	r2, [pc, #44]	; (8000dc0 <LL_TIM_OC_DisableFast+0xa8>)
 8000d94:	5cd3      	ldrb	r3, [r2, r3]
 8000d96:	440b      	add	r3, r1
 8000d98:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8000d9a:	68bb      	ldr	r3, [r7, #8]
 8000d9c:	681a      	ldr	r2, [r3, #0]
 8000d9e:	7bfb      	ldrb	r3, [r7, #15]
 8000da0:	4908      	ldr	r1, [pc, #32]	; (8000dc4 <LL_TIM_OC_DisableFast+0xac>)
 8000da2:	5ccb      	ldrb	r3, [r1, r3]
 8000da4:	4619      	mov	r1, r3
 8000da6:	2304      	movs	r3, #4
 8000da8:	408b      	lsls	r3, r1
 8000daa:	43db      	mvns	r3, r3
 8000dac:	401a      	ands	r2, r3
 8000dae:	68bb      	ldr	r3, [r7, #8]
 8000db0:	601a      	str	r2, [r3, #0]

}
 8000db2:	bf00      	nop
 8000db4:	3714      	adds	r7, #20
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	080038a0 	.word	0x080038a0
 8000dc4:	080038ac 	.word	0x080038ac

08000dc8 <LL_TIM_OC_EnablePreload>:
  *         @arg @ref LL_TIM_CHANNEL_CH5
  *         @arg @ref LL_TIM_CHANNEL_CH6
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b085      	sub	sp, #20
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
 8000dd0:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	2b01      	cmp	r3, #1
 8000dd6:	d02e      	beq.n	8000e36 <LL_TIM_OC_EnablePreload+0x6e>
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	2b04      	cmp	r3, #4
 8000ddc:	d029      	beq.n	8000e32 <LL_TIM_OC_EnablePreload+0x6a>
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	2b10      	cmp	r3, #16
 8000de2:	d024      	beq.n	8000e2e <LL_TIM_OC_EnablePreload+0x66>
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	2b40      	cmp	r3, #64	; 0x40
 8000de8:	d01f      	beq.n	8000e2a <LL_TIM_OC_EnablePreload+0x62>
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000df0:	d019      	beq.n	8000e26 <LL_TIM_OC_EnablePreload+0x5e>
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000df8:	d013      	beq.n	8000e22 <LL_TIM_OC_EnablePreload+0x5a>
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000e00:	d00d      	beq.n	8000e1e <LL_TIM_OC_EnablePreload+0x56>
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000e08:	d007      	beq.n	8000e1a <LL_TIM_OC_EnablePreload+0x52>
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e10:	d101      	bne.n	8000e16 <LL_TIM_OC_EnablePreload+0x4e>
 8000e12:	2308      	movs	r3, #8
 8000e14:	e010      	b.n	8000e38 <LL_TIM_OC_EnablePreload+0x70>
 8000e16:	2309      	movs	r3, #9
 8000e18:	e00e      	b.n	8000e38 <LL_TIM_OC_EnablePreload+0x70>
 8000e1a:	2307      	movs	r3, #7
 8000e1c:	e00c      	b.n	8000e38 <LL_TIM_OC_EnablePreload+0x70>
 8000e1e:	2306      	movs	r3, #6
 8000e20:	e00a      	b.n	8000e38 <LL_TIM_OC_EnablePreload+0x70>
 8000e22:	2305      	movs	r3, #5
 8000e24:	e008      	b.n	8000e38 <LL_TIM_OC_EnablePreload+0x70>
 8000e26:	2304      	movs	r3, #4
 8000e28:	e006      	b.n	8000e38 <LL_TIM_OC_EnablePreload+0x70>
 8000e2a:	2303      	movs	r3, #3
 8000e2c:	e004      	b.n	8000e38 <LL_TIM_OC_EnablePreload+0x70>
 8000e2e:	2302      	movs	r3, #2
 8000e30:	e002      	b.n	8000e38 <LL_TIM_OC_EnablePreload+0x70>
 8000e32:	2301      	movs	r3, #1
 8000e34:	e000      	b.n	8000e38 <LL_TIM_OC_EnablePreload+0x70>
 8000e36:	2300      	movs	r3, #0
 8000e38:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	3318      	adds	r3, #24
 8000e3e:	4619      	mov	r1, r3
 8000e40:	7bfb      	ldrb	r3, [r7, #15]
 8000e42:	4a0a      	ldr	r2, [pc, #40]	; (8000e6c <LL_TIM_OC_EnablePreload+0xa4>)
 8000e44:	5cd3      	ldrb	r3, [r2, r3]
 8000e46:	440b      	add	r3, r1
 8000e48:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8000e4a:	68bb      	ldr	r3, [r7, #8]
 8000e4c:	681a      	ldr	r2, [r3, #0]
 8000e4e:	7bfb      	ldrb	r3, [r7, #15]
 8000e50:	4907      	ldr	r1, [pc, #28]	; (8000e70 <LL_TIM_OC_EnablePreload+0xa8>)
 8000e52:	5ccb      	ldrb	r3, [r1, r3]
 8000e54:	4619      	mov	r1, r3
 8000e56:	2308      	movs	r3, #8
 8000e58:	408b      	lsls	r3, r1
 8000e5a:	431a      	orrs	r2, r3
 8000e5c:	68bb      	ldr	r3, [r7, #8]
 8000e5e:	601a      	str	r2, [r3, #0]
}
 8000e60:	bf00      	nop
 8000e62:	3714      	adds	r7, #20
 8000e64:	46bd      	mov	sp, r7
 8000e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6a:	4770      	bx	lr
 8000e6c:	080038a0 	.word	0x080038a0
 8000e70:	080038ac 	.word	0x080038ac

08000e74 <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b083      	sub	sp, #12
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
 8000e7c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	683a      	ldr	r2, [r7, #0]
 8000e82:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000e84:	bf00      	nop
 8000e86:	370c      	adds	r7, #12
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr

08000e90 <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b083      	sub	sp, #12
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
 8000e98:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	689b      	ldr	r3, [r3, #8]
 8000e9e:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8000ea2:	f023 0307 	bic.w	r3, r3, #7
 8000ea6:	683a      	ldr	r2, [r7, #0]
 8000ea8:	431a      	orrs	r2, r3
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	609a      	str	r2, [r3, #8]
}
 8000eae:	bf00      	nop
 8000eb0:	370c      	adds	r7, #12
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr

08000eba <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC4REF
  *         @arg @ref LL_TIM_TRGO_ENCODERCLK
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8000eba:	b480      	push	{r7}
 8000ebc:	b083      	sub	sp, #12
 8000ebe:	af00      	add	r7, sp, #0
 8000ec0:	6078      	str	r0, [r7, #4]
 8000ec2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8000ecc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000ed0:	683a      	ldr	r2, [r7, #0]
 8000ed2:	431a      	orrs	r2, r3
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	605a      	str	r2, [r3, #4]
}
 8000ed8:	bf00      	nop
 8000eda:	370c      	adds	r7, #12
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr

08000ee4 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b083      	sub	sp, #12
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	689b      	ldr	r3, [r3, #8]
 8000ef0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	609a      	str	r2, [r3, #8]
}
 8000ef8:	bf00      	nop
 8000efa:	370c      	adds	r7, #12
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr

08000f04 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b083      	sub	sp, #12
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
 8000f0c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	683a      	ldr	r2, [r7, #0]
 8000f12:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f14:	bf00      	nop
 8000f16:	370c      	adds	r7, #12
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr

08000f20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f24:	f000 fcf9 	bl	800191a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f28:	f000 f81a 	bl	8000f60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f2c:	f000 fafe 	bl	800152c <MX_GPIO_Init>
  MX_TIM2_Init();
 8000f30:	f000 f960 	bl	80011f4 <MX_TIM2_Init>
  MX_DMA_Init();
 8000f34:	f000 fa5a 	bl	80013ec <MX_DMA_Init>
  MX_FMC_Init();
 8000f38:	f000 fa90 	bl	800145c <MX_FMC_Init>
  MX_ADC4_Init();
 8000f3c:	f000 f874 	bl	8001028 <MX_ADC4_Init>
  MX_TIM3_Init();
 8000f40:	f000 f990 	bl	8001264 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000f44:	f000 f9d8 	bl	80012f8 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  /* Disable SysTick timer. FMC can only be used with HAL, which creates the *
   * SysTick timer. Disabling it saves CPU cycles with no apperent impact on *
   * the execution of the code.                                              */
  SysTick->CTRL = 0;
 8000f48:	4b04      	ldr	r3, [pc, #16]	; (8000f5c <main+0x3c>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	601a      	str	r2, [r3, #0]

  LCD_init();
 8000f4e:	f002 fb4b 	bl	80035e8 <LCD_init>
  joystick_init();
 8000f52:	f002 fb42 	bl	80035da <joystick_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    app_main();
 8000f56:	f7ff f993 	bl	8000280 <app_main>
 8000f5a:	e7fc      	b.n	8000f56 <main+0x36>
 8000f5c:	e000e010 	.word	0xe000e010

08000f60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_4);
 8000f64:	2004      	movs	r0, #4
 8000f66:	f7ff fe71 	bl	8000c4c <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_4)
 8000f6a:	bf00      	nop
 8000f6c:	f7ff fe82 	bl	8000c74 <LL_FLASH_GetLatency>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b04      	cmp	r3, #4
 8000f74:	d1fa      	bne.n	8000f6c <SystemClock_Config+0xc>
  {
  }
  LL_PWR_EnableRange1BoostMode();
 8000f76:	f7ff fe8b 	bl	8000c90 <LL_PWR_EnableRange1BoostMode>
  LL_RCC_HSE_EnableBypass();
 8000f7a:	f7ff fd15 	bl	80009a8 <LL_RCC_HSE_EnableBypass>
  LL_RCC_HSE_Enable();
 8000f7e:	f7ff fd23 	bl	80009c8 <LL_RCC_HSE_Enable>
   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 8000f82:	bf00      	nop
 8000f84:	f7ff fd30 	bl	80009e8 <LL_RCC_HSE_IsReady>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b01      	cmp	r3, #1
 8000f8c:	d1fa      	bne.n	8000f84 <SystemClock_Config+0x24>
  {
  }

  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_2, 85, LL_RCC_PLLR_DIV_2);
 8000f8e:	2300      	movs	r3, #0
 8000f90:	2255      	movs	r2, #85	; 0x55
 8000f92:	2110      	movs	r1, #16
 8000f94:	2003      	movs	r0, #3
 8000f96:	f7ff fde1 	bl	8000b5c <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_EnableDomain_SYS();
 8000f9a:	f7ff fdff 	bl	8000b9c <LL_RCC_PLL_EnableDomain_SYS>
  LL_RCC_PLL_Enable();
 8000f9e:	f7ff fdb9 	bl	8000b14 <LL_RCC_PLL_Enable>
   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8000fa2:	bf00      	nop
 8000fa4:	f7ff fdc6 	bl	8000b34 <LL_RCC_PLL_IsReady>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b01      	cmp	r3, #1
 8000fac:	d1fa      	bne.n	8000fa4 <SystemClock_Config+0x44>
  {
  }

  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8000fae:	2003      	movs	r0, #3
 8000fb0:	f7ff fd2e 	bl	8000a10 <LL_RCC_SetSysClkSource>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_2);
 8000fb4:	2080      	movs	r0, #128	; 0x80
 8000fb6:	f7ff fd4d 	bl	8000a54 <LL_RCC_SetAHBPrescaler>
   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000fba:	bf00      	nop
 8000fbc:	f7ff fd3c 	bl	8000a38 <LL_RCC_GetSysClkSource>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b0c      	cmp	r3, #12
 8000fc4:	d1fa      	bne.n	8000fbc <SystemClock_Config+0x5c>
  {
  }

  /* Insure 1�s transition state at intermediate medium speed clock based on DWT */
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8000fc6:	4b15      	ldr	r3, [pc, #84]	; (800101c <SystemClock_Config+0xbc>)
 8000fc8:	68db      	ldr	r3, [r3, #12]
 8000fca:	4a14      	ldr	r2, [pc, #80]	; (800101c <SystemClock_Config+0xbc>)
 8000fcc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000fd0:	60d3      	str	r3, [r2, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8000fd2:	4b13      	ldr	r3, [pc, #76]	; (8001020 <SystemClock_Config+0xc0>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	4a12      	ldr	r2, [pc, #72]	; (8001020 <SystemClock_Config+0xc0>)
 8000fd8:	f043 0301 	orr.w	r3, r3, #1
 8000fdc:	6013      	str	r3, [r2, #0]
  DWT->CYCCNT = 0;
 8000fde:	4b10      	ldr	r3, [pc, #64]	; (8001020 <SystemClock_Config+0xc0>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	605a      	str	r2, [r3, #4]
  while(DWT->CYCCNT < 100);
 8000fe4:	bf00      	nop
 8000fe6:	4b0e      	ldr	r3, [pc, #56]	; (8001020 <SystemClock_Config+0xc0>)
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	2b63      	cmp	r3, #99	; 0x63
 8000fec:	d9fb      	bls.n	8000fe6 <SystemClock_Config+0x86>
  /* Set AHB prescaler*/
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000fee:	2000      	movs	r0, #0
 8000ff0:	f7ff fd30 	bl	8000a54 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_8);
 8000ff4:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 8000ff8:	f7ff fd40 	bl	8000a7c <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8000ffc:	2000      	movs	r0, #0
 8000ffe:	f7ff fd51 	bl	8000aa4 <LL_RCC_SetAPB2Prescaler>
  LL_SetSystemCoreClock(170000000);
 8001002:	4808      	ldr	r0, [pc, #32]	; (8001024 <SystemClock_Config+0xc4>)
 8001004:	f002 f846 	bl	8003094 <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 8001008:	200f      	movs	r0, #15
 800100a:	f000 fc9f 	bl	800194c <HAL_InitTick>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8001014:	f000 fb8c 	bl	8001730 <Error_Handler>
  }
}
 8001018:	bf00      	nop
 800101a:	bd80      	pop	{r7, pc}
 800101c:	e000edf0 	.word	0xe000edf0
 8001020:	e0001000 	.word	0xe0001000
 8001024:	0a21fe80 	.word	0x0a21fe80

08001028 <MX_ADC4_Init>:
  * @brief ADC4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC4_Init(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b096      	sub	sp, #88	; 0x58
 800102c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 800102e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001032:	2200      	movs	r2, #0
 8001034:	601a      	str	r2, [r3, #0]
 8001036:	605a      	str	r2, [r3, #4]
 8001038:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 800103a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800103e:	2200      	movs	r2, #0
 8001040:	601a      	str	r2, [r3, #0]
 8001042:	605a      	str	r2, [r3, #4]
 8001044:	609a      	str	r2, [r3, #8]
 8001046:	60da      	str	r2, [r3, #12]
 8001048:	611a      	str	r2, [r3, #16]
 800104a:	615a      	str	r2, [r3, #20]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 800104c:	f107 031c 	add.w	r3, r7, #28
 8001050:	2200      	movs	r2, #0
 8001052:	601a      	str	r2, [r3, #0]
 8001054:	605a      	str	r2, [r3, #4]
 8001056:	609a      	str	r2, [r3, #8]
 8001058:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800105a:	1d3b      	adds	r3, r7, #4
 800105c:	2200      	movs	r2, #0
 800105e:	601a      	str	r2, [r3, #0]
 8001060:	605a      	str	r2, [r3, #4]
 8001062:	609a      	str	r2, [r3, #8]
 8001064:	60da      	str	r2, [r3, #12]
 8001066:	611a      	str	r2, [r3, #16]
 8001068:	615a      	str	r2, [r3, #20]

  LL_RCC_SetADCClockSource(LL_RCC_ADC345_CLKSOURCE_SYSCLK);
 800106a:	4858      	ldr	r0, [pc, #352]	; (80011cc <MX_ADC4_Init+0x1a4>)
 800106c:	f7ff fd2e 	bl	8000acc <LL_RCC_SetADCClockSource>

  /* Peripheral clock enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_ADC345);
 8001070:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001074:	f7ff fdba 	bl	8000bec <LL_AHB2_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8001078:	2002      	movs	r0, #2
 800107a:	f7ff fdb7 	bl	8000bec <LL_AHB2_GRP1_EnableClock>
  /**ADC4 GPIO Configuration
  PB14   ------> ADC4_IN4
  PB15   ------> ADC4_IN5
  */
  GPIO_InitStruct.Pin = JOYSTICK_X_Pin;
 800107e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001082:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001084:	2303      	movs	r3, #3
 8001086:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001088:	2300      	movs	r3, #0
 800108a:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(JOYSTICK_X_GPIO_Port, &GPIO_InitStruct);
 800108c:	1d3b      	adds	r3, r7, #4
 800108e:	4619      	mov	r1, r3
 8001090:	484f      	ldr	r0, [pc, #316]	; (80011d0 <MX_ADC4_Init+0x1a8>)
 8001092:	f001 fb06 	bl	80026a2 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = JOYSTICK_Y_Pin;
 8001096:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800109a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800109c:	2303      	movs	r3, #3
 800109e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80010a0:	2300      	movs	r3, #0
 80010a2:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(JOYSTICK_Y_GPIO_Port, &GPIO_InitStruct);
 80010a4:	1d3b      	adds	r3, r7, #4
 80010a6:	4619      	mov	r1, r3
 80010a8:	4849      	ldr	r0, [pc, #292]	; (80011d0 <MX_ADC4_Init+0x1a8>)
 80010aa:	f001 fafa 	bl	80026a2 <LL_GPIO_Init>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 80010ae:	2300      	movs	r3, #0
 80010b0:	647b      	str	r3, [r7, #68]	; 0x44
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 80010b2:	2300      	movs	r3, #0
 80010b4:	64bb      	str	r3, [r7, #72]	; 0x48
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 80010b6:	2300      	movs	r3, #0
 80010b8:	64fb      	str	r3, [r7, #76]	; 0x4c
  LL_ADC_Init(ADC4, &ADC_InitStruct);
 80010ba:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80010be:	4619      	mov	r1, r3
 80010c0:	4844      	ldr	r0, [pc, #272]	; (80011d4 <MX_ADC4_Init+0x1ac>)
 80010c2:	f000 ffd7 	bl	8002074 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_EXT_TIM3_TRGO;
 80010c6:	f44f 6390 	mov.w	r3, #1152	; 0x480
 80010ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_ENABLE_2RANKS;
 80010cc:	2301      	movs	r3, #1
 80010ce:	633b      	str	r3, [r7, #48]	; 0x30
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 80010d0:	2300      	movs	r3, #0
 80010d2:	637b      	str	r3, [r7, #52]	; 0x34
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 80010d4:	2300      	movs	r3, #0
 80010d6:	63bb      	str	r3, [r7, #56]	; 0x38
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_NONE;
 80010d8:	2300      	movs	r3, #0
 80010da:	63fb      	str	r3, [r7, #60]	; 0x3c
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_PRESERVED;
 80010dc:	2300      	movs	r3, #0
 80010de:	643b      	str	r3, [r7, #64]	; 0x40
  LL_ADC_REG_Init(ADC4, &ADC_REG_InitStruct);
 80010e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010e4:	4619      	mov	r1, r3
 80010e6:	483b      	ldr	r0, [pc, #236]	; (80011d4 <MX_ADC4_Init+0x1ac>)
 80010e8:	f000 ffea 	bl	80020c0 <LL_ADC_REG_Init>
  LL_ADC_SetGainCompensation(ADC4, 0);
 80010ec:	2100      	movs	r1, #0
 80010ee:	4839      	ldr	r0, [pc, #228]	; (80011d4 <MX_ADC4_Init+0x1ac>)
 80010f0:	f7ff f9cd 	bl	800048e <LL_ADC_SetGainCompensation>
  LL_ADC_SetOverSamplingScope(ADC4, LL_ADC_OVS_DISABLE);
 80010f4:	2100      	movs	r1, #0
 80010f6:	4837      	ldr	r0, [pc, #220]	; (80011d4 <MX_ADC4_Init+0x1ac>)
 80010f8:	f7ff fa90 	bl	800061c <LL_ADC_SetOverSamplingScope>
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_SYNC_PCLK_DIV4;
 80010fc:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8001100:	61fb      	str	r3, [r7, #28]
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC4), &ADC_CommonInitStruct);
 8001102:	f107 031c 	add.w	r3, r7, #28
 8001106:	4619      	mov	r1, r3
 8001108:	4833      	ldr	r0, [pc, #204]	; (80011d8 <MX_ADC4_Init+0x1b0>)
 800110a:	f000 ff4f 	bl	8001fac <LL_ADC_CommonInit>
  LL_ADC_REG_SetTriggerEdge(ADC4, LL_ADC_REG_TRIG_EXT_RISING);
 800110e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001112:	4830      	ldr	r0, [pc, #192]	; (80011d4 <MX_ADC4_Init+0x1ac>)
 8001114:	f7ff f9f3 	bl	80004fe <LL_ADC_REG_SetTriggerEdge>

  /* Disable ADC deep power down (enabled by default after reset state) */
  LL_ADC_DisableDeepPowerDown(ADC4);
 8001118:	482e      	ldr	r0, [pc, #184]	; (80011d4 <MX_ADC4_Init+0x1ac>)
 800111a:	f7ff fa94 	bl	8000646 <LL_ADC_DisableDeepPowerDown>
  /* Enable ADC internal voltage regulator */
  LL_ADC_EnableInternalRegulator(ADC4);
 800111e:	482d      	ldr	r0, [pc, #180]	; (80011d4 <MX_ADC4_Init+0x1ac>)
 8001120:	f7ff faa3 	bl	800066a <LL_ADC_EnableInternalRegulator>
  /* Note: Variable divided by 2 to compensate partially */
  /* CPU processing cycles (depends on compilation optimization). */
  /* Note: If system core clock frequency is below 200kHz, wait time */
  /* is only a few CPU processing cycles. */
  uint32_t wait_loop_index;
  wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (100000 * 2))) / 10);
 8001124:	4b2d      	ldr	r3, [pc, #180]	; (80011dc <MX_ADC4_Init+0x1b4>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	099b      	lsrs	r3, r3, #6
 800112a:	4a2d      	ldr	r2, [pc, #180]	; (80011e0 <MX_ADC4_Init+0x1b8>)
 800112c:	fba2 2303 	umull	r2, r3, r2, r3
 8001130:	099a      	lsrs	r2, r3, #6
 8001132:	4613      	mov	r3, r2
 8001134:	009b      	lsls	r3, r3, #2
 8001136:	4413      	add	r3, r2
 8001138:	009b      	lsls	r3, r3, #2
 800113a:	461a      	mov	r2, r3
 800113c:	4b29      	ldr	r3, [pc, #164]	; (80011e4 <MX_ADC4_Init+0x1bc>)
 800113e:	fba3 2302 	umull	r2, r3, r3, r2
 8001142:	08db      	lsrs	r3, r3, #3
 8001144:	657b      	str	r3, [r7, #84]	; 0x54
  while(wait_loop_index != 0)
 8001146:	e002      	b.n	800114e <MX_ADC4_Init+0x126>
  {
    wait_loop_index--;
 8001148:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800114a:	3b01      	subs	r3, #1
 800114c:	657b      	str	r3, [r7, #84]	; 0x54
  while(wait_loop_index != 0)
 800114e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001150:	2b00      	cmp	r3, #0
 8001152:	d1f9      	bne.n	8001148 <MX_ADC4_Init+0x120>
  }

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC4, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_4);
 8001154:	4a24      	ldr	r2, [pc, #144]	; (80011e8 <MX_ADC4_Init+0x1c0>)
 8001156:	2106      	movs	r1, #6
 8001158:	481e      	ldr	r0, [pc, #120]	; (80011d4 <MX_ADC4_Init+0x1ac>)
 800115a:	f7ff f9e3 	bl	8000524 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC4, LL_ADC_CHANNEL_4, LL_ADC_SAMPLINGTIME_640CYCLES_5);
 800115e:	2207      	movs	r2, #7
 8001160:	4921      	ldr	r1, [pc, #132]	; (80011e8 <MX_ADC4_Init+0x1c0>)
 8001162:	481c      	ldr	r0, [pc, #112]	; (80011d4 <MX_ADC4_Init+0x1ac>)
 8001164:	f7ff fa0a 	bl	800057c <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC4, LL_ADC_CHANNEL_4, LL_ADC_SINGLE_ENDED);
 8001168:	227f      	movs	r2, #127	; 0x7f
 800116a:	491f      	ldr	r1, [pc, #124]	; (80011e8 <MX_ADC4_Init+0x1c0>)
 800116c:	4819      	ldr	r0, [pc, #100]	; (80011d4 <MX_ADC4_Init+0x1ac>)
 800116e:	f7ff fa31 	bl	80005d4 <LL_ADC_SetChannelSingleDiff>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC4, LL_ADC_REG_RANK_2, LL_ADC_CHANNEL_5);
 8001172:	4a1e      	ldr	r2, [pc, #120]	; (80011ec <MX_ADC4_Init+0x1c4>)
 8001174:	210c      	movs	r1, #12
 8001176:	4817      	ldr	r0, [pc, #92]	; (80011d4 <MX_ADC4_Init+0x1ac>)
 8001178:	f7ff f9d4 	bl	8000524 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC4, LL_ADC_CHANNEL_5, LL_ADC_SAMPLINGTIME_640CYCLES_5);
 800117c:	2207      	movs	r2, #7
 800117e:	491b      	ldr	r1, [pc, #108]	; (80011ec <MX_ADC4_Init+0x1c4>)
 8001180:	4814      	ldr	r0, [pc, #80]	; (80011d4 <MX_ADC4_Init+0x1ac>)
 8001182:	f7ff f9fb 	bl	800057c <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC4, LL_ADC_CHANNEL_5, LL_ADC_SINGLE_ENDED);
 8001186:	227f      	movs	r2, #127	; 0x7f
 8001188:	4918      	ldr	r1, [pc, #96]	; (80011ec <MX_ADC4_Init+0x1c4>)
 800118a:	4812      	ldr	r0, [pc, #72]	; (80011d4 <MX_ADC4_Init+0x1ac>)
 800118c:	f7ff fa22 	bl	80005d4 <LL_ADC_SetChannelSingleDiff>
  /* USER CODE BEGIN ADC4_Init 2 */
  LL_ADC_REG_SetTriggerSource(ADC4, LL_ADC_REG_TRIG_EXT_TIM3_TRGO);
 8001190:	f44f 6190 	mov.w	r1, #1152	; 0x480
 8001194:	480f      	ldr	r0, [pc, #60]	; (80011d4 <MX_ADC4_Init+0x1ac>)
 8001196:	f7ff f99f 	bl	80004d8 <LL_ADC_REG_SetTriggerSource>
  LL_ADC_REG_SetTriggerEdge(ADC4, LL_ADC_REG_TRIG_EXT_RISING);
 800119a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800119e:	480d      	ldr	r0, [pc, #52]	; (80011d4 <MX_ADC4_Init+0x1ac>)
 80011a0:	f7ff f9ad 	bl	80004fe <LL_ADC_REG_SetTriggerEdge>
  LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(ADC4), LL_ADC_PATH_INTERNAL_NONE);
 80011a4:	2100      	movs	r1, #0
 80011a6:	480c      	ldr	r0, [pc, #48]	; (80011d8 <MX_ADC4_Init+0x1b0>)
 80011a8:	f7ff f95e 	bl	8000468 <LL_ADC_SetCommonPathInternalCh>
  for(int i = 0; i < 10000000; i++);
 80011ac:	2300      	movs	r3, #0
 80011ae:	653b      	str	r3, [r7, #80]	; 0x50
 80011b0:	e002      	b.n	80011b8 <MX_ADC4_Init+0x190>
 80011b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80011b4:	3301      	adds	r3, #1
 80011b6:	653b      	str	r3, [r7, #80]	; 0x50
 80011b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80011ba:	4a0d      	ldr	r2, [pc, #52]	; (80011f0 <MX_ADC4_Init+0x1c8>)
 80011bc:	4293      	cmp	r3, r2
 80011be:	dbf8      	blt.n	80011b2 <MX_ADC4_Init+0x18a>
  /* USER CODE END ADC4_Init 2 */

}
 80011c0:	bf00      	nop
 80011c2:	bf00      	nop
 80011c4:	3758      	adds	r7, #88	; 0x58
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	001e0002 	.word	0x001e0002
 80011d0:	48000400 	.word	0x48000400
 80011d4:	50000500 	.word	0x50000500
 80011d8:	50000700 	.word	0x50000700
 80011dc:	20000000 	.word	0x20000000
 80011e0:	053e2d63 	.word	0x053e2d63
 80011e4:	cccccccd 	.word	0xcccccccd
 80011e8:	10c00010 	.word	0x10c00010
 80011ec:	14f00020 	.word	0x14f00020
 80011f0:	00989680 	.word	0x00989680

080011f4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b086      	sub	sp, #24
 80011f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80011fa:	1d3b      	adds	r3, r7, #4
 80011fc:	2200      	movs	r2, #0
 80011fe:	601a      	str	r2, [r3, #0]
 8001200:	605a      	str	r2, [r3, #4]
 8001202:	609a      	str	r2, [r3, #8]
 8001204:	60da      	str	r2, [r3, #12]
 8001206:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8001208:	2001      	movs	r0, #1
 800120a:	f7ff fd07 	bl	8000c1c <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = 42499;
 800120e:	f24a 6303 	movw	r3, #42499	; 0xa603
 8001212:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001214:	2300      	movs	r3, #0
 8001216:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 4.294967295E9;
 8001218:	f04f 33ff 	mov.w	r3, #4294967295
 800121c:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 800121e:	2300      	movs	r3, #0
 8001220:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8001222:	1d3b      	adds	r3, r7, #4
 8001224:	4619      	mov	r1, r3
 8001226:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800122a:	f001 fb39 	bl	80028a0 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 800122e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001232:	f7ff fd4f 	bl	8000cd4 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 8001236:	2100      	movs	r1, #0
 8001238:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800123c:	f7ff fe28 	bl	8000e90 <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 8001240:	2100      	movs	r1, #0
 8001242:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001246:	f7ff fe38 	bl	8000eba <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 800124a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800124e:	f7ff fe49 	bl	8000ee4 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */
  LL_TIM_EnableCounter(TIM2);
 8001252:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001256:	f7ff fd2d 	bl	8000cb4 <LL_TIM_EnableCounter>
  /* USER CODE END TIM2_Init 2 */

}
 800125a:	bf00      	nop
 800125c:	3718      	adds	r7, #24
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
	...

08001264 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b086      	sub	sp, #24
 8001268:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800126a:	1d3b      	adds	r3, r7, #4
 800126c:	2200      	movs	r2, #0
 800126e:	601a      	str	r2, [r3, #0]
 8001270:	605a      	str	r2, [r3, #4]
 8001272:	609a      	str	r2, [r3, #8]
 8001274:	60da      	str	r2, [r3, #12]
 8001276:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 8001278:	2002      	movs	r0, #2
 800127a:	f7ff fccf 	bl	8000c1c <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  TIM_InitStruct.Prescaler = 42499;
 800127e:	f24a 6303 	movw	r3, #42499	; 0xa603
 8001282:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001284:	2300      	movs	r3, #0
 8001286:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 99;
 8001288:	2363      	movs	r3, #99	; 0x63
 800128a:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 800128c:	2300      	movs	r3, #0
 800128e:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 8001290:	1d3b      	adds	r3, r7, #4
 8001292:	4619      	mov	r1, r3
 8001294:	4816      	ldr	r0, [pc, #88]	; (80012f0 <MX_TIM3_Init+0x8c>)
 8001296:	f001 fb03 	bl	80028a0 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM3);
 800129a:	4815      	ldr	r0, [pc, #84]	; (80012f0 <MX_TIM3_Init+0x8c>)
 800129c:	f7ff fd1a 	bl	8000cd4 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 80012a0:	2100      	movs	r1, #0
 80012a2:	4813      	ldr	r0, [pc, #76]	; (80012f0 <MX_TIM3_Init+0x8c>)
 80012a4:	f7ff fdf4 	bl	8000e90 <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_UPDATE);
 80012a8:	2120      	movs	r1, #32
 80012aa:	4811      	ldr	r0, [pc, #68]	; (80012f0 <MX_TIM3_Init+0x8c>)
 80012ac:	f7ff fe05 	bl	8000eba <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 80012b0:	480f      	ldr	r0, [pc, #60]	; (80012f0 <MX_TIM3_Init+0x8c>)
 80012b2:	f7ff fe17 	bl	8000ee4 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */
  LL_ADC_StartCalibration(ADC4, LL_ADC_SINGLE_ENDED);
 80012b6:	217f      	movs	r1, #127	; 0x7f
 80012b8:	480e      	ldr	r0, [pc, #56]	; (80012f4 <MX_TIM3_Init+0x90>)
 80012ba:	f7ff f9fe 	bl	80006ba <LL_ADC_StartCalibration>
  while (LL_ADC_IsCalibrationOnGoing(ADC4));
 80012be:	bf00      	nop
 80012c0:	480c      	ldr	r0, [pc, #48]	; (80012f4 <MX_TIM3_Init+0x90>)
 80012c2:	f7ff fa13 	bl	80006ec <LL_ADC_IsCalibrationOnGoing>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d1f9      	bne.n	80012c0 <MX_TIM3_Init+0x5c>
  LL_ADC_Enable(ADC4);
 80012cc:	4809      	ldr	r0, [pc, #36]	; (80012f4 <MX_TIM3_Init+0x90>)
 80012ce:	f7ff f9e0 	bl	8000692 <LL_ADC_Enable>
  while (LL_ADC_IsActiveFlag_ADRDY(ADC4) == 0);
 80012d2:	bf00      	nop
 80012d4:	4807      	ldr	r0, [pc, #28]	; (80012f4 <MX_TIM3_Init+0x90>)
 80012d6:	f7ff fa1d 	bl	8000714 <LL_ADC_IsActiveFlag_ADRDY>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d0f9      	beq.n	80012d4 <MX_TIM3_Init+0x70>
  LL_TIM_EnableCounter(TIM3);
 80012e0:	4803      	ldr	r0, [pc, #12]	; (80012f0 <MX_TIM3_Init+0x8c>)
 80012e2:	f7ff fce7 	bl	8000cb4 <LL_TIM_EnableCounter>
  /* USER CODE END TIM3_Init 2 */

}
 80012e6:	bf00      	nop
 80012e8:	3718      	adds	r7, #24
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	40000400 	.word	0x40000400
 80012f4:	50000500 	.word	0x50000500

080012f8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b094      	sub	sp, #80	; 0x50
 80012fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80012fe:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001302:	2200      	movs	r2, #0
 8001304:	601a      	str	r2, [r3, #0]
 8001306:	605a      	str	r2, [r3, #4]
 8001308:	609a      	str	r2, [r3, #8]
 800130a:	60da      	str	r2, [r3, #12]
 800130c:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 800130e:	f107 031c 	add.w	r3, r7, #28
 8001312:	2220      	movs	r2, #32
 8001314:	2100      	movs	r1, #0
 8001316:	4618      	mov	r0, r3
 8001318:	f002 faaa 	bl	8003870 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800131c:	1d3b      	adds	r3, r7, #4
 800131e:	2200      	movs	r2, #0
 8001320:	601a      	str	r2, [r3, #0]
 8001322:	605a      	str	r2, [r3, #4]
 8001324:	609a      	str	r2, [r3, #8]
 8001326:	60da      	str	r2, [r3, #12]
 8001328:	611a      	str	r2, [r3, #16]
 800132a:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM4);
 800132c:	2004      	movs	r0, #4
 800132e:	f7ff fc75 	bl	8000c1c <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  TIM_InitStruct.Prescaler = 9;
 8001332:	2309      	movs	r3, #9
 8001334:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001336:	2300      	movs	r3, #0
 8001338:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.Autoreload = 99;
 800133a:	2363      	movs	r3, #99	; 0x63
 800133c:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 800133e:	2300      	movs	r3, #0
 8001340:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_Init(TIM4, &TIM_InitStruct);
 8001342:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001346:	4619      	mov	r1, r3
 8001348:	4826      	ldr	r0, [pc, #152]	; (80013e4 <MX_TIM4_Init+0xec>)
 800134a:	f001 faa9 	bl	80028a0 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM4);
 800134e:	4825      	ldr	r0, [pc, #148]	; (80013e4 <MX_TIM4_Init+0xec>)
 8001350:	f7ff fcc0 	bl	8000cd4 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM4, LL_TIM_CLOCKSOURCE_INTERNAL);
 8001354:	2100      	movs	r1, #0
 8001356:	4823      	ldr	r0, [pc, #140]	; (80013e4 <MX_TIM4_Init+0xec>)
 8001358:	f7ff fd9a 	bl	8000e90 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM4, LL_TIM_CHANNEL_CH1);
 800135c:	2101      	movs	r1, #1
 800135e:	4821      	ldr	r0, [pc, #132]	; (80013e4 <MX_TIM4_Init+0xec>)
 8001360:	f7ff fd32 	bl	8000dc8 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8001364:	2360      	movs	r3, #96	; 0x60
 8001366:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8001368:	2300      	movs	r3, #0
 800136a:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 800136c:	2300      	movs	r3, #0
 800136e:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.CompareValue = 0;
 8001370:	2300      	movs	r3, #0
 8001372:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8001374:	2300      	movs	r3, #0
 8001376:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_OC_Init(TIM4, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8001378:	f107 031c 	add.w	r3, r7, #28
 800137c:	461a      	mov	r2, r3
 800137e:	2101      	movs	r1, #1
 8001380:	4818      	ldr	r0, [pc, #96]	; (80013e4 <MX_TIM4_Init+0xec>)
 8001382:	f001 fb2f 	bl	80029e4 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM4, LL_TIM_CHANNEL_CH1);
 8001386:	2101      	movs	r1, #1
 8001388:	4816      	ldr	r0, [pc, #88]	; (80013e4 <MX_TIM4_Init+0xec>)
 800138a:	f7ff fcc5 	bl	8000d18 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM4, LL_TIM_TRGO_RESET);
 800138e:	2100      	movs	r1, #0
 8001390:	4814      	ldr	r0, [pc, #80]	; (80013e4 <MX_TIM4_Init+0xec>)
 8001392:	f7ff fd92 	bl	8000eba <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM4);
 8001396:	4813      	ldr	r0, [pc, #76]	; (80013e4 <MX_TIM4_Init+0xec>)
 8001398:	f7ff fda4 	bl	8000ee4 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM4_Init 2 */
  LL_TIM_OC_SetCompareCH1(TIM4, 0);
 800139c:	2100      	movs	r1, #0
 800139e:	4811      	ldr	r0, [pc, #68]	; (80013e4 <MX_TIM4_Init+0xec>)
 80013a0:	f7ff fd68 	bl	8000e74 <LL_TIM_OC_SetCompareCH1>
  LL_TIM_CC_EnableChannel(TIM4, LL_TIM_CHANNEL_CH1);
 80013a4:	2101      	movs	r1, #1
 80013a6:	480f      	ldr	r0, [pc, #60]	; (80013e4 <MX_TIM4_Init+0xec>)
 80013a8:	f7ff fca4 	bl	8000cf4 <LL_TIM_CC_EnableChannel>
  LL_TIM_EnableCounter(TIM4);
 80013ac:	480d      	ldr	r0, [pc, #52]	; (80013e4 <MX_TIM4_Init+0xec>)
 80013ae:	f7ff fc81 	bl	8000cb4 <LL_TIM_EnableCounter>
  /* USER CODE END TIM4_Init 2 */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 80013b2:	2002      	movs	r0, #2
 80013b4:	f7ff fc1a 	bl	8000bec <LL_AHB2_GRP1_EnableClock>
  /**TIM4 GPIO Configuration
  PB6   ------> TIM4_CH1
  */
  GPIO_InitStruct.Pin = BACKLIGHT_Pin;
 80013b8:	2340      	movs	r3, #64	; 0x40
 80013ba:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80013bc:	2302      	movs	r3, #2
 80013be:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80013c0:	2300      	movs	r3, #0
 80013c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80013c4:	2300      	movs	r3, #0
 80013c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80013c8:	2300      	movs	r3, #0
 80013ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 80013cc:	2302      	movs	r3, #2
 80013ce:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(BACKLIGHT_GPIO_Port, &GPIO_InitStruct);
 80013d0:	1d3b      	adds	r3, r7, #4
 80013d2:	4619      	mov	r1, r3
 80013d4:	4804      	ldr	r0, [pc, #16]	; (80013e8 <MX_TIM4_Init+0xf0>)
 80013d6:	f001 f964 	bl	80026a2 <LL_GPIO_Init>

}
 80013da:	bf00      	nop
 80013dc:	3750      	adds	r7, #80	; 0x50
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	40000800 	.word	0x40000800
 80013e8:	48000400 	.word	0x48000400

080013ec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMAMUX1);
 80013f0:	2004      	movs	r0, #4
 80013f2:	f7ff fbe3 	bl	8000bbc <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 80013f6:	2001      	movs	r0, #1
 80013f8:	f7ff fbe0 	bl	8000bbc <LL_AHB1_GRP1_EnableClock>

  /* Configure DMA request MEMTOMEM_DMA1_Channel1 */

  /* Set request number */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_1, LL_DMAMUX_REQ_MEM2MEM);
 80013fc:	2200      	movs	r2, #0
 80013fe:	2100      	movs	r1, #0
 8001400:	4815      	ldr	r0, [pc, #84]	; (8001458 <MX_DMA_Init+0x6c>)
 8001402:	f7ff faa7 	bl	8000954 <LL_DMA_SetPeriphRequest>

  /* Set transfer direction */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_1, LL_DMA_DIRECTION_MEMORY_TO_MEMORY);
 8001406:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800140a:	2100      	movs	r1, #0
 800140c:	4812      	ldr	r0, [pc, #72]	; (8001458 <MX_DMA_Init+0x6c>)
 800140e:	f7ff f995 	bl	800073c <LL_DMA_SetDataTransferDirection>

  /* Set priority level */
  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PRIORITY_MEDIUM);
 8001412:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001416:	2100      	movs	r1, #0
 8001418:	480f      	ldr	r0, [pc, #60]	; (8001458 <MX_DMA_Init+0x6c>)
 800141a:	f7ff fa75 	bl	8000908 <LL_DMA_SetChannelPriorityLevel>

  /* Set DMA mode */
  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MODE_NORMAL);
 800141e:	2200      	movs	r2, #0
 8001420:	2100      	movs	r1, #0
 8001422:	480d      	ldr	r0, [pc, #52]	; (8001458 <MX_DMA_Init+0x6c>)
 8001424:	f7ff f9b2 	bl	800078c <LL_DMA_SetMode>

  /* Set peripheral increment mode */
  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PERIPH_INCREMENT);
 8001428:	2240      	movs	r2, #64	; 0x40
 800142a:	2100      	movs	r1, #0
 800142c:	480a      	ldr	r0, [pc, #40]	; (8001458 <MX_DMA_Init+0x6c>)
 800142e:	f7ff f9d3 	bl	80007d8 <LL_DMA_SetPeriphIncMode>

  /* Set memory increment mode */
  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MEMORY_NOINCREMENT);
 8001432:	2200      	movs	r2, #0
 8001434:	2100      	movs	r1, #0
 8001436:	4808      	ldr	r0, [pc, #32]	; (8001458 <MX_DMA_Init+0x6c>)
 8001438:	f7ff f9f4 	bl	8000824 <LL_DMA_SetMemoryIncMode>

  /* Set peripheral data width */
  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PDATAALIGN_HALFWORD);
 800143c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001440:	2100      	movs	r1, #0
 8001442:	4805      	ldr	r0, [pc, #20]	; (8001458 <MX_DMA_Init+0x6c>)
 8001444:	f7ff fa14 	bl	8000870 <LL_DMA_SetPeriphSize>

  /* Set memory data width */
  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MDATAALIGN_HALFWORD);
 8001448:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800144c:	2100      	movs	r1, #0
 800144e:	4802      	ldr	r0, [pc, #8]	; (8001458 <MX_DMA_Init+0x6c>)
 8001450:	f7ff fa34 	bl	80008bc <LL_DMA_SetMemorySize>

}
 8001454:	bf00      	nop
 8001456:	bd80      	pop	{r7, pc}
 8001458:	40020000 	.word	0x40020000

0800145c <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b088      	sub	sp, #32
 8001460:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 8001462:	463b      	mov	r3, r7
 8001464:	2220      	movs	r2, #32
 8001466:	2100      	movs	r1, #0
 8001468:	4618      	mov	r0, r3
 800146a:	f002 fa01 	bl	8003870 <memset>

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 800146e:	4b2d      	ldr	r3, [pc, #180]	; (8001524 <MX_FMC_Init+0xc8>)
 8001470:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8001474:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8001476:	4b2b      	ldr	r3, [pc, #172]	; (8001524 <MX_FMC_Init+0xc8>)
 8001478:	4a2b      	ldr	r2, [pc, #172]	; (8001528 <MX_FMC_Init+0xcc>)
 800147a:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 800147c:	4b29      	ldr	r3, [pc, #164]	; (8001524 <MX_FMC_Init+0xc8>)
 800147e:	2200      	movs	r2, #0
 8001480:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8001482:	4b28      	ldr	r3, [pc, #160]	; (8001524 <MX_FMC_Init+0xc8>)
 8001484:	2200      	movs	r2, #0
 8001486:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 8001488:	4b26      	ldr	r3, [pc, #152]	; (8001524 <MX_FMC_Init+0xc8>)
 800148a:	2200      	movs	r2, #0
 800148c:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 800148e:	4b25      	ldr	r3, [pc, #148]	; (8001524 <MX_FMC_Init+0xc8>)
 8001490:	2210      	movs	r2, #16
 8001492:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8001494:	4b23      	ldr	r3, [pc, #140]	; (8001524 <MX_FMC_Init+0xc8>)
 8001496:	2200      	movs	r2, #0
 8001498:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 800149a:	4b22      	ldr	r3, [pc, #136]	; (8001524 <MX_FMC_Init+0xc8>)
 800149c:	2200      	movs	r2, #0
 800149e:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 80014a0:	4b20      	ldr	r3, [pc, #128]	; (8001524 <MX_FMC_Init+0xc8>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 80014a6:	4b1f      	ldr	r3, [pc, #124]	; (8001524 <MX_FMC_Init+0xc8>)
 80014a8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80014ac:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 80014ae:	4b1d      	ldr	r3, [pc, #116]	; (8001524 <MX_FMC_Init+0xc8>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 80014b4:	4b1b      	ldr	r3, [pc, #108]	; (8001524 <MX_FMC_Init+0xc8>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 80014ba:	4b1a      	ldr	r3, [pc, #104]	; (8001524 <MX_FMC_Init+0xc8>)
 80014bc:	2200      	movs	r2, #0
 80014be:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 80014c0:	4b18      	ldr	r3, [pc, #96]	; (8001524 <MX_FMC_Init+0xc8>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 80014c6:	4b17      	ldr	r3, [pc, #92]	; (8001524 <MX_FMC_Init+0xc8>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 80014cc:	4b15      	ldr	r3, [pc, #84]	; (8001524 <MX_FMC_Init+0xc8>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.NBLSetupTime = 0;
 80014d2:	4b14      	ldr	r3, [pc, #80]	; (8001524 <MX_FMC_Init+0xc8>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	645a      	str	r2, [r3, #68]	; 0x44
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 80014d8:	4b12      	ldr	r3, [pc, #72]	; (8001524 <MX_FMC_Init+0xc8>)
 80014da:	2200      	movs	r2, #0
 80014dc:	641a      	str	r2, [r3, #64]	; 0x40
  hsram1.Init.MaxChipSelectPulse = DISABLE;
 80014de:	4b11      	ldr	r3, [pc, #68]	; (8001524 <MX_FMC_Init+0xc8>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  /* Timing */
  Timing.AddressSetupTime = 0;
 80014e6:	2300      	movs	r3, #0
 80014e8:	603b      	str	r3, [r7, #0]
  Timing.AddressHoldTime = 15;
 80014ea:	230f      	movs	r3, #15
 80014ec:	607b      	str	r3, [r7, #4]
  Timing.DataSetupTime = 1;
 80014ee:	2301      	movs	r3, #1
 80014f0:	60bb      	str	r3, [r7, #8]
  Timing.DataHoldTime = 0;
 80014f2:	2300      	movs	r3, #0
 80014f4:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 0;
 80014f6:	2300      	movs	r3, #0
 80014f8:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 80014fa:	2310      	movs	r3, #16
 80014fc:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 80014fe:	2311      	movs	r3, #17
 8001500:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 8001502:	2300      	movs	r3, #0
 8001504:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8001506:	463b      	mov	r3, r7
 8001508:	2200      	movs	r2, #0
 800150a:	4619      	mov	r1, r3
 800150c:	4805      	ldr	r0, [pc, #20]	; (8001524 <MX_FMC_Init+0xc8>)
 800150e:	f000 fcdf 	bl	8001ed0 <HAL_SRAM_Init>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d001      	beq.n	800151c <MX_FMC_Init+0xc0>
  {
    Error_Handler( );
 8001518:	f000 f90a 	bl	8001730 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 800151c:	bf00      	nop
 800151e:	3720      	adds	r7, #32
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}
 8001524:	20000030 	.word	0x20000030
 8001528:	a0000104 	.word	0xa0000104

0800152c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b086      	sub	sp, #24
 8001530:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001532:	463b      	mov	r3, r7
 8001534:	2200      	movs	r2, #0
 8001536:	601a      	str	r2, [r3, #0]
 8001538:	605a      	str	r2, [r3, #4]
 800153a:	609a      	str	r2, [r3, #8]
 800153c:	60da      	str	r2, [r3, #12]
 800153e:	611a      	str	r2, [r3, #16]
 8001540:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOF);
 8001542:	2020      	movs	r0, #32
 8001544:	f7ff fb52 	bl	8000bec <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8001548:	2004      	movs	r0, #4
 800154a:	f7ff fb4f 	bl	8000bec <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOE);
 800154e:	2010      	movs	r0, #16
 8001550:	f7ff fb4c 	bl	8000bec <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8001554:	2002      	movs	r0, #2
 8001556:	f7ff fb49 	bl	8000bec <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOD);
 800155a:	2008      	movs	r0, #8
 800155c:	f7ff fb46 	bl	8000bec <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOG);
 8001560:	2040      	movs	r0, #64	; 0x40
 8001562:	f7ff fb43 	bl	8000bec <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(LED1_GPIO_Port, LED1_Pin);
 8001566:	2108      	movs	r1, #8
 8001568:	486d      	ldr	r0, [pc, #436]	; (8001720 <MX_GPIO_Init+0x1f4>)
 800156a:	f7ff fccb 	bl	8000f04 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LED2_GPIO_Port, LED2_Pin);
 800156e:	2110      	movs	r1, #16
 8001570:	486b      	ldr	r0, [pc, #428]	; (8001720 <MX_GPIO_Init+0x1f4>)
 8001572:	f7ff fcc7 	bl	8000f04 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LED3_GPIO_Port, LED3_Pin);
 8001576:	2120      	movs	r1, #32
 8001578:	4869      	ldr	r0, [pc, #420]	; (8001720 <MX_GPIO_Init+0x1f4>)
 800157a:	f7ff fcc3 	bl	8000f04 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LED4_GPIO_Port, LED4_Pin);
 800157e:	2101      	movs	r1, #1
 8001580:	4868      	ldr	r0, [pc, #416]	; (8001724 <MX_GPIO_Init+0x1f8>)
 8001582:	f7ff fcbf 	bl	8000f04 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LED5_GPIO_Port, LED5_Pin);
 8001586:	2102      	movs	r1, #2
 8001588:	4866      	ldr	r0, [pc, #408]	; (8001724 <MX_GPIO_Init+0x1f8>)
 800158a:	f7ff fcbb 	bl	8000f04 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LED6_GPIO_Port, LED6_Pin);
 800158e:	2104      	movs	r1, #4
 8001590:	4864      	ldr	r0, [pc, #400]	; (8001724 <MX_GPIO_Init+0x1f8>)
 8001592:	f7ff fcb7 	bl	8000f04 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LED7_GPIO_Port, LED7_Pin);
 8001596:	2108      	movs	r1, #8
 8001598:	4862      	ldr	r0, [pc, #392]	; (8001724 <MX_GPIO_Init+0x1f8>)
 800159a:	f7ff fcb3 	bl	8000f04 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LED0_GPIO_Port, LED0_Pin);
 800159e:	2104      	movs	r1, #4
 80015a0:	485f      	ldr	r0, [pc, #380]	; (8001720 <MX_GPIO_Init+0x1f4>)
 80015a2:	f7ff fcaf 	bl	8000f04 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LCD_RESET_GPIO_Port, LCD_RESET_Pin);
 80015a6:	2108      	movs	r1, #8
 80015a8:	485f      	ldr	r0, [pc, #380]	; (8001728 <MX_GPIO_Init+0x1fc>)
 80015aa:	f7ff fcab 	bl	8000f04 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LED1_Pin;
 80015ae:	2308      	movs	r3, #8
 80015b0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80015b2:	2301      	movs	r3, #1
 80015b4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80015b6:	2300      	movs	r3, #0
 80015b8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80015ba:	2300      	movs	r3, #0
 80015bc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80015be:	2300      	movs	r3, #0
 80015c0:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 80015c2:	463b      	mov	r3, r7
 80015c4:	4619      	mov	r1, r3
 80015c6:	4856      	ldr	r0, [pc, #344]	; (8001720 <MX_GPIO_Init+0x1f4>)
 80015c8:	f001 f86b 	bl	80026a2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED2_Pin;
 80015cc:	2310      	movs	r3, #16
 80015ce:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80015d0:	2301      	movs	r3, #1
 80015d2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80015d4:	2300      	movs	r3, #0
 80015d6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80015d8:	2300      	movs	r3, #0
 80015da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80015dc:	2300      	movs	r3, #0
 80015de:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 80015e0:	463b      	mov	r3, r7
 80015e2:	4619      	mov	r1, r3
 80015e4:	484e      	ldr	r0, [pc, #312]	; (8001720 <MX_GPIO_Init+0x1f4>)
 80015e6:	f001 f85c 	bl	80026a2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED3_Pin;
 80015ea:	2320      	movs	r3, #32
 80015ec:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80015ee:	2301      	movs	r3, #1
 80015f0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80015f2:	2300      	movs	r3, #0
 80015f4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80015f6:	2300      	movs	r3, #0
 80015f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80015fa:	2300      	movs	r3, #0
 80015fc:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LED3_GPIO_Port, &GPIO_InitStruct);
 80015fe:	463b      	mov	r3, r7
 8001600:	4619      	mov	r1, r3
 8001602:	4847      	ldr	r0, [pc, #284]	; (8001720 <MX_GPIO_Init+0x1f4>)
 8001604:	f001 f84d 	bl	80026a2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED4_Pin;
 8001608:	2301      	movs	r3, #1
 800160a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800160c:	2301      	movs	r3, #1
 800160e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001610:	2300      	movs	r3, #0
 8001612:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001614:	2300      	movs	r3, #0
 8001616:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001618:	2300      	movs	r3, #0
 800161a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LED4_GPIO_Port, &GPIO_InitStruct);
 800161c:	463b      	mov	r3, r7
 800161e:	4619      	mov	r1, r3
 8001620:	4840      	ldr	r0, [pc, #256]	; (8001724 <MX_GPIO_Init+0x1f8>)
 8001622:	f001 f83e 	bl	80026a2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED5_Pin;
 8001626:	2302      	movs	r3, #2
 8001628:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800162a:	2301      	movs	r3, #1
 800162c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800162e:	2300      	movs	r3, #0
 8001630:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001632:	2300      	movs	r3, #0
 8001634:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001636:	2300      	movs	r3, #0
 8001638:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LED5_GPIO_Port, &GPIO_InitStruct);
 800163a:	463b      	mov	r3, r7
 800163c:	4619      	mov	r1, r3
 800163e:	4839      	ldr	r0, [pc, #228]	; (8001724 <MX_GPIO_Init+0x1f8>)
 8001640:	f001 f82f 	bl	80026a2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED6_Pin;
 8001644:	2304      	movs	r3, #4
 8001646:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001648:	2301      	movs	r3, #1
 800164a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800164c:	2300      	movs	r3, #0
 800164e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001650:	2300      	movs	r3, #0
 8001652:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001654:	2300      	movs	r3, #0
 8001656:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LED6_GPIO_Port, &GPIO_InitStruct);
 8001658:	463b      	mov	r3, r7
 800165a:	4619      	mov	r1, r3
 800165c:	4831      	ldr	r0, [pc, #196]	; (8001724 <MX_GPIO_Init+0x1f8>)
 800165e:	f001 f820 	bl	80026a2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED7_Pin;
 8001662:	2308      	movs	r3, #8
 8001664:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001666:	2301      	movs	r3, #1
 8001668:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800166a:	2300      	movs	r3, #0
 800166c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800166e:	2300      	movs	r3, #0
 8001670:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001672:	2300      	movs	r3, #0
 8001674:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LED7_GPIO_Port, &GPIO_InitStruct);
 8001676:	463b      	mov	r3, r7
 8001678:	4619      	mov	r1, r3
 800167a:	482a      	ldr	r0, [pc, #168]	; (8001724 <MX_GPIO_Init+0x1f8>)
 800167c:	f001 f811 	bl	80026a2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED0_Pin;
 8001680:	2304      	movs	r3, #4
 8001682:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001684:	2301      	movs	r3, #1
 8001686:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001688:	2300      	movs	r3, #0
 800168a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800168c:	2300      	movs	r3, #0
 800168e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001690:	2300      	movs	r3, #0
 8001692:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 8001694:	463b      	mov	r3, r7
 8001696:	4619      	mov	r1, r3
 8001698:	4821      	ldr	r0, [pc, #132]	; (8001720 <MX_GPIO_Init+0x1f4>)
 800169a:	f001 f802 	bl	80026a2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = BTN_UP_Pin;
 800169e:	2301      	movs	r3, #1
 80016a0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80016a2:	2300      	movs	r3, #0
 80016a4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80016a6:	2301      	movs	r3, #1
 80016a8:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(BTN_UP_GPIO_Port, &GPIO_InitStruct);
 80016aa:	463b      	mov	r3, r7
 80016ac:	4619      	mov	r1, r3
 80016ae:	481f      	ldr	r0, [pc, #124]	; (800172c <MX_GPIO_Init+0x200>)
 80016b0:	f000 fff7 	bl	80026a2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = BTN_DOWN_Pin;
 80016b4:	2302      	movs	r3, #2
 80016b6:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80016b8:	2300      	movs	r3, #0
 80016ba:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80016bc:	2301      	movs	r3, #1
 80016be:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(BTN_DOWN_GPIO_Port, &GPIO_InitStruct);
 80016c0:	463b      	mov	r3, r7
 80016c2:	4619      	mov	r1, r3
 80016c4:	4819      	ldr	r0, [pc, #100]	; (800172c <MX_GPIO_Init+0x200>)
 80016c6:	f000 ffec 	bl	80026a2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = BTN_LEFT_Pin;
 80016ca:	2340      	movs	r3, #64	; 0x40
 80016cc:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80016ce:	2300      	movs	r3, #0
 80016d0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80016d2:	2301      	movs	r3, #1
 80016d4:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(BTN_LEFT_GPIO_Port, &GPIO_InitStruct);
 80016d6:	463b      	mov	r3, r7
 80016d8:	4619      	mov	r1, r3
 80016da:	4814      	ldr	r0, [pc, #80]	; (800172c <MX_GPIO_Init+0x200>)
 80016dc:	f000 ffe1 	bl	80026a2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = BTN_RIGHT_Pin;
 80016e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016e4:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80016e6:	2300      	movs	r3, #0
 80016e8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80016ea:	2301      	movs	r3, #1
 80016ec:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(BTN_RIGHT_GPIO_Port, &GPIO_InitStruct);
 80016ee:	463b      	mov	r3, r7
 80016f0:	4619      	mov	r1, r3
 80016f2:	480e      	ldr	r0, [pc, #56]	; (800172c <MX_GPIO_Init+0x200>)
 80016f4:	f000 ffd5 	bl	80026a2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LCD_RESET_Pin;
 80016f8:	2308      	movs	r3, #8
 80016fa:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80016fc:	2301      	movs	r3, #1
 80016fe:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001700:	2300      	movs	r3, #0
 8001702:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001704:	2300      	movs	r3, #0
 8001706:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001708:	2300      	movs	r3, #0
 800170a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LCD_RESET_GPIO_Port, &GPIO_InitStruct);
 800170c:	463b      	mov	r3, r7
 800170e:	4619      	mov	r1, r3
 8001710:	4805      	ldr	r0, [pc, #20]	; (8001728 <MX_GPIO_Init+0x1fc>)
 8001712:	f000 ffc6 	bl	80026a2 <LL_GPIO_Init>

}
 8001716:	bf00      	nop
 8001718:	3718      	adds	r7, #24
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	48001400 	.word	0x48001400
 8001724:	48000800 	.word	0x48000800
 8001728:	48000c00 	.word	0x48000c00
 800172c:	48001800 	.word	0x48001800

08001730 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001734:	b672      	cpsid	i
}
 8001736:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001738:	e7fe      	b.n	8001738 <Error_Handler+0x8>
	...

0800173c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001742:	4b0f      	ldr	r3, [pc, #60]	; (8001780 <HAL_MspInit+0x44>)
 8001744:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001746:	4a0e      	ldr	r2, [pc, #56]	; (8001780 <HAL_MspInit+0x44>)
 8001748:	f043 0301 	orr.w	r3, r3, #1
 800174c:	6613      	str	r3, [r2, #96]	; 0x60
 800174e:	4b0c      	ldr	r3, [pc, #48]	; (8001780 <HAL_MspInit+0x44>)
 8001750:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001752:	f003 0301 	and.w	r3, r3, #1
 8001756:	607b      	str	r3, [r7, #4]
 8001758:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800175a:	4b09      	ldr	r3, [pc, #36]	; (8001780 <HAL_MspInit+0x44>)
 800175c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800175e:	4a08      	ldr	r2, [pc, #32]	; (8001780 <HAL_MspInit+0x44>)
 8001760:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001764:	6593      	str	r3, [r2, #88]	; 0x58
 8001766:	4b06      	ldr	r3, [pc, #24]	; (8001780 <HAL_MspInit+0x44>)
 8001768:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800176a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800176e:	603b      	str	r3, [r7, #0]
 8001770:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001772:	f000 fb9d 	bl	8001eb0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001776:	bf00      	nop
 8001778:	3708      	adds	r7, #8
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	40021000 	.word	0x40021000

08001784 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001784:	b580      	push	{r7, lr}
 8001786:	b086      	sub	sp, #24
 8001788:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800178a:	1d3b      	adds	r3, r7, #4
 800178c:	2200      	movs	r2, #0
 800178e:	601a      	str	r2, [r3, #0]
 8001790:	605a      	str	r2, [r3, #4]
 8001792:	609a      	str	r2, [r3, #8]
 8001794:	60da      	str	r2, [r3, #12]
 8001796:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001798:	4b23      	ldr	r3, [pc, #140]	; (8001828 <HAL_FMC_MspInit+0xa4>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d13e      	bne.n	800181e <HAL_FMC_MspInit+0x9a>
    return;
  }
  FMC_Initialized = 1;
 80017a0:	4b21      	ldr	r3, [pc, #132]	; (8001828 <HAL_FMC_MspInit+0xa4>)
 80017a2:	2201      	movs	r2, #1
 80017a4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80017a6:	4b21      	ldr	r3, [pc, #132]	; (800182c <HAL_FMC_MspInit+0xa8>)
 80017a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017aa:	4a20      	ldr	r2, [pc, #128]	; (800182c <HAL_FMC_MspInit+0xa8>)
 80017ac:	f043 0301 	orr.w	r3, r3, #1
 80017b0:	6513      	str	r3, [r2, #80]	; 0x50
 80017b2:	4b1e      	ldr	r3, [pc, #120]	; (800182c <HAL_FMC_MspInit+0xa8>)
 80017b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017b6:	f003 0301 	and.w	r3, r3, #1
 80017ba:	603b      	str	r3, [r7, #0]
 80017bc:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FMC_D3
  PD4   ------> FMC_NOE
  PD5   ------> FMC_NWE
  PD7   ------> FMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80017be:	f64f 7380 	movw	r3, #65408	; 0xff80
 80017c2:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c4:	2302      	movs	r3, #2
 80017c6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c8:	2300      	movs	r3, #0
 80017ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017cc:	2303      	movs	r3, #3
 80017ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80017d0:	230c      	movs	r3, #12
 80017d2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80017d4:	1d3b      	adds	r3, r7, #4
 80017d6:	4619      	mov	r1, r3
 80017d8:	4815      	ldr	r0, [pc, #84]	; (8001830 <HAL_FMC_MspInit+0xac>)
 80017da:	f000 f9e7 	bl	8001bac <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 80017de:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 80017e2:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e4:	2302      	movs	r3, #2
 80017e6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e8:	2300      	movs	r3, #0
 80017ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017ec:	2303      	movs	r3, #3
 80017ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80017f0:	230c      	movs	r3, #12
 80017f2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017f4:	1d3b      	adds	r3, r7, #4
 80017f6:	4619      	mov	r1, r3
 80017f8:	480e      	ldr	r0, [pc, #56]	; (8001834 <HAL_FMC_MspInit+0xb0>)
 80017fa:	f000 f9d7 	bl	8001bac <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80017fe:	2320      	movs	r3, #32
 8001800:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001802:	2302      	movs	r3, #2
 8001804:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001806:	2300      	movs	r3, #0
 8001808:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800180a:	2303      	movs	r3, #3
 800180c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800180e:	230c      	movs	r3, #12
 8001810:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001812:	1d3b      	adds	r3, r7, #4
 8001814:	4619      	mov	r1, r3
 8001816:	4808      	ldr	r0, [pc, #32]	; (8001838 <HAL_FMC_MspInit+0xb4>)
 8001818:	f000 f9c8 	bl	8001bac <HAL_GPIO_Init>
 800181c:	e000      	b.n	8001820 <HAL_FMC_MspInit+0x9c>
    return;
 800181e:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001820:	3718      	adds	r7, #24
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	20000088 	.word	0x20000088
 800182c:	40021000 	.word	0x40021000
 8001830:	48001000 	.word	0x48001000
 8001834:	48000c00 	.word	0x48000c00
 8001838:	48001800 	.word	0x48001800

0800183c <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001844:	f7ff ff9e 	bl	8001784 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001848:	bf00      	nop
 800184a:	3708      	adds	r7, #8
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}

08001850 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001854:	e7fe      	b.n	8001854 <NMI_Handler+0x4>

08001856 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001856:	b480      	push	{r7}
 8001858:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800185a:	e7fe      	b.n	800185a <HardFault_Handler+0x4>

0800185c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001860:	e7fe      	b.n	8001860 <MemManage_Handler+0x4>

08001862 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001862:	b480      	push	{r7}
 8001864:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001866:	e7fe      	b.n	8001866 <BusFault_Handler+0x4>

08001868 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800186c:	e7fe      	b.n	800186c <UsageFault_Handler+0x4>

0800186e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800186e:	b480      	push	{r7}
 8001870:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001872:	bf00      	nop
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr

0800187c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001880:	bf00      	nop
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr

0800188a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800188a:	b480      	push	{r7}
 800188c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800188e:	bf00      	nop
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr

08001898 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800189c:	f000 f890 	bl	80019c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018a0:	bf00      	nop
 80018a2:	bd80      	pop	{r7, pc}

080018a4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80018a8:	4b06      	ldr	r3, [pc, #24]	; (80018c4 <SystemInit+0x20>)
 80018aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018ae:	4a05      	ldr	r2, [pc, #20]	; (80018c4 <SystemInit+0x20>)
 80018b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018b8:	bf00      	nop
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr
 80018c2:	bf00      	nop
 80018c4:	e000ed00 	.word	0xe000ed00

080018c8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80018c8:	480d      	ldr	r0, [pc, #52]	; (8001900 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80018ca:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80018cc:	f7ff ffea 	bl	80018a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018d0:	480c      	ldr	r0, [pc, #48]	; (8001904 <LoopForever+0x6>)
  ldr r1, =_edata
 80018d2:	490d      	ldr	r1, [pc, #52]	; (8001908 <LoopForever+0xa>)
  ldr r2, =_sidata
 80018d4:	4a0d      	ldr	r2, [pc, #52]	; (800190c <LoopForever+0xe>)
  movs r3, #0
 80018d6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80018d8:	e002      	b.n	80018e0 <LoopCopyDataInit>

080018da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018de:	3304      	adds	r3, #4

080018e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018e4:	d3f9      	bcc.n	80018da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018e6:	4a0a      	ldr	r2, [pc, #40]	; (8001910 <LoopForever+0x12>)
  ldr r4, =_ebss
 80018e8:	4c0a      	ldr	r4, [pc, #40]	; (8001914 <LoopForever+0x16>)
  movs r3, #0
 80018ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018ec:	e001      	b.n	80018f2 <LoopFillZerobss>

080018ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018f0:	3204      	adds	r2, #4

080018f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018f4:	d3fb      	bcc.n	80018ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018f6:	f001 ff97 	bl	8003828 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80018fa:	f7ff fb11 	bl	8000f20 <main>

080018fe <LoopForever>:

LoopForever:
    b LoopForever
 80018fe:	e7fe      	b.n	80018fe <LoopForever>
  ldr   r0, =_estack
 8001900:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001904:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001908:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800190c:	080338c8 	.word	0x080338c8
  ldr r2, =_sbss
 8001910:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001914:	20000ea0 	.word	0x20000ea0

08001918 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001918:	e7fe      	b.n	8001918 <ADC1_2_IRQHandler>

0800191a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800191a:	b580      	push	{r7, lr}
 800191c:	b082      	sub	sp, #8
 800191e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001920:	2300      	movs	r3, #0
 8001922:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001924:	2003      	movs	r0, #3
 8001926:	f000 f90f 	bl	8001b48 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800192a:	200f      	movs	r0, #15
 800192c:	f000 f80e 	bl	800194c <HAL_InitTick>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d002      	beq.n	800193c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	71fb      	strb	r3, [r7, #7]
 800193a:	e001      	b.n	8001940 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800193c:	f7ff fefe 	bl	800173c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001940:	79fb      	ldrb	r3, [r7, #7]

}
 8001942:	4618      	mov	r0, r3
 8001944:	3708      	adds	r7, #8
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
	...

0800194c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b084      	sub	sp, #16
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001954:	2300      	movs	r3, #0
 8001956:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001958:	4b16      	ldr	r3, [pc, #88]	; (80019b4 <HAL_InitTick+0x68>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d022      	beq.n	80019a6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001960:	4b15      	ldr	r3, [pc, #84]	; (80019b8 <HAL_InitTick+0x6c>)
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	4b13      	ldr	r3, [pc, #76]	; (80019b4 <HAL_InitTick+0x68>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800196c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001970:	fbb2 f3f3 	udiv	r3, r2, r3
 8001974:	4618      	mov	r0, r3
 8001976:	f000 f90c 	bl	8001b92 <HAL_SYSTICK_Config>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d10f      	bne.n	80019a0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2b0f      	cmp	r3, #15
 8001984:	d809      	bhi.n	800199a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001986:	2200      	movs	r2, #0
 8001988:	6879      	ldr	r1, [r7, #4]
 800198a:	f04f 30ff 	mov.w	r0, #4294967295
 800198e:	f000 f8e6 	bl	8001b5e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001992:	4a0a      	ldr	r2, [pc, #40]	; (80019bc <HAL_InitTick+0x70>)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6013      	str	r3, [r2, #0]
 8001998:	e007      	b.n	80019aa <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	73fb      	strb	r3, [r7, #15]
 800199e:	e004      	b.n	80019aa <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80019a0:	2301      	movs	r3, #1
 80019a2:	73fb      	strb	r3, [r7, #15]
 80019a4:	e001      	b.n	80019aa <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80019aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	3710      	adds	r7, #16
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	20000008 	.word	0x20000008
 80019b8:	20000000 	.word	0x20000000
 80019bc:	20000004 	.word	0x20000004

080019c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019c4:	4b05      	ldr	r3, [pc, #20]	; (80019dc <HAL_IncTick+0x1c>)
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	4b05      	ldr	r3, [pc, #20]	; (80019e0 <HAL_IncTick+0x20>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4413      	add	r3, r2
 80019ce:	4a03      	ldr	r2, [pc, #12]	; (80019dc <HAL_IncTick+0x1c>)
 80019d0:	6013      	str	r3, [r2, #0]
}
 80019d2:	bf00      	nop
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr
 80019dc:	2000008c 	.word	0x2000008c
 80019e0:	20000008 	.word	0x20000008

080019e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b085      	sub	sp, #20
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	f003 0307 	and.w	r3, r3, #7
 80019f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019f4:	4b0c      	ldr	r3, [pc, #48]	; (8001a28 <__NVIC_SetPriorityGrouping+0x44>)
 80019f6:	68db      	ldr	r3, [r3, #12]
 80019f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019fa:	68ba      	ldr	r2, [r7, #8]
 80019fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a00:	4013      	ands	r3, r2
 8001a02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a16:	4a04      	ldr	r2, [pc, #16]	; (8001a28 <__NVIC_SetPriorityGrouping+0x44>)
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	60d3      	str	r3, [r2, #12]
}
 8001a1c:	bf00      	nop
 8001a1e:	3714      	adds	r7, #20
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr
 8001a28:	e000ed00 	.word	0xe000ed00

08001a2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a30:	4b04      	ldr	r3, [pc, #16]	; (8001a44 <__NVIC_GetPriorityGrouping+0x18>)
 8001a32:	68db      	ldr	r3, [r3, #12]
 8001a34:	0a1b      	lsrs	r3, r3, #8
 8001a36:	f003 0307 	and.w	r3, r3, #7
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr
 8001a44:	e000ed00 	.word	0xe000ed00

08001a48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	4603      	mov	r3, r0
 8001a50:	6039      	str	r1, [r7, #0]
 8001a52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	db0a      	blt.n	8001a72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	b2da      	uxtb	r2, r3
 8001a60:	490c      	ldr	r1, [pc, #48]	; (8001a94 <__NVIC_SetPriority+0x4c>)
 8001a62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a66:	0112      	lsls	r2, r2, #4
 8001a68:	b2d2      	uxtb	r2, r2
 8001a6a:	440b      	add	r3, r1
 8001a6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a70:	e00a      	b.n	8001a88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	b2da      	uxtb	r2, r3
 8001a76:	4908      	ldr	r1, [pc, #32]	; (8001a98 <__NVIC_SetPriority+0x50>)
 8001a78:	79fb      	ldrb	r3, [r7, #7]
 8001a7a:	f003 030f 	and.w	r3, r3, #15
 8001a7e:	3b04      	subs	r3, #4
 8001a80:	0112      	lsls	r2, r2, #4
 8001a82:	b2d2      	uxtb	r2, r2
 8001a84:	440b      	add	r3, r1
 8001a86:	761a      	strb	r2, [r3, #24]
}
 8001a88:	bf00      	nop
 8001a8a:	370c      	adds	r7, #12
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr
 8001a94:	e000e100 	.word	0xe000e100
 8001a98:	e000ed00 	.word	0xe000ed00

08001a9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b089      	sub	sp, #36	; 0x24
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	60f8      	str	r0, [r7, #12]
 8001aa4:	60b9      	str	r1, [r7, #8]
 8001aa6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	f003 0307 	and.w	r3, r3, #7
 8001aae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ab0:	69fb      	ldr	r3, [r7, #28]
 8001ab2:	f1c3 0307 	rsb	r3, r3, #7
 8001ab6:	2b04      	cmp	r3, #4
 8001ab8:	bf28      	it	cs
 8001aba:	2304      	movcs	r3, #4
 8001abc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001abe:	69fb      	ldr	r3, [r7, #28]
 8001ac0:	3304      	adds	r3, #4
 8001ac2:	2b06      	cmp	r3, #6
 8001ac4:	d902      	bls.n	8001acc <NVIC_EncodePriority+0x30>
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	3b03      	subs	r3, #3
 8001aca:	e000      	b.n	8001ace <NVIC_EncodePriority+0x32>
 8001acc:	2300      	movs	r3, #0
 8001ace:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ad0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ad4:	69bb      	ldr	r3, [r7, #24]
 8001ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ada:	43da      	mvns	r2, r3
 8001adc:	68bb      	ldr	r3, [r7, #8]
 8001ade:	401a      	ands	r2, r3
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ae4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	fa01 f303 	lsl.w	r3, r1, r3
 8001aee:	43d9      	mvns	r1, r3
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001af4:	4313      	orrs	r3, r2
         );
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3724      	adds	r7, #36	; 0x24
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr
	...

08001b04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	3b01      	subs	r3, #1
 8001b10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b14:	d301      	bcc.n	8001b1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b16:	2301      	movs	r3, #1
 8001b18:	e00f      	b.n	8001b3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b1a:	4a0a      	ldr	r2, [pc, #40]	; (8001b44 <SysTick_Config+0x40>)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	3b01      	subs	r3, #1
 8001b20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b22:	210f      	movs	r1, #15
 8001b24:	f04f 30ff 	mov.w	r0, #4294967295
 8001b28:	f7ff ff8e 	bl	8001a48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b2c:	4b05      	ldr	r3, [pc, #20]	; (8001b44 <SysTick_Config+0x40>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b32:	4b04      	ldr	r3, [pc, #16]	; (8001b44 <SysTick_Config+0x40>)
 8001b34:	2207      	movs	r2, #7
 8001b36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b38:	2300      	movs	r3, #0
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	3708      	adds	r7, #8
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	e000e010 	.word	0xe000e010

08001b48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b082      	sub	sp, #8
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b50:	6878      	ldr	r0, [r7, #4]
 8001b52:	f7ff ff47 	bl	80019e4 <__NVIC_SetPriorityGrouping>
}
 8001b56:	bf00      	nop
 8001b58:	3708      	adds	r7, #8
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}

08001b5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b5e:	b580      	push	{r7, lr}
 8001b60:	b086      	sub	sp, #24
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	4603      	mov	r3, r0
 8001b66:	60b9      	str	r1, [r7, #8]
 8001b68:	607a      	str	r2, [r7, #4]
 8001b6a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001b6c:	f7ff ff5e 	bl	8001a2c <__NVIC_GetPriorityGrouping>
 8001b70:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b72:	687a      	ldr	r2, [r7, #4]
 8001b74:	68b9      	ldr	r1, [r7, #8]
 8001b76:	6978      	ldr	r0, [r7, #20]
 8001b78:	f7ff ff90 	bl	8001a9c <NVIC_EncodePriority>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b82:	4611      	mov	r1, r2
 8001b84:	4618      	mov	r0, r3
 8001b86:	f7ff ff5f 	bl	8001a48 <__NVIC_SetPriority>
}
 8001b8a:	bf00      	nop
 8001b8c:	3718      	adds	r7, #24
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}

08001b92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b92:	b580      	push	{r7, lr}
 8001b94:	b082      	sub	sp, #8
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b9a:	6878      	ldr	r0, [r7, #4]
 8001b9c:	f7ff ffb2 	bl	8001b04 <SysTick_Config>
 8001ba0:	4603      	mov	r3, r0
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3708      	adds	r7, #8
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
	...

08001bac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b087      	sub	sp, #28
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
 8001bb4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001bba:	e15a      	b.n	8001e72 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	2101      	movs	r1, #1
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	fa01 f303 	lsl.w	r3, r1, r3
 8001bc8:	4013      	ands	r3, r2
 8001bca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	f000 814c 	beq.w	8001e6c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	f003 0303 	and.w	r3, r3, #3
 8001bdc:	2b01      	cmp	r3, #1
 8001bde:	d005      	beq.n	8001bec <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001be8:	2b02      	cmp	r3, #2
 8001bea:	d130      	bne.n	8001c4e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	005b      	lsls	r3, r3, #1
 8001bf6:	2203      	movs	r2, #3
 8001bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfc:	43db      	mvns	r3, r3
 8001bfe:	693a      	ldr	r2, [r7, #16]
 8001c00:	4013      	ands	r3, r2
 8001c02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	68da      	ldr	r2, [r3, #12]
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	005b      	lsls	r3, r3, #1
 8001c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c10:	693a      	ldr	r2, [r7, #16]
 8001c12:	4313      	orrs	r3, r2
 8001c14:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	693a      	ldr	r2, [r7, #16]
 8001c1a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c22:	2201      	movs	r2, #1
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2a:	43db      	mvns	r3, r3
 8001c2c:	693a      	ldr	r2, [r7, #16]
 8001c2e:	4013      	ands	r3, r2
 8001c30:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	091b      	lsrs	r3, r3, #4
 8001c38:	f003 0201 	and.w	r2, r3, #1
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c42:	693a      	ldr	r2, [r7, #16]
 8001c44:	4313      	orrs	r3, r2
 8001c46:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	693a      	ldr	r2, [r7, #16]
 8001c4c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	f003 0303 	and.w	r3, r3, #3
 8001c56:	2b03      	cmp	r3, #3
 8001c58:	d017      	beq.n	8001c8a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	68db      	ldr	r3, [r3, #12]
 8001c5e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	005b      	lsls	r3, r3, #1
 8001c64:	2203      	movs	r2, #3
 8001c66:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6a:	43db      	mvns	r3, r3
 8001c6c:	693a      	ldr	r2, [r7, #16]
 8001c6e:	4013      	ands	r3, r2
 8001c70:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	689a      	ldr	r2, [r3, #8]
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	005b      	lsls	r3, r3, #1
 8001c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7e:	693a      	ldr	r2, [r7, #16]
 8001c80:	4313      	orrs	r3, r2
 8001c82:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	693a      	ldr	r2, [r7, #16]
 8001c88:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	f003 0303 	and.w	r3, r3, #3
 8001c92:	2b02      	cmp	r3, #2
 8001c94:	d123      	bne.n	8001cde <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	08da      	lsrs	r2, r3, #3
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	3208      	adds	r2, #8
 8001c9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ca2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	f003 0307 	and.w	r3, r3, #7
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	220f      	movs	r2, #15
 8001cae:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb2:	43db      	mvns	r3, r3
 8001cb4:	693a      	ldr	r2, [r7, #16]
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	691a      	ldr	r2, [r3, #16]
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	f003 0307 	and.w	r3, r3, #7
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cca:	693a      	ldr	r2, [r7, #16]
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	08da      	lsrs	r2, r3, #3
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	3208      	adds	r2, #8
 8001cd8:	6939      	ldr	r1, [r7, #16]
 8001cda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	005b      	lsls	r3, r3, #1
 8001ce8:	2203      	movs	r2, #3
 8001cea:	fa02 f303 	lsl.w	r3, r2, r3
 8001cee:	43db      	mvns	r3, r3
 8001cf0:	693a      	ldr	r2, [r7, #16]
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	f003 0203 	and.w	r2, r3, #3
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	005b      	lsls	r3, r3, #1
 8001d02:	fa02 f303 	lsl.w	r3, r2, r3
 8001d06:	693a      	ldr	r2, [r7, #16]
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	693a      	ldr	r2, [r7, #16]
 8001d10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	f000 80a6 	beq.w	8001e6c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d20:	4b5b      	ldr	r3, [pc, #364]	; (8001e90 <HAL_GPIO_Init+0x2e4>)
 8001d22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d24:	4a5a      	ldr	r2, [pc, #360]	; (8001e90 <HAL_GPIO_Init+0x2e4>)
 8001d26:	f043 0301 	orr.w	r3, r3, #1
 8001d2a:	6613      	str	r3, [r2, #96]	; 0x60
 8001d2c:	4b58      	ldr	r3, [pc, #352]	; (8001e90 <HAL_GPIO_Init+0x2e4>)
 8001d2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d30:	f003 0301 	and.w	r3, r3, #1
 8001d34:	60bb      	str	r3, [r7, #8]
 8001d36:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d38:	4a56      	ldr	r2, [pc, #344]	; (8001e94 <HAL_GPIO_Init+0x2e8>)
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	089b      	lsrs	r3, r3, #2
 8001d3e:	3302      	adds	r3, #2
 8001d40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d44:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	f003 0303 	and.w	r3, r3, #3
 8001d4c:	009b      	lsls	r3, r3, #2
 8001d4e:	220f      	movs	r2, #15
 8001d50:	fa02 f303 	lsl.w	r3, r2, r3
 8001d54:	43db      	mvns	r3, r3
 8001d56:	693a      	ldr	r2, [r7, #16]
 8001d58:	4013      	ands	r3, r2
 8001d5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001d62:	d01f      	beq.n	8001da4 <HAL_GPIO_Init+0x1f8>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	4a4c      	ldr	r2, [pc, #304]	; (8001e98 <HAL_GPIO_Init+0x2ec>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d019      	beq.n	8001da0 <HAL_GPIO_Init+0x1f4>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	4a4b      	ldr	r2, [pc, #300]	; (8001e9c <HAL_GPIO_Init+0x2f0>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d013      	beq.n	8001d9c <HAL_GPIO_Init+0x1f0>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	4a4a      	ldr	r2, [pc, #296]	; (8001ea0 <HAL_GPIO_Init+0x2f4>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d00d      	beq.n	8001d98 <HAL_GPIO_Init+0x1ec>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	4a49      	ldr	r2, [pc, #292]	; (8001ea4 <HAL_GPIO_Init+0x2f8>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d007      	beq.n	8001d94 <HAL_GPIO_Init+0x1e8>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	4a48      	ldr	r2, [pc, #288]	; (8001ea8 <HAL_GPIO_Init+0x2fc>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d101      	bne.n	8001d90 <HAL_GPIO_Init+0x1e4>
 8001d8c:	2305      	movs	r3, #5
 8001d8e:	e00a      	b.n	8001da6 <HAL_GPIO_Init+0x1fa>
 8001d90:	2306      	movs	r3, #6
 8001d92:	e008      	b.n	8001da6 <HAL_GPIO_Init+0x1fa>
 8001d94:	2304      	movs	r3, #4
 8001d96:	e006      	b.n	8001da6 <HAL_GPIO_Init+0x1fa>
 8001d98:	2303      	movs	r3, #3
 8001d9a:	e004      	b.n	8001da6 <HAL_GPIO_Init+0x1fa>
 8001d9c:	2302      	movs	r3, #2
 8001d9e:	e002      	b.n	8001da6 <HAL_GPIO_Init+0x1fa>
 8001da0:	2301      	movs	r3, #1
 8001da2:	e000      	b.n	8001da6 <HAL_GPIO_Init+0x1fa>
 8001da4:	2300      	movs	r3, #0
 8001da6:	697a      	ldr	r2, [r7, #20]
 8001da8:	f002 0203 	and.w	r2, r2, #3
 8001dac:	0092      	lsls	r2, r2, #2
 8001dae:	4093      	lsls	r3, r2
 8001db0:	693a      	ldr	r2, [r7, #16]
 8001db2:	4313      	orrs	r3, r2
 8001db4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001db6:	4937      	ldr	r1, [pc, #220]	; (8001e94 <HAL_GPIO_Init+0x2e8>)
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	089b      	lsrs	r3, r3, #2
 8001dbc:	3302      	adds	r3, #2
 8001dbe:	693a      	ldr	r2, [r7, #16]
 8001dc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001dc4:	4b39      	ldr	r3, [pc, #228]	; (8001eac <HAL_GPIO_Init+0x300>)
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	43db      	mvns	r3, r3
 8001dce:	693a      	ldr	r2, [r7, #16]
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d003      	beq.n	8001de8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001de0:	693a      	ldr	r2, [r7, #16]
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	4313      	orrs	r3, r2
 8001de6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001de8:	4a30      	ldr	r2, [pc, #192]	; (8001eac <HAL_GPIO_Init+0x300>)
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001dee:	4b2f      	ldr	r3, [pc, #188]	; (8001eac <HAL_GPIO_Init+0x300>)
 8001df0:	68db      	ldr	r3, [r3, #12]
 8001df2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	43db      	mvns	r3, r3
 8001df8:	693a      	ldr	r2, [r7, #16]
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d003      	beq.n	8001e12 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001e0a:	693a      	ldr	r2, [r7, #16]
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001e12:	4a26      	ldr	r2, [pc, #152]	; (8001eac <HAL_GPIO_Init+0x300>)
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001e18:	4b24      	ldr	r3, [pc, #144]	; (8001eac <HAL_GPIO_Init+0x300>)
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	43db      	mvns	r3, r3
 8001e22:	693a      	ldr	r2, [r7, #16]
 8001e24:	4013      	ands	r3, r2
 8001e26:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d003      	beq.n	8001e3c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001e34:	693a      	ldr	r2, [r7, #16]
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001e3c:	4a1b      	ldr	r2, [pc, #108]	; (8001eac <HAL_GPIO_Init+0x300>)
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001e42:	4b1a      	ldr	r3, [pc, #104]	; (8001eac <HAL_GPIO_Init+0x300>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	43db      	mvns	r3, r3
 8001e4c:	693a      	ldr	r2, [r7, #16]
 8001e4e:	4013      	ands	r3, r2
 8001e50:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d003      	beq.n	8001e66 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001e5e:	693a      	ldr	r2, [r7, #16]
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	4313      	orrs	r3, r2
 8001e64:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001e66:	4a11      	ldr	r2, [pc, #68]	; (8001eac <HAL_GPIO_Init+0x300>)
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	3301      	adds	r3, #1
 8001e70:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	fa22 f303 	lsr.w	r3, r2, r3
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	f47f ae9d 	bne.w	8001bbc <HAL_GPIO_Init+0x10>
  }
}
 8001e82:	bf00      	nop
 8001e84:	bf00      	nop
 8001e86:	371c      	adds	r7, #28
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr
 8001e90:	40021000 	.word	0x40021000
 8001e94:	40010000 	.word	0x40010000
 8001e98:	48000400 	.word	0x48000400
 8001e9c:	48000800 	.word	0x48000800
 8001ea0:	48000c00 	.word	0x48000c00
 8001ea4:	48001000 	.word	0x48001000
 8001ea8:	48001400 	.word	0x48001400
 8001eac:	40010400 	.word	0x40010400

08001eb0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001eb4:	4b05      	ldr	r3, [pc, #20]	; (8001ecc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	4a04      	ldr	r2, [pc, #16]	; (8001ecc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001eba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ebe:	6093      	str	r3, [r2, #8]
}
 8001ec0:	bf00      	nop
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop
 8001ecc:	40007000 	.word	0x40007000

08001ed0 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b084      	sub	sp, #16
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	60f8      	str	r0, [r7, #12]
 8001ed8:	60b9      	str	r1, [r7, #8]
 8001eda:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d101      	bne.n	8001ee6 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e038      	b.n	8001f58 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d106      	bne.n	8001f00 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8001efa:	68f8      	ldr	r0, [r7, #12]
 8001efc:	f7ff fc9e 	bl	800183c <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	3308      	adds	r3, #8
 8001f08:	4619      	mov	r1, r3
 8001f0a:	4610      	mov	r0, r2
 8001f0c:	f000 f922 	bl	8002154 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	6818      	ldr	r0, [r3, #0]
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	461a      	mov	r2, r3
 8001f1a:	68b9      	ldr	r1, [r7, #8]
 8001f1c:	f000 f9ea 	bl	80022f4 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	6858      	ldr	r0, [r3, #4]
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	689a      	ldr	r2, [r3, #8]
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f2c:	6879      	ldr	r1, [r7, #4]
 8001f2e:	f000 fa33 	bl	8002398 <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	68fa      	ldr	r2, [r7, #12]
 8001f38:	6892      	ldr	r2, [r2, #8]
 8001f3a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	68fa      	ldr	r2, [r7, #12]
 8001f44:	6892      	ldr	r2, [r2, #8]
 8001f46:	f041 0101 	orr.w	r1, r1, #1
 8001f4a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	2201      	movs	r2, #1
 8001f52:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001f56:	2300      	movs	r3, #0
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	3710      	adds	r7, #16
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}

08001f60 <LL_ADC_REG_SetSequencerLength>:
{
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
 8001f68:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6e:	f023 020f 	bic.w	r2, r3, #15
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	431a      	orrs	r2, r3
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	631a      	str	r2, [r3, #48]	; 0x30
}
 8001f7a:	bf00      	nop
 8001f7c:	370c      	adds	r7, #12
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr

08001f86 <LL_ADC_IsEnabled>:
{
 8001f86:	b480      	push	{r7}
 8001f88:	b083      	sub	sp, #12
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	f003 0301 	and.w	r3, r3, #1
 8001f96:	2b01      	cmp	r3, #1
 8001f98:	d101      	bne.n	8001f9e <LL_ADC_IsEnabled+0x18>
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e000      	b.n	8001fa0 <LL_ADC_IsEnabled+0x1a>
 8001f9e:	2300      	movs	r3, #0
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	370c      	adds	r7, #12
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr

08001fac <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, const LL_ADC_CommonInitTypeDef *pADC_CommonInitStruct)
{
 8001fac:	b590      	push	{r4, r7, lr}
 8001fae:	b085      	sub	sp, #20
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
 8001fb4:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 series, setting of these features is conditioned to  */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0UL)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	4a27      	ldr	r2, [pc, #156]	; (800205c <LL_ADC_CommonInit+0xb0>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d10f      	bne.n	8001fe2 <LL_ADC_CommonInit+0x36>
 8001fc2:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001fc6:	f7ff ffde 	bl	8001f86 <LL_ADC_IsEnabled>
 8001fca:	4604      	mov	r4, r0
 8001fcc:	4824      	ldr	r0, [pc, #144]	; (8002060 <LL_ADC_CommonInit+0xb4>)
 8001fce:	f7ff ffda 	bl	8001f86 <LL_ADC_IsEnabled>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	4323      	orrs	r3, r4
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	bf0c      	ite	eq
 8001fda:	2301      	moveq	r3, #1
 8001fdc:	2300      	movne	r3, #0
 8001fde:	b2db      	uxtb	r3, r3
 8001fe0:	e012      	b.n	8002008 <LL_ADC_CommonInit+0x5c>
 8001fe2:	4820      	ldr	r0, [pc, #128]	; (8002064 <LL_ADC_CommonInit+0xb8>)
 8001fe4:	f7ff ffcf 	bl	8001f86 <LL_ADC_IsEnabled>
 8001fe8:	4604      	mov	r4, r0
 8001fea:	481f      	ldr	r0, [pc, #124]	; (8002068 <LL_ADC_CommonInit+0xbc>)
 8001fec:	f7ff ffcb 	bl	8001f86 <LL_ADC_IsEnabled>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	431c      	orrs	r4, r3
 8001ff4:	481d      	ldr	r0, [pc, #116]	; (800206c <LL_ADC_CommonInit+0xc0>)
 8001ff6:	f7ff ffc6 	bl	8001f86 <LL_ADC_IsEnabled>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	4323      	orrs	r3, r4
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	bf0c      	ite	eq
 8002002:	2301      	moveq	r3, #1
 8002004:	2300      	movne	r3, #0
 8002006:	b2db      	uxtb	r3, r3
 8002008:	2b00      	cmp	r3, #0
 800200a:	d020      	beq.n	800204e <LL_ADC_CommonInit+0xa2>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if (pADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d012      	beq.n	800203a <LL_ADC_CommonInit+0x8e>
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	689a      	ldr	r2, [r3, #8]
 8002018:	4b15      	ldr	r3, [pc, #84]	; (8002070 <LL_ADC_CommonInit+0xc4>)
 800201a:	4013      	ands	r3, r2
 800201c:	683a      	ldr	r2, [r7, #0]
 800201e:	6811      	ldr	r1, [r2, #0]
 8002020:	683a      	ldr	r2, [r7, #0]
 8002022:	6852      	ldr	r2, [r2, #4]
 8002024:	4311      	orrs	r1, r2
 8002026:	683a      	ldr	r2, [r7, #0]
 8002028:	6892      	ldr	r2, [r2, #8]
 800202a:	4311      	orrs	r1, r2
 800202c:	683a      	ldr	r2, [r7, #0]
 800202e:	68d2      	ldr	r2, [r2, #12]
 8002030:	430a      	orrs	r2, r1
 8002032:	431a      	orrs	r2, r3
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	609a      	str	r2, [r3, #8]
 8002038:	e00b      	b.n	8002052 <LL_ADC_CommonInit+0xa6>
                 | pADC_CommonInitStruct->MultiTwoSamplingDelay
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	689a      	ldr	r2, [r3, #8]
 800203e:	4b0c      	ldr	r3, [pc, #48]	; (8002070 <LL_ADC_CommonInit+0xc4>)
 8002040:	4013      	ands	r3, r2
 8002042:	683a      	ldr	r2, [r7, #0]
 8002044:	6812      	ldr	r2, [r2, #0]
 8002046:	431a      	orrs	r2, r3
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	609a      	str	r2, [r3, #8]
 800204c:	e001      	b.n	8002052 <LL_ADC_CommonInit+0xa6>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8002052:	7bfb      	ldrb	r3, [r7, #15]
}
 8002054:	4618      	mov	r0, r3
 8002056:	3714      	adds	r7, #20
 8002058:	46bd      	mov	sp, r7
 800205a:	bd90      	pop	{r4, r7, pc}
 800205c:	50000300 	.word	0x50000300
 8002060:	50000100 	.word	0x50000100
 8002064:	50000400 	.word	0x50000400
 8002068:	50000500 	.word	0x50000500
 800206c:	50000600 	.word	0x50000600
 8002070:	ffc030e0 	.word	0xffc030e0

08002074 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, const LL_ADC_InitTypeDef *pADC_InitStruct)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b084      	sub	sp, #16
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800207e:	2300      	movs	r3, #0
 8002080:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(pADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_LOW_POWER(pADC_InitStruct->LowPowerMode));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	f7ff ff7f 	bl	8001f86 <LL_ADC_IsEnabled>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d111      	bne.n	80020b2 <LL_ADC_Init+0x3e>
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    /*    - Set ADC low power mode                                            */
    MODIFY_REG(ADCx->CFGR,
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	68db      	ldr	r3, [r3, #12]
 8002092:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002096:	f023 0318 	bic.w	r3, r3, #24
 800209a:	683a      	ldr	r2, [r7, #0]
 800209c:	6811      	ldr	r1, [r2, #0]
 800209e:	683a      	ldr	r2, [r7, #0]
 80020a0:	6852      	ldr	r2, [r2, #4]
 80020a2:	4311      	orrs	r1, r2
 80020a4:	683a      	ldr	r2, [r7, #0]
 80020a6:	6892      	ldr	r2, [r2, #8]
 80020a8:	430a      	orrs	r2, r1
 80020aa:	431a      	orrs	r2, r3
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	60da      	str	r2, [r3, #12]
 80020b0:	e001      	b.n	80020b6 <LL_ADC_Init+0x42>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80020b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	3710      	adds	r7, #16
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}

080020c0 <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, const LL_ADC_REG_InitTypeDef *pADC_RegInitStruct)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b084      	sub	sp, #16
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
 80020c8:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 80020ca:	2300      	movs	r3, #0
 80020cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_REG_DMA_TRANSFER(pADC_RegInitStruct->DMATransfer));
  assert_param(IS_LL_ADC_REG_OVR_DATA_BEHAVIOR(pADC_RegInitStruct->Overrun));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f7ff ff59 	bl	8001f86 <LL_ADC_IsEnabled>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d132      	bne.n	8002140 <LL_ADC_REG_Init+0x80>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /*    - Set ADC group regular overrun behavior                            */
    /* Note: On this STM32 series, ADC trigger edge is set to value 0x0 by    */
    /*       setting of trigger source to SW start.                           */
    if (pADC_RegInitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d015      	beq.n	800210e <LL_ADC_REG_Init+0x4e>
    {
      MODIFY_REG(ADCx->CFGR,
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	68da      	ldr	r2, [r3, #12]
 80020e6:	4b1a      	ldr	r3, [pc, #104]	; (8002150 <LL_ADC_REG_Init+0x90>)
 80020e8:	4013      	ands	r3, r2
 80020ea:	683a      	ldr	r2, [r7, #0]
 80020ec:	6811      	ldr	r1, [r2, #0]
 80020ee:	683a      	ldr	r2, [r7, #0]
 80020f0:	6892      	ldr	r2, [r2, #8]
 80020f2:	4311      	orrs	r1, r2
 80020f4:	683a      	ldr	r2, [r7, #0]
 80020f6:	68d2      	ldr	r2, [r2, #12]
 80020f8:	4311      	orrs	r1, r2
 80020fa:	683a      	ldr	r2, [r7, #0]
 80020fc:	6912      	ldr	r2, [r2, #16]
 80020fe:	4311      	orrs	r1, r2
 8002100:	683a      	ldr	r2, [r7, #0]
 8002102:	6952      	ldr	r2, [r2, #20]
 8002104:	430a      	orrs	r2, r1
 8002106:	431a      	orrs	r2, r3
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	60da      	str	r2, [r3, #12]
 800210c:	e011      	b.n	8002132 <LL_ADC_REG_Init+0x72>
                 | pADC_RegInitStruct->Overrun
                );
    }
    else
    {
      MODIFY_REG(ADCx->CFGR,
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	68da      	ldr	r2, [r3, #12]
 8002112:	4b0f      	ldr	r3, [pc, #60]	; (8002150 <LL_ADC_REG_Init+0x90>)
 8002114:	4013      	ands	r3, r2
 8002116:	683a      	ldr	r2, [r7, #0]
 8002118:	6811      	ldr	r1, [r2, #0]
 800211a:	683a      	ldr	r2, [r7, #0]
 800211c:	68d2      	ldr	r2, [r2, #12]
 800211e:	4311      	orrs	r1, r2
 8002120:	683a      	ldr	r2, [r7, #0]
 8002122:	6912      	ldr	r2, [r2, #16]
 8002124:	4311      	orrs	r1, r2
 8002126:	683a      	ldr	r2, [r7, #0]
 8002128:	6952      	ldr	r2, [r2, #20]
 800212a:	430a      	orrs	r2, r1
 800212c:	431a      	orrs	r2, r3
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	60da      	str	r2, [r3, #12]
                 | pADC_RegInitStruct->Overrun
                );
    }

    /* Set ADC group regular sequencer length and scan direction */
    LL_ADC_REG_SetSequencerLength(ADCx, pADC_RegInitStruct->SequencerLength);
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	4619      	mov	r1, r3
 8002138:	6878      	ldr	r0, [r7, #4]
 800213a:	f7ff ff11 	bl	8001f60 <LL_ADC_REG_SetSequencerLength>
 800213e:	e001      	b.n	8002144 <LL_ADC_REG_Init+0x84>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8002140:	2301      	movs	r3, #1
 8002142:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8002144:	7bfb      	ldrb	r3, [r7, #15]
}
 8002146:	4618      	mov	r0, r3
 8002148:	3710      	adds	r7, #16
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	fff0c01c 	.word	0xfff0c01c

08002154 <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 8002154:	b480      	push	{r7}
 8002156:	b087      	sub	sp, #28
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
 800215c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_PAGESIZE(Init->PageSize));
  assert_param(IS_FMC_NBL_SETUPTIME(Init->NBLSetupTime));
  assert_param(IS_FUNCTIONAL_STATE(Init->MaxChipSelectPulse));

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002168:	683a      	ldr	r2, [r7, #0]
 800216a:	6812      	ldr	r2, [r2, #0]
 800216c:	f023 0101 	bic.w	r1, r3, #1
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	2b08      	cmp	r3, #8
 800217c:	d102      	bne.n	8002184 <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800217e:	2340      	movs	r3, #64	; 0x40
 8002180:	617b      	str	r3, [r7, #20]
 8002182:	e001      	b.n	8002188 <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8002184:	2300      	movs	r3, #0
 8002186:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8002194:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 800219a:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 80021a0:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 80021a6:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 80021ac:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 80021b2:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 80021b8:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 80021be:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 80021c4:	431a      	orrs	r2, r3
              Init->WriteBurst);
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 80021ca:	4313      	orrs	r3, r2
 80021cc:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d2:	693a      	ldr	r2, [r7, #16]
 80021d4:	4313      	orrs	r3, r2
 80021d6:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->WriteFifo;
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021dc:	693a      	ldr	r2, [r7, #16]
 80021de:	4313      	orrs	r3, r2
 80021e0:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->NBLSetupTime;
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021e6:	693a      	ldr	r2, [r7, #16]
 80021e8:	4313      	orrs	r3, r2
 80021ea:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021f0:	693a      	ldr	r2, [r7, #16]
 80021f2:	4313      	orrs	r3, r2
 80021f4:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCRx_MBKEN                |
 80021f6:	4b3e      	ldr	r3, [pc, #248]	; (80022f0 <FMC_NORSRAM_Init+0x19c>)
 80021f8:	60fb      	str	r3, [r7, #12]
          FMC_BCRx_WAITEN               |
          FMC_BCRx_EXTMOD               |
          FMC_BCRx_ASYNCWAIT            |
          FMC_BCRx_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002200:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_WFDIS;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002208:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCRx_NBLSET;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
 8002210:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCRx_CPSIZE;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8002218:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	43db      	mvns	r3, r3
 8002228:	ea02 0103 	and.w	r1, r2, r3
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	4319      	orrs	r1, r3
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002242:	d10c      	bne.n	800225e <FMC_NORSRAM_Init+0x10a>
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d008      	beq.n	800225e <FMC_NORSRAM_Init+0x10a>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002258:	431a      	orrs	r2, r3
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	601a      	str	r2, [r3, #0]
  }

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d006      	beq.n	8002274 <FMC_NORSRAM_Init+0x120>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800226e:	431a      	orrs	r2, r3
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	601a      	str	r2, [r3, #0]
  }

  /* Check PSRAM chip select counter state */
  if (Init->MaxChipSelectPulse == ENABLE)
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800227a:	2b01      	cmp	r3, #1
 800227c:	d12f      	bne.n	80022de <FMC_NORSRAM_Init+0x18a>
  {
    /* Check the parameters */
    assert_param(IS_FMC_MAX_CHIP_SELECT_PULSE_TIME(Init->MaxChipSelectPulseTime));

    /* Configure PSRAM chip select counter value */
    MODIFY_REG(Device->PCSCNTR, FMC_PCSCNTR_CSCOUNT, (uint32_t)(Init->MaxChipSelectPulseTime));
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6a1b      	ldr	r3, [r3, #32]
 8002282:	0c1b      	lsrs	r3, r3, #16
 8002284:	041b      	lsls	r3, r3, #16
 8002286:	683a      	ldr	r2, [r7, #0]
 8002288:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800228a:	431a      	orrs	r2, r3
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	621a      	str	r2, [r3, #32]

    /* Enable PSRAM chip select counter for the bank */
    switch (Init->NSBank)
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	2b04      	cmp	r3, #4
 8002296:	d014      	beq.n	80022c2 <FMC_NORSRAM_Init+0x16e>
 8002298:	2b04      	cmp	r3, #4
 800229a:	d819      	bhi.n	80022d0 <FMC_NORSRAM_Init+0x17c>
 800229c:	2b00      	cmp	r3, #0
 800229e:	d002      	beq.n	80022a6 <FMC_NORSRAM_Init+0x152>
 80022a0:	2b02      	cmp	r3, #2
 80022a2:	d007      	beq.n	80022b4 <FMC_NORSRAM_Init+0x160>
 80022a4:	e014      	b.n	80022d0 <FMC_NORSRAM_Init+0x17c>
    {
      case FMC_NORSRAM_BANK1 :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB1EN);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6a1b      	ldr	r3, [r3, #32]
 80022aa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	621a      	str	r2, [r3, #32]
        break;
 80022b2:	e015      	b.n	80022e0 <FMC_NORSRAM_Init+0x18c>

      case FMC_NORSRAM_BANK2 :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB2EN);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6a1b      	ldr	r3, [r3, #32]
 80022b8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	621a      	str	r2, [r3, #32]
        break;
 80022c0:	e00e      	b.n	80022e0 <FMC_NORSRAM_Init+0x18c>

      case FMC_NORSRAM_BANK3 :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB3EN);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6a1b      	ldr	r3, [r3, #32]
 80022c6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	621a      	str	r2, [r3, #32]
        break;
 80022ce:	e007      	b.n	80022e0 <FMC_NORSRAM_Init+0x18c>

      default :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB4EN);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6a1b      	ldr	r3, [r3, #32]
 80022d4:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	621a      	str	r2, [r3, #32]
        break;
 80022dc:	e000      	b.n	80022e0 <FMC_NORSRAM_Init+0x18c>
    }
  }
 80022de:	bf00      	nop

  return HAL_OK;
 80022e0:	2300      	movs	r3, #0
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	371c      	adds	r7, #28
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr
 80022ee:	bf00      	nop
 80022f0:	0008fb7f 	.word	0x0008fb7f

080022f4 <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b087      	sub	sp, #28
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	60f8      	str	r0, [r7, #12]
 80022fc:	60b9      	str	r1, [r7, #8]
 80022fe:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	1c5a      	adds	r2, r3, #1
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	011b      	lsls	r3, r3, #4
 8002314:	431a      	orrs	r2, r3
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	021b      	lsls	r3, r3, #8
 800231c:	431a      	orrs	r2, r3
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	68db      	ldr	r3, [r3, #12]
 8002322:	079b      	lsls	r3, r3, #30
 8002324:	431a      	orrs	r2, r3
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	691b      	ldr	r3, [r3, #16]
 800232a:	041b      	lsls	r3, r3, #16
 800232c:	431a      	orrs	r2, r3
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	695b      	ldr	r3, [r3, #20]
 8002332:	3b01      	subs	r3, #1
 8002334:	051b      	lsls	r3, r3, #20
 8002336:	431a      	orrs	r2, r3
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	699b      	ldr	r3, [r3, #24]
 800233c:	3b02      	subs	r3, #2
 800233e:	061b      	lsls	r3, r3, #24
 8002340:	ea42 0103 	orr.w	r1, r2, r3
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	69db      	ldr	r3, [r3, #28]
 8002348:	687a      	ldr	r2, [r7, #4]
 800234a:	3201      	adds	r2, #1
 800234c:	4319      	orrs	r1, r3
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800235c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002360:	d113      	bne.n	800238a <FMC_NORSRAM_Timing_Init+0x96>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800236a:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	695b      	ldr	r3, [r3, #20]
 8002370:	3b01      	subs	r3, #1
 8002372:	051b      	lsls	r3, r3, #20
 8002374:	697a      	ldr	r2, [r7, #20]
 8002376:	4313      	orrs	r3, r2
 8002378:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	431a      	orrs	r2, r3
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800238a:	2300      	movs	r3, #0
}
 800238c:	4618      	mov	r0, r3
 800238e:	371c      	adds	r7, #28
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr

08002398 <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8002398:	b480      	push	{r7}
 800239a:	b085      	sub	sp, #20
 800239c:	af00      	add	r7, sp, #0
 800239e:	60f8      	str	r0, [r7, #12]
 80023a0:	60b9      	str	r1, [r7, #8]
 80023a2:	607a      	str	r2, [r7, #4]
 80023a4:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80023ac:	d121      	bne.n	80023f2 <FMC_NORSRAM_Extended_Timing_Init+0x5a>
    assert_param(IS_FMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	687a      	ldr	r2, [r7, #4]
 80023b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023b6:	f003 627f 	and.w	r2, r3, #267386880	; 0xff00000
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	6819      	ldr	r1, [r3, #0]
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	011b      	lsls	r3, r3, #4
 80023c4:	4319      	orrs	r1, r3
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	021b      	lsls	r3, r3, #8
 80023cc:	4319      	orrs	r1, r3
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	68db      	ldr	r3, [r3, #12]
 80023d2:	079b      	lsls	r3, r3, #30
 80023d4:	4319      	orrs	r1, r3
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	69db      	ldr	r3, [r3, #28]
 80023da:	4319      	orrs	r1, r3
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	691b      	ldr	r3, [r3, #16]
 80023e0:	041b      	lsls	r3, r3, #16
 80023e2:	430b      	orrs	r3, r1
 80023e4:	ea42 0103 	orr.w	r1, r2, r3
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	687a      	ldr	r2, [r7, #4]
 80023ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80023f0:	e005      	b.n	80023fe <FMC_NORSRAM_Extended_Timing_Init+0x66>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	687a      	ldr	r2, [r7, #4]
 80023f6:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 80023fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 80023fe:	2300      	movs	r3, #0
}
 8002400:	4618      	mov	r0, r3
 8002402:	3714      	adds	r7, #20
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr

0800240c <LL_GPIO_SetPinMode>:
{
 800240c:	b480      	push	{r7}
 800240e:	b08b      	sub	sp, #44	; 0x2c
 8002410:	af00      	add	r7, sp, #0
 8002412:	60f8      	str	r0, [r7, #12]
 8002414:	60b9      	str	r1, [r7, #8]
 8002416:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	fa93 f3a3 	rbit	r3, r3
 8002426:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	61bb      	str	r3, [r7, #24]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800242c:	69bb      	ldr	r3, [r7, #24]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d101      	bne.n	8002436 <LL_GPIO_SetPinMode+0x2a>
  {
    return 32U;
 8002432:	2320      	movs	r3, #32
 8002434:	e003      	b.n	800243e <LL_GPIO_SetPinMode+0x32>
  }
  return __builtin_clz(value);
 8002436:	69bb      	ldr	r3, [r7, #24]
 8002438:	fab3 f383 	clz	r3, r3
 800243c:	b2db      	uxtb	r3, r3
 800243e:	005b      	lsls	r3, r3, #1
 8002440:	2103      	movs	r1, #3
 8002442:	fa01 f303 	lsl.w	r3, r1, r3
 8002446:	43db      	mvns	r3, r3
 8002448:	401a      	ands	r2, r3
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800244e:	6a3b      	ldr	r3, [r7, #32]
 8002450:	fa93 f3a3 	rbit	r3, r3
 8002454:	61fb      	str	r3, [r7, #28]
  return result;
 8002456:	69fb      	ldr	r3, [r7, #28]
 8002458:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800245a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245c:	2b00      	cmp	r3, #0
 800245e:	d101      	bne.n	8002464 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8002460:	2320      	movs	r3, #32
 8002462:	e003      	b.n	800246c <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8002464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002466:	fab3 f383 	clz	r3, r3
 800246a:	b2db      	uxtb	r3, r3
 800246c:	005b      	lsls	r3, r3, #1
 800246e:	6879      	ldr	r1, [r7, #4]
 8002470:	fa01 f303 	lsl.w	r3, r1, r3
 8002474:	431a      	orrs	r2, r3
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	601a      	str	r2, [r3, #0]
}
 800247a:	bf00      	nop
 800247c:	372c      	adds	r7, #44	; 0x2c
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr

08002486 <LL_GPIO_SetPinOutputType>:
{
 8002486:	b480      	push	{r7}
 8002488:	b085      	sub	sp, #20
 800248a:	af00      	add	r7, sp, #0
 800248c:	60f8      	str	r0, [r7, #12]
 800248e:	60b9      	str	r1, [r7, #8]
 8002490:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	685a      	ldr	r2, [r3, #4]
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	43db      	mvns	r3, r3
 800249a:	401a      	ands	r2, r3
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	6879      	ldr	r1, [r7, #4]
 80024a0:	fb01 f303 	mul.w	r3, r1, r3
 80024a4:	431a      	orrs	r2, r3
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	605a      	str	r2, [r3, #4]
}
 80024aa:	bf00      	nop
 80024ac:	3714      	adds	r7, #20
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr

080024b6 <LL_GPIO_SetPinSpeed>:
{
 80024b6:	b480      	push	{r7}
 80024b8:	b08b      	sub	sp, #44	; 0x2c
 80024ba:	af00      	add	r7, sp, #0
 80024bc:	60f8      	str	r0, [r7, #12]
 80024be:	60b9      	str	r1, [r7, #8]
 80024c0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	689a      	ldr	r2, [r3, #8]
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	fa93 f3a3 	rbit	r3, r3
 80024d0:	613b      	str	r3, [r7, #16]
  return result;
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80024d6:	69bb      	ldr	r3, [r7, #24]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d101      	bne.n	80024e0 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 80024dc:	2320      	movs	r3, #32
 80024de:	e003      	b.n	80024e8 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 80024e0:	69bb      	ldr	r3, [r7, #24]
 80024e2:	fab3 f383 	clz	r3, r3
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	005b      	lsls	r3, r3, #1
 80024ea:	2103      	movs	r1, #3
 80024ec:	fa01 f303 	lsl.w	r3, r1, r3
 80024f0:	43db      	mvns	r3, r3
 80024f2:	401a      	ands	r2, r3
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024f8:	6a3b      	ldr	r3, [r7, #32]
 80024fa:	fa93 f3a3 	rbit	r3, r3
 80024fe:	61fb      	str	r3, [r7, #28]
  return result;
 8002500:	69fb      	ldr	r3, [r7, #28]
 8002502:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002506:	2b00      	cmp	r3, #0
 8002508:	d101      	bne.n	800250e <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 800250a:	2320      	movs	r3, #32
 800250c:	e003      	b.n	8002516 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 800250e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002510:	fab3 f383 	clz	r3, r3
 8002514:	b2db      	uxtb	r3, r3
 8002516:	005b      	lsls	r3, r3, #1
 8002518:	6879      	ldr	r1, [r7, #4]
 800251a:	fa01 f303 	lsl.w	r3, r1, r3
 800251e:	431a      	orrs	r2, r3
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	609a      	str	r2, [r3, #8]
}
 8002524:	bf00      	nop
 8002526:	372c      	adds	r7, #44	; 0x2c
 8002528:	46bd      	mov	sp, r7
 800252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252e:	4770      	bx	lr

08002530 <LL_GPIO_SetPinPull>:
{
 8002530:	b480      	push	{r7}
 8002532:	b08b      	sub	sp, #44	; 0x2c
 8002534:	af00      	add	r7, sp, #0
 8002536:	60f8      	str	r0, [r7, #12]
 8002538:	60b9      	str	r1, [r7, #8]
 800253a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	68da      	ldr	r2, [r3, #12]
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	fa93 f3a3 	rbit	r3, r3
 800254a:	613b      	str	r3, [r7, #16]
  return result;
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002550:	69bb      	ldr	r3, [r7, #24]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d101      	bne.n	800255a <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8002556:	2320      	movs	r3, #32
 8002558:	e003      	b.n	8002562 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 800255a:	69bb      	ldr	r3, [r7, #24]
 800255c:	fab3 f383 	clz	r3, r3
 8002560:	b2db      	uxtb	r3, r3
 8002562:	005b      	lsls	r3, r3, #1
 8002564:	2103      	movs	r1, #3
 8002566:	fa01 f303 	lsl.w	r3, r1, r3
 800256a:	43db      	mvns	r3, r3
 800256c:	401a      	ands	r2, r3
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002572:	6a3b      	ldr	r3, [r7, #32]
 8002574:	fa93 f3a3 	rbit	r3, r3
 8002578:	61fb      	str	r3, [r7, #28]
  return result;
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800257e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002580:	2b00      	cmp	r3, #0
 8002582:	d101      	bne.n	8002588 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8002584:	2320      	movs	r3, #32
 8002586:	e003      	b.n	8002590 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8002588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800258a:	fab3 f383 	clz	r3, r3
 800258e:	b2db      	uxtb	r3, r3
 8002590:	005b      	lsls	r3, r3, #1
 8002592:	6879      	ldr	r1, [r7, #4]
 8002594:	fa01 f303 	lsl.w	r3, r1, r3
 8002598:	431a      	orrs	r2, r3
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	60da      	str	r2, [r3, #12]
}
 800259e:	bf00      	nop
 80025a0:	372c      	adds	r7, #44	; 0x2c
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr

080025aa <LL_GPIO_SetAFPin_0_7>:
{
 80025aa:	b480      	push	{r7}
 80025ac:	b08b      	sub	sp, #44	; 0x2c
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	60f8      	str	r0, [r7, #12]
 80025b2:	60b9      	str	r1, [r7, #8]
 80025b4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	6a1a      	ldr	r2, [r3, #32]
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	fa93 f3a3 	rbit	r3, r3
 80025c4:	613b      	str	r3, [r7, #16]
  return result;
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80025ca:	69bb      	ldr	r3, [r7, #24]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d101      	bne.n	80025d4 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 80025d0:	2320      	movs	r3, #32
 80025d2:	e003      	b.n	80025dc <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 80025d4:	69bb      	ldr	r3, [r7, #24]
 80025d6:	fab3 f383 	clz	r3, r3
 80025da:	b2db      	uxtb	r3, r3
 80025dc:	009b      	lsls	r3, r3, #2
 80025de:	210f      	movs	r1, #15
 80025e0:	fa01 f303 	lsl.w	r3, r1, r3
 80025e4:	43db      	mvns	r3, r3
 80025e6:	401a      	ands	r2, r3
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ec:	6a3b      	ldr	r3, [r7, #32]
 80025ee:	fa93 f3a3 	rbit	r3, r3
 80025f2:	61fb      	str	r3, [r7, #28]
  return result;
 80025f4:	69fb      	ldr	r3, [r7, #28]
 80025f6:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80025f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d101      	bne.n	8002602 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 80025fe:	2320      	movs	r3, #32
 8002600:	e003      	b.n	800260a <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8002602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002604:	fab3 f383 	clz	r3, r3
 8002608:	b2db      	uxtb	r3, r3
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	6879      	ldr	r1, [r7, #4]
 800260e:	fa01 f303 	lsl.w	r3, r1, r3
 8002612:	431a      	orrs	r2, r3
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	621a      	str	r2, [r3, #32]
}
 8002618:	bf00      	nop
 800261a:	372c      	adds	r7, #44	; 0x2c
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr

08002624 <LL_GPIO_SetAFPin_8_15>:
{
 8002624:	b480      	push	{r7}
 8002626:	b08b      	sub	sp, #44	; 0x2c
 8002628:	af00      	add	r7, sp, #0
 800262a:	60f8      	str	r0, [r7, #12]
 800262c:	60b9      	str	r1, [r7, #8]
 800262e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	0a1b      	lsrs	r3, r3, #8
 8002638:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	fa93 f3a3 	rbit	r3, r3
 8002640:	613b      	str	r3, [r7, #16]
  return result;
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002646:	69bb      	ldr	r3, [r7, #24]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d101      	bne.n	8002650 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 800264c:	2320      	movs	r3, #32
 800264e:	e003      	b.n	8002658 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8002650:	69bb      	ldr	r3, [r7, #24]
 8002652:	fab3 f383 	clz	r3, r3
 8002656:	b2db      	uxtb	r3, r3
 8002658:	009b      	lsls	r3, r3, #2
 800265a:	210f      	movs	r1, #15
 800265c:	fa01 f303 	lsl.w	r3, r1, r3
 8002660:	43db      	mvns	r3, r3
 8002662:	401a      	ands	r2, r3
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	0a1b      	lsrs	r3, r3, #8
 8002668:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800266a:	6a3b      	ldr	r3, [r7, #32]
 800266c:	fa93 f3a3 	rbit	r3, r3
 8002670:	61fb      	str	r3, [r7, #28]
  return result;
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002678:	2b00      	cmp	r3, #0
 800267a:	d101      	bne.n	8002680 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 800267c:	2320      	movs	r3, #32
 800267e:	e003      	b.n	8002688 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8002680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002682:	fab3 f383 	clz	r3, r3
 8002686:	b2db      	uxtb	r3, r3
 8002688:	009b      	lsls	r3, r3, #2
 800268a:	6879      	ldr	r1, [r7, #4]
 800268c:	fa01 f303 	lsl.w	r3, r1, r3
 8002690:	431a      	orrs	r2, r3
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002696:	bf00      	nop
 8002698:	372c      	adds	r7, #44	; 0x2c
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr

080026a2 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80026a2:	b580      	push	{r7, lr}
 80026a4:	b088      	sub	sp, #32
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	6078      	str	r0, [r7, #4]
 80026aa:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	fa93 f3a3 	rbit	r3, r3
 80026b8:	60fb      	str	r3, [r7, #12]
  return result;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d101      	bne.n	80026c8 <LL_GPIO_Init+0x26>
    return 32U;
 80026c4:	2320      	movs	r3, #32
 80026c6:	e003      	b.n	80026d0 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	fab3 f383 	clz	r3, r3
 80026ce:	b2db      	uxtb	r3, r3
 80026d0:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80026d2:	e048      	b.n	8002766 <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	2101      	movs	r1, #1
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	fa01 f303 	lsl.w	r3, r1, r3
 80026e0:	4013      	ands	r3, r2
 80026e2:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 80026e4:	69bb      	ldr	r3, [r7, #24]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d03a      	beq.n	8002760 <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d003      	beq.n	80026fa <LL_GPIO_Init+0x58>
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	2b02      	cmp	r3, #2
 80026f8:	d10e      	bne.n	8002718 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	461a      	mov	r2, r3
 8002700:	69b9      	ldr	r1, [r7, #24]
 8002702:	6878      	ldr	r0, [r7, #4]
 8002704:	f7ff fed7 	bl	80024b6 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	6819      	ldr	r1, [r3, #0]
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	68db      	ldr	r3, [r3, #12]
 8002710:	461a      	mov	r2, r3
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	f7ff feb7 	bl	8002486 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	691b      	ldr	r3, [r3, #16]
 800271c:	461a      	mov	r2, r3
 800271e:	69b9      	ldr	r1, [r7, #24]
 8002720:	6878      	ldr	r0, [r7, #4]
 8002722:	f7ff ff05 	bl	8002530 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	2b02      	cmp	r3, #2
 800272c:	d111      	bne.n	8002752 <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800272e:	69bb      	ldr	r3, [r7, #24]
 8002730:	2bff      	cmp	r3, #255	; 0xff
 8002732:	d807      	bhi.n	8002744 <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	695b      	ldr	r3, [r3, #20]
 8002738:	461a      	mov	r2, r3
 800273a:	69b9      	ldr	r1, [r7, #24]
 800273c:	6878      	ldr	r0, [r7, #4]
 800273e:	f7ff ff34 	bl	80025aa <LL_GPIO_SetAFPin_0_7>
 8002742:	e006      	b.n	8002752 <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	695b      	ldr	r3, [r3, #20]
 8002748:	461a      	mov	r2, r3
 800274a:	69b9      	ldr	r1, [r7, #24]
 800274c:	6878      	ldr	r0, [r7, #4]
 800274e:	f7ff ff69 	bl	8002624 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	461a      	mov	r2, r3
 8002758:	69b9      	ldr	r1, [r7, #24]
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	f7ff fe56 	bl	800240c <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8002760:	69fb      	ldr	r3, [r7, #28]
 8002762:	3301      	adds	r3, #1
 8002764:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	fa22 f303 	lsr.w	r3, r2, r3
 8002770:	2b00      	cmp	r3, #0
 8002772:	d1af      	bne.n	80026d4 <LL_GPIO_Init+0x32>
  }
  return (SUCCESS);
 8002774:	2300      	movs	r3, #0
}
 8002776:	4618      	mov	r0, r3
 8002778:	3720      	adds	r7, #32
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}

0800277e <LL_TIM_SetPrescaler>:
{
 800277e:	b480      	push	{r7}
 8002780:	b083      	sub	sp, #12
 8002782:	af00      	add	r7, sp, #0
 8002784:	6078      	str	r0, [r7, #4]
 8002786:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	683a      	ldr	r2, [r7, #0]
 800278c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800278e:	bf00      	nop
 8002790:	370c      	adds	r7, #12
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr

0800279a <LL_TIM_SetAutoReload>:
{
 800279a:	b480      	push	{r7}
 800279c:	b083      	sub	sp, #12
 800279e:	af00      	add	r7, sp, #0
 80027a0:	6078      	str	r0, [r7, #4]
 80027a2:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	683a      	ldr	r2, [r7, #0]
 80027a8:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80027aa:	bf00      	nop
 80027ac:	370c      	adds	r7, #12
 80027ae:	46bd      	mov	sp, r7
 80027b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b4:	4770      	bx	lr

080027b6 <LL_TIM_SetRepetitionCounter>:
{
 80027b6:	b480      	push	{r7}
 80027b8:	b083      	sub	sp, #12
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	6078      	str	r0, [r7, #4]
 80027be:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	683a      	ldr	r2, [r7, #0]
 80027c4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80027c6:	bf00      	nop
 80027c8:	370c      	adds	r7, #12
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr

080027d2 <LL_TIM_OC_SetCompareCH1>:
{
 80027d2:	b480      	push	{r7}
 80027d4:	b083      	sub	sp, #12
 80027d6:	af00      	add	r7, sp, #0
 80027d8:	6078      	str	r0, [r7, #4]
 80027da:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	683a      	ldr	r2, [r7, #0]
 80027e0:	635a      	str	r2, [r3, #52]	; 0x34
}
 80027e2:	bf00      	nop
 80027e4:	370c      	adds	r7, #12
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr

080027ee <LL_TIM_OC_SetCompareCH2>:
{
 80027ee:	b480      	push	{r7}
 80027f0:	b083      	sub	sp, #12
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	6078      	str	r0, [r7, #4]
 80027f6:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	683a      	ldr	r2, [r7, #0]
 80027fc:	639a      	str	r2, [r3, #56]	; 0x38
}
 80027fe:	bf00      	nop
 8002800:	370c      	adds	r7, #12
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr

0800280a <LL_TIM_OC_SetCompareCH3>:
{
 800280a:	b480      	push	{r7}
 800280c:	b083      	sub	sp, #12
 800280e:	af00      	add	r7, sp, #0
 8002810:	6078      	str	r0, [r7, #4]
 8002812:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	683a      	ldr	r2, [r7, #0]
 8002818:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800281a:	bf00      	nop
 800281c:	370c      	adds	r7, #12
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr

08002826 <LL_TIM_OC_SetCompareCH4>:
{
 8002826:	b480      	push	{r7}
 8002828:	b083      	sub	sp, #12
 800282a:	af00      	add	r7, sp, #0
 800282c:	6078      	str	r0, [r7, #4]
 800282e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	683a      	ldr	r2, [r7, #0]
 8002834:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002836:	bf00      	nop
 8002838:	370c      	adds	r7, #12
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr

08002842 <LL_TIM_OC_SetCompareCH5>:
{
 8002842:	b480      	push	{r7}
 8002844:	b083      	sub	sp, #12
 8002846:	af00      	add	r7, sp, #0
 8002848:	6078      	str	r0, [r7, #4]
 800284a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	683a      	ldr	r2, [r7, #0]
 8002854:	649a      	str	r2, [r3, #72]	; 0x48
}
 8002856:	bf00      	nop
 8002858:	370c      	adds	r7, #12
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr

08002862 <LL_TIM_OC_SetCompareCH6>:
{
 8002862:	b480      	push	{r7}
 8002864:	b083      	sub	sp, #12
 8002866:	af00      	add	r7, sp, #0
 8002868:	6078      	str	r0, [r7, #4]
 800286a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR6, CompareValue);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	683a      	ldr	r2, [r7, #0]
 8002870:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8002872:	bf00      	nop
 8002874:	370c      	adds	r7, #12
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr

0800287e <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 800287e:	b480      	push	{r7}
 8002880:	b083      	sub	sp, #12
 8002882:	af00      	add	r7, sp, #0
 8002884:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	695b      	ldr	r3, [r3, #20]
 800288a:	f043 0201 	orr.w	r2, r3, #1
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	615a      	str	r2, [r3, #20]
}
 8002892:	bf00      	nop
 8002894:	370c      	adds	r7, #12
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr
	...

080028a0 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b084      	sub	sp, #16
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
 80028a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	4a43      	ldr	r2, [pc, #268]	; (80029c0 <LL_TIM_Init+0x120>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d017      	beq.n	80028e8 <LL_TIM_Init+0x48>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028be:	d013      	beq.n	80028e8 <LL_TIM_Init+0x48>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	4a40      	ldr	r2, [pc, #256]	; (80029c4 <LL_TIM_Init+0x124>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d00f      	beq.n	80028e8 <LL_TIM_Init+0x48>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	4a3f      	ldr	r2, [pc, #252]	; (80029c8 <LL_TIM_Init+0x128>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d00b      	beq.n	80028e8 <LL_TIM_Init+0x48>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	4a3e      	ldr	r2, [pc, #248]	; (80029cc <LL_TIM_Init+0x12c>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d007      	beq.n	80028e8 <LL_TIM_Init+0x48>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	4a3d      	ldr	r2, [pc, #244]	; (80029d0 <LL_TIM_Init+0x130>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d003      	beq.n	80028e8 <LL_TIM_Init+0x48>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	4a3c      	ldr	r2, [pc, #240]	; (80029d4 <LL_TIM_Init+0x134>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d106      	bne.n	80028f6 <LL_TIM_Init+0x56>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	4313      	orrs	r3, r2
 80028f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	4a31      	ldr	r2, [pc, #196]	; (80029c0 <LL_TIM_Init+0x120>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d023      	beq.n	8002946 <LL_TIM_Init+0xa6>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002904:	d01f      	beq.n	8002946 <LL_TIM_Init+0xa6>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4a2e      	ldr	r2, [pc, #184]	; (80029c4 <LL_TIM_Init+0x124>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d01b      	beq.n	8002946 <LL_TIM_Init+0xa6>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	4a2d      	ldr	r2, [pc, #180]	; (80029c8 <LL_TIM_Init+0x128>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d017      	beq.n	8002946 <LL_TIM_Init+0xa6>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	4a2c      	ldr	r2, [pc, #176]	; (80029cc <LL_TIM_Init+0x12c>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d013      	beq.n	8002946 <LL_TIM_Init+0xa6>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	4a2b      	ldr	r2, [pc, #172]	; (80029d0 <LL_TIM_Init+0x130>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d00f      	beq.n	8002946 <LL_TIM_Init+0xa6>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	4a2b      	ldr	r2, [pc, #172]	; (80029d8 <LL_TIM_Init+0x138>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d00b      	beq.n	8002946 <LL_TIM_Init+0xa6>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	4a2a      	ldr	r2, [pc, #168]	; (80029dc <LL_TIM_Init+0x13c>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d007      	beq.n	8002946 <LL_TIM_Init+0xa6>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	4a29      	ldr	r2, [pc, #164]	; (80029e0 <LL_TIM_Init+0x140>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d003      	beq.n	8002946 <LL_TIM_Init+0xa6>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	4a24      	ldr	r2, [pc, #144]	; (80029d4 <LL_TIM_Init+0x134>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d106      	bne.n	8002954 <LL_TIM_Init+0xb4>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	4313      	orrs	r3, r2
 8002952:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	68fa      	ldr	r2, [r7, #12]
 8002958:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	4619      	mov	r1, r3
 8002960:	6878      	ldr	r0, [r7, #4]
 8002962:	f7ff ff1a 	bl	800279a <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	881b      	ldrh	r3, [r3, #0]
 800296a:	4619      	mov	r1, r3
 800296c:	6878      	ldr	r0, [r7, #4]
 800296e:	f7ff ff06 	bl	800277e <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	4a12      	ldr	r2, [pc, #72]	; (80029c0 <LL_TIM_Init+0x120>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d013      	beq.n	80029a2 <LL_TIM_Init+0x102>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	4a14      	ldr	r2, [pc, #80]	; (80029d0 <LL_TIM_Init+0x130>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d00f      	beq.n	80029a2 <LL_TIM_Init+0x102>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	4a14      	ldr	r2, [pc, #80]	; (80029d8 <LL_TIM_Init+0x138>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d00b      	beq.n	80029a2 <LL_TIM_Init+0x102>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	4a13      	ldr	r2, [pc, #76]	; (80029dc <LL_TIM_Init+0x13c>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d007      	beq.n	80029a2 <LL_TIM_Init+0x102>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	4a12      	ldr	r2, [pc, #72]	; (80029e0 <LL_TIM_Init+0x140>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d003      	beq.n	80029a2 <LL_TIM_Init+0x102>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	4a0d      	ldr	r2, [pc, #52]	; (80029d4 <LL_TIM_Init+0x134>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d105      	bne.n	80029ae <LL_TIM_Init+0x10e>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	691b      	ldr	r3, [r3, #16]
 80029a6:	4619      	mov	r1, r3
 80029a8:	6878      	ldr	r0, [r7, #4]
 80029aa:	f7ff ff04 	bl	80027b6 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f7ff ff65 	bl	800287e <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 80029b4:	2300      	movs	r3, #0
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3710      	adds	r7, #16
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	40012c00 	.word	0x40012c00
 80029c4:	40000400 	.word	0x40000400
 80029c8:	40000800 	.word	0x40000800
 80029cc:	40000c00 	.word	0x40000c00
 80029d0:	40013400 	.word	0x40013400
 80029d4:	40015000 	.word	0x40015000
 80029d8:	40014000 	.word	0x40014000
 80029dc:	40014400 	.word	0x40014400
 80029e0:	40014800 	.word	0x40014800

080029e4 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, const LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b086      	sub	sp, #24
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	60f8      	str	r0, [r7, #12]
 80029ec:	60b9      	str	r1, [r7, #8]
 80029ee:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80029fa:	d045      	beq.n	8002a88 <LL_TIM_OC_Init+0xa4>
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a02:	d848      	bhi.n	8002a96 <LL_TIM_OC_Init+0xb2>
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a0a:	d036      	beq.n	8002a7a <LL_TIM_OC_Init+0x96>
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a12:	d840      	bhi.n	8002a96 <LL_TIM_OC_Init+0xb2>
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a1a:	d027      	beq.n	8002a6c <LL_TIM_OC_Init+0x88>
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a22:	d838      	bhi.n	8002a96 <LL_TIM_OC_Init+0xb2>
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a2a:	d018      	beq.n	8002a5e <LL_TIM_OC_Init+0x7a>
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a32:	d830      	bhi.n	8002a96 <LL_TIM_OC_Init+0xb2>
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	2b01      	cmp	r3, #1
 8002a38:	d003      	beq.n	8002a42 <LL_TIM_OC_Init+0x5e>
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	2b10      	cmp	r3, #16
 8002a3e:	d007      	beq.n	8002a50 <LL_TIM_OC_Init+0x6c>
      break;
    case LL_TIM_CHANNEL_CH6:
      result = OC6Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8002a40:	e029      	b.n	8002a96 <LL_TIM_OC_Init+0xb2>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8002a42:	6879      	ldr	r1, [r7, #4]
 8002a44:	68f8      	ldr	r0, [r7, #12]
 8002a46:	f000 f82d 	bl	8002aa4 <OC1Config>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	75fb      	strb	r3, [r7, #23]
      break;
 8002a4e:	e023      	b.n	8002a98 <LL_TIM_OC_Init+0xb4>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8002a50:	6879      	ldr	r1, [r7, #4]
 8002a52:	68f8      	ldr	r0, [r7, #12]
 8002a54:	f000 f8ac 	bl	8002bb0 <OC2Config>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	75fb      	strb	r3, [r7, #23]
      break;
 8002a5c:	e01c      	b.n	8002a98 <LL_TIM_OC_Init+0xb4>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8002a5e:	6879      	ldr	r1, [r7, #4]
 8002a60:	68f8      	ldr	r0, [r7, #12]
 8002a62:	f000 f92f 	bl	8002cc4 <OC3Config>
 8002a66:	4603      	mov	r3, r0
 8002a68:	75fb      	strb	r3, [r7, #23]
      break;
 8002a6a:	e015      	b.n	8002a98 <LL_TIM_OC_Init+0xb4>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8002a6c:	6879      	ldr	r1, [r7, #4]
 8002a6e:	68f8      	ldr	r0, [r7, #12]
 8002a70:	f000 f9b2 	bl	8002dd8 <OC4Config>
 8002a74:	4603      	mov	r3, r0
 8002a76:	75fb      	strb	r3, [r7, #23]
      break;
 8002a78:	e00e      	b.n	8002a98 <LL_TIM_OC_Init+0xb4>
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 8002a7a:	6879      	ldr	r1, [r7, #4]
 8002a7c:	68f8      	ldr	r0, [r7, #12]
 8002a7e:	f000 fa35 	bl	8002eec <OC5Config>
 8002a82:	4603      	mov	r3, r0
 8002a84:	75fb      	strb	r3, [r7, #23]
      break;
 8002a86:	e007      	b.n	8002a98 <LL_TIM_OC_Init+0xb4>
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 8002a88:	6879      	ldr	r1, [r7, #4]
 8002a8a:	68f8      	ldr	r0, [r7, #12]
 8002a8c:	f000 fa98 	bl	8002fc0 <OC6Config>
 8002a90:	4603      	mov	r3, r0
 8002a92:	75fb      	strb	r3, [r7, #23]
      break;
 8002a94:	e000      	b.n	8002a98 <LL_TIM_OC_Init+0xb4>
      break;
 8002a96:	bf00      	nop
  }

  return result;
 8002a98:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3718      	adds	r7, #24
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}
	...

08002aa4 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b086      	sub	sp, #24
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
 8002aac:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6a1b      	ldr	r3, [r3, #32]
 8002ab2:	f023 0201 	bic.w	r2, r3, #1
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6a1b      	ldr	r3, [r3, #32]
 8002abe:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	699b      	ldr	r3, [r3, #24]
 8002aca:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	f023 0303 	bic.w	r3, r3, #3
 8002ad2:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ada:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ade:	683a      	ldr	r2, [r7, #0]
 8002ae0:	6812      	ldr	r2, [r2, #0]
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	f023 0202 	bic.w	r2, r3, #2
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	691b      	ldr	r3, [r3, #16]
 8002af0:	4313      	orrs	r3, r2
 8002af2:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	f023 0201 	bic.w	r2, r3, #1
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	4313      	orrs	r3, r2
 8002b00:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	4a24      	ldr	r2, [pc, #144]	; (8002b98 <OC1Config+0xf4>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d013      	beq.n	8002b32 <OC1Config+0x8e>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	4a23      	ldr	r2, [pc, #140]	; (8002b9c <OC1Config+0xf8>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d00f      	beq.n	8002b32 <OC1Config+0x8e>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	4a22      	ldr	r2, [pc, #136]	; (8002ba0 <OC1Config+0xfc>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d00b      	beq.n	8002b32 <OC1Config+0x8e>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	4a21      	ldr	r2, [pc, #132]	; (8002ba4 <OC1Config+0x100>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d007      	beq.n	8002b32 <OC1Config+0x8e>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	4a20      	ldr	r2, [pc, #128]	; (8002ba8 <OC1Config+0x104>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d003      	beq.n	8002b32 <OC1Config+0x8e>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	4a1f      	ldr	r2, [pc, #124]	; (8002bac <OC1Config+0x108>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d11e      	bne.n	8002b70 <OC1Config+0xcc>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	f023 0208 	bic.w	r2, r3, #8
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	695b      	ldr	r3, [r3, #20]
 8002b3c:	009b      	lsls	r3, r3, #2
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	f023 0204 	bic.w	r2, r3, #4
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	009b      	lsls	r3, r3, #2
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	699b      	ldr	r3, [r3, #24]
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	69db      	ldr	r3, [r3, #28]
 8002b6a:	005b      	lsls	r3, r3, #1
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	693a      	ldr	r2, [r7, #16]
 8002b74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	68fa      	ldr	r2, [r7, #12]
 8002b7a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	68db      	ldr	r3, [r3, #12]
 8002b80:	4619      	mov	r1, r3
 8002b82:	6878      	ldr	r0, [r7, #4]
 8002b84:	f7ff fe25 	bl	80027d2 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	697a      	ldr	r2, [r7, #20]
 8002b8c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002b8e:	2300      	movs	r3, #0
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	3718      	adds	r7, #24
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}
 8002b98:	40012c00 	.word	0x40012c00
 8002b9c:	40013400 	.word	0x40013400
 8002ba0:	40014000 	.word	0x40014000
 8002ba4:	40014400 	.word	0x40014400
 8002ba8:	40014800 	.word	0x40014800
 8002bac:	40015000 	.word	0x40015000

08002bb0 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b086      	sub	sp, #24
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
 8002bb8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6a1b      	ldr	r3, [r3, #32]
 8002bbe:	f023 0210 	bic.w	r2, r3, #16
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6a1b      	ldr	r3, [r3, #32]
 8002bca:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	699b      	ldr	r3, [r3, #24]
 8002bd6:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bde:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002be6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002bea:	683a      	ldr	r2, [r7, #0]
 8002bec:	6812      	ldr	r2, [r2, #0]
 8002bee:	0212      	lsls	r2, r2, #8
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	f023 0220 	bic.w	r2, r3, #32
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	691b      	ldr	r3, [r3, #16]
 8002bfe:	011b      	lsls	r3, r3, #4
 8002c00:	4313      	orrs	r3, r2
 8002c02:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	f023 0210 	bic.w	r2, r3, #16
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	011b      	lsls	r3, r3, #4
 8002c10:	4313      	orrs	r3, r2
 8002c12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	4a25      	ldr	r2, [pc, #148]	; (8002cac <OC2Config+0xfc>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d013      	beq.n	8002c44 <OC2Config+0x94>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	4a24      	ldr	r2, [pc, #144]	; (8002cb0 <OC2Config+0x100>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d00f      	beq.n	8002c44 <OC2Config+0x94>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	4a23      	ldr	r2, [pc, #140]	; (8002cb4 <OC2Config+0x104>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d00b      	beq.n	8002c44 <OC2Config+0x94>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	4a22      	ldr	r2, [pc, #136]	; (8002cb8 <OC2Config+0x108>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d007      	beq.n	8002c44 <OC2Config+0x94>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	4a21      	ldr	r2, [pc, #132]	; (8002cbc <OC2Config+0x10c>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d003      	beq.n	8002c44 <OC2Config+0x94>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	4a20      	ldr	r2, [pc, #128]	; (8002cc0 <OC2Config+0x110>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d11f      	bne.n	8002c84 <OC2Config+0xd4>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	695b      	ldr	r3, [r3, #20]
 8002c4e:	019b      	lsls	r3, r3, #6
 8002c50:	4313      	orrs	r3, r2
 8002c52:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	019b      	lsls	r3, r3, #6
 8002c60:	4313      	orrs	r3, r2
 8002c62:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	699b      	ldr	r3, [r3, #24]
 8002c6e:	009b      	lsls	r3, r3, #2
 8002c70:	4313      	orrs	r3, r2
 8002c72:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	69db      	ldr	r3, [r3, #28]
 8002c7e:	00db      	lsls	r3, r3, #3
 8002c80:	4313      	orrs	r3, r2
 8002c82:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	693a      	ldr	r2, [r7, #16]
 8002c88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	68fa      	ldr	r2, [r7, #12]
 8002c8e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	4619      	mov	r1, r3
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	f7ff fda9 	bl	80027ee <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	697a      	ldr	r2, [r7, #20]
 8002ca0:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002ca2:	2300      	movs	r3, #0
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	3718      	adds	r7, #24
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}
 8002cac:	40012c00 	.word	0x40012c00
 8002cb0:	40013400 	.word	0x40013400
 8002cb4:	40014000 	.word	0x40014000
 8002cb8:	40014400 	.word	0x40014400
 8002cbc:	40014800 	.word	0x40014800
 8002cc0:	40015000 	.word	0x40015000

08002cc4 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b086      	sub	sp, #24
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
 8002ccc:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6a1b      	ldr	r3, [r3, #32]
 8002cd2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6a1b      	ldr	r3, [r3, #32]
 8002cde:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	69db      	ldr	r3, [r3, #28]
 8002cea:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	f023 0303 	bic.w	r3, r3, #3
 8002cf2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cfe:	683a      	ldr	r2, [r7, #0]
 8002d00:	6812      	ldr	r2, [r2, #0]
 8002d02:	4313      	orrs	r3, r2
 8002d04:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	691b      	ldr	r3, [r3, #16]
 8002d10:	021b      	lsls	r3, r3, #8
 8002d12:	4313      	orrs	r3, r2
 8002d14:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	021b      	lsls	r3, r3, #8
 8002d22:	4313      	orrs	r3, r2
 8002d24:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	4a25      	ldr	r2, [pc, #148]	; (8002dc0 <OC3Config+0xfc>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d013      	beq.n	8002d56 <OC3Config+0x92>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	4a24      	ldr	r2, [pc, #144]	; (8002dc4 <OC3Config+0x100>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d00f      	beq.n	8002d56 <OC3Config+0x92>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	4a23      	ldr	r2, [pc, #140]	; (8002dc8 <OC3Config+0x104>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d00b      	beq.n	8002d56 <OC3Config+0x92>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	4a22      	ldr	r2, [pc, #136]	; (8002dcc <OC3Config+0x108>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d007      	beq.n	8002d56 <OC3Config+0x92>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4a21      	ldr	r2, [pc, #132]	; (8002dd0 <OC3Config+0x10c>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d003      	beq.n	8002d56 <OC3Config+0x92>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	4a20      	ldr	r2, [pc, #128]	; (8002dd4 <OC3Config+0x110>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d11f      	bne.n	8002d96 <OC3Config+0xd2>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	695b      	ldr	r3, [r3, #20]
 8002d60:	029b      	lsls	r3, r3, #10
 8002d62:	4313      	orrs	r3, r2
 8002d64:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	029b      	lsls	r3, r3, #10
 8002d72:	4313      	orrs	r3, r2
 8002d74:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	699b      	ldr	r3, [r3, #24]
 8002d80:	011b      	lsls	r3, r3, #4
 8002d82:	4313      	orrs	r3, r2
 8002d84:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	69db      	ldr	r3, [r3, #28]
 8002d90:	015b      	lsls	r3, r3, #5
 8002d92:	4313      	orrs	r3, r2
 8002d94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	693a      	ldr	r2, [r7, #16]
 8002d9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	68fa      	ldr	r2, [r7, #12]
 8002da0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	68db      	ldr	r3, [r3, #12]
 8002da6:	4619      	mov	r1, r3
 8002da8:	6878      	ldr	r0, [r7, #4]
 8002daa:	f7ff fd2e 	bl	800280a <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	697a      	ldr	r2, [r7, #20]
 8002db2:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002db4:	2300      	movs	r3, #0
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	3718      	adds	r7, #24
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}
 8002dbe:	bf00      	nop
 8002dc0:	40012c00 	.word	0x40012c00
 8002dc4:	40013400 	.word	0x40013400
 8002dc8:	40014000 	.word	0x40014000
 8002dcc:	40014400 	.word	0x40014400
 8002dd0:	40014800 	.word	0x40014800
 8002dd4:	40015000 	.word	0x40015000

08002dd8 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b086      	sub	sp, #24
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
 8002de0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6a1b      	ldr	r3, [r3, #32]
 8002de6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6a1b      	ldr	r3, [r3, #32]
 8002df2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	69db      	ldr	r3, [r3, #28]
 8002dfe:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e12:	683a      	ldr	r2, [r7, #0]
 8002e14:	6812      	ldr	r2, [r2, #0]
 8002e16:	0212      	lsls	r2, r2, #8
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	691b      	ldr	r3, [r3, #16]
 8002e26:	031b      	lsls	r3, r3, #12
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	031b      	lsls	r3, r3, #12
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	4a25      	ldr	r2, [pc, #148]	; (8002ed4 <OC4Config+0xfc>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d013      	beq.n	8002e6c <OC4Config+0x94>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	4a24      	ldr	r2, [pc, #144]	; (8002ed8 <OC4Config+0x100>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d00f      	beq.n	8002e6c <OC4Config+0x94>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	4a23      	ldr	r2, [pc, #140]	; (8002edc <OC4Config+0x104>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d00b      	beq.n	8002e6c <OC4Config+0x94>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	4a22      	ldr	r2, [pc, #136]	; (8002ee0 <OC4Config+0x108>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d007      	beq.n	8002e6c <OC4Config+0x94>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	4a21      	ldr	r2, [pc, #132]	; (8002ee4 <OC4Config+0x10c>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d003      	beq.n	8002e6c <OC4Config+0x94>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	4a20      	ldr	r2, [pc, #128]	; (8002ee8 <OC4Config+0x110>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d11f      	bne.n	8002eac <OC4Config+0xd4>
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC4NP, TIM_OCInitStruct->OCNPolarity << 14U);
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	695b      	ldr	r3, [r3, #20]
 8002e76:	039b      	lsls	r3, r3, #14
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC4NE, TIM_OCInitStruct->OCNState << 14U);
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	039b      	lsls	r3, r3, #14
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	699b      	ldr	r3, [r3, #24]
 8002e96:	019b      	lsls	r3, r3, #6
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4N, TIM_OCInitStruct->OCNIdleState << 7U);
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	69db      	ldr	r3, [r3, #28]
 8002ea6:	01db      	lsls	r3, r3, #7
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	693a      	ldr	r2, [r7, #16]
 8002eb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	68fa      	ldr	r2, [r7, #12]
 8002eb6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	68db      	ldr	r3, [r3, #12]
 8002ebc:	4619      	mov	r1, r3
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f7ff fcb1 	bl	8002826 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	697a      	ldr	r2, [r7, #20]
 8002ec8:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002eca:	2300      	movs	r3, #0
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	3718      	adds	r7, #24
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}
 8002ed4:	40012c00 	.word	0x40012c00
 8002ed8:	40013400 	.word	0x40013400
 8002edc:	40014000 	.word	0x40014000
 8002ee0:	40014400 	.word	0x40014400
 8002ee4:	40014800 	.word	0x40014800
 8002ee8:	40015000 	.word	0x40015000

08002eec <OC5Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC5Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b084      	sub	sp, #16
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
 8002ef4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC5E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6a1b      	ldr	r3, [r3, #32]
 8002efa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6a1b      	ldr	r3, [r3, #32]
 8002f06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f0c:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f18:	683a      	ldr	r2, [r7, #0]
 8002f1a:	6812      	ldr	r2, [r2, #0]
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	691b      	ldr	r3, [r3, #16]
 8002f2a:	041b      	lsls	r3, r3, #16
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	041b      	lsls	r3, r3, #16
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	4a19      	ldr	r2, [pc, #100]	; (8002fa8 <OC5Config+0xbc>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d013      	beq.n	8002f70 <OC5Config+0x84>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	4a18      	ldr	r2, [pc, #96]	; (8002fac <OC5Config+0xc0>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d00f      	beq.n	8002f70 <OC5Config+0x84>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	4a17      	ldr	r2, [pc, #92]	; (8002fb0 <OC5Config+0xc4>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d00b      	beq.n	8002f70 <OC5Config+0x84>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	4a16      	ldr	r2, [pc, #88]	; (8002fb4 <OC5Config+0xc8>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d007      	beq.n	8002f70 <OC5Config+0x84>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	4a15      	ldr	r2, [pc, #84]	; (8002fb8 <OC5Config+0xcc>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d003      	beq.n	8002f70 <OC5Config+0x84>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	4a14      	ldr	r2, [pc, #80]	; (8002fbc <OC5Config+0xd0>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d109      	bne.n	8002f84 <OC5Config+0x98>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	699b      	ldr	r3, [r3, #24]
 8002f7c:	021b      	lsls	r3, r3, #8
 8002f7e:	431a      	orrs	r2, r3
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	605a      	str	r2, [r3, #4]

  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	68ba      	ldr	r2, [r7, #8]
 8002f88:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	68db      	ldr	r3, [r3, #12]
 8002f8e:	4619      	mov	r1, r3
 8002f90:	6878      	ldr	r0, [r7, #4]
 8002f92:	f7ff fc56 	bl	8002842 <LL_TIM_OC_SetCompareCH5>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	68fa      	ldr	r2, [r7, #12]
 8002f9a:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002f9c:	2300      	movs	r3, #0
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3710      	adds	r7, #16
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	40012c00 	.word	0x40012c00
 8002fac:	40013400 	.word	0x40013400
 8002fb0:	40014000 	.word	0x40014000
 8002fb4:	40014400 	.word	0x40014400
 8002fb8:	40014800 	.word	0x40014800
 8002fbc:	40015000 	.word	0x40015000

08002fc0 <OC6Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC6Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b084      	sub	sp, #16
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
 8002fc8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6a1b      	ldr	r3, [r3, #32]
 8002fce:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6a1b      	ldr	r3, [r3, #32]
 8002fda:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fe0:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002fe8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002fec:	683a      	ldr	r2, [r7, #0]
 8002fee:	6812      	ldr	r2, [r2, #0]
 8002ff0:	0212      	lsls	r2, r2, #8
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	691b      	ldr	r3, [r3, #16]
 8003000:	051b      	lsls	r3, r3, #20
 8003002:	4313      	orrs	r3, r2
 8003004:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	051b      	lsls	r3, r3, #20
 8003012:	4313      	orrs	r3, r2
 8003014:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	4a18      	ldr	r2, [pc, #96]	; (800307c <OC6Config+0xbc>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d013      	beq.n	8003046 <OC6Config+0x86>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	4a17      	ldr	r2, [pc, #92]	; (8003080 <OC6Config+0xc0>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d00f      	beq.n	8003046 <OC6Config+0x86>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	4a16      	ldr	r2, [pc, #88]	; (8003084 <OC6Config+0xc4>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d00b      	beq.n	8003046 <OC6Config+0x86>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	4a15      	ldr	r2, [pc, #84]	; (8003088 <OC6Config+0xc8>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d007      	beq.n	8003046 <OC6Config+0x86>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	4a14      	ldr	r2, [pc, #80]	; (800308c <OC6Config+0xcc>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d003      	beq.n	8003046 <OC6Config+0x86>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	4a13      	ldr	r2, [pc, #76]	; (8003090 <OC6Config+0xd0>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d109      	bne.n	800305a <OC6Config+0x9a>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	699b      	ldr	r3, [r3, #24]
 8003052:	029b      	lsls	r3, r3, #10
 8003054:	431a      	orrs	r2, r3
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	605a      	str	r2, [r3, #4]
  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	68ba      	ldr	r2, [r7, #8]
 800305e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	68db      	ldr	r3, [r3, #12]
 8003064:	4619      	mov	r1, r3
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f7ff fbfb 	bl	8002862 <LL_TIM_OC_SetCompareCH6>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	68fa      	ldr	r2, [r7, #12]
 8003070:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003072:	2300      	movs	r3, #0
}
 8003074:	4618      	mov	r0, r3
 8003076:	3710      	adds	r7, #16
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}
 800307c:	40012c00 	.word	0x40012c00
 8003080:	40013400 	.word	0x40013400
 8003084:	40014000 	.word	0x40014000
 8003088:	40014400 	.word	0x40014400
 800308c:	40014800 	.word	0x40014800
 8003090:	40015000 	.word	0x40015000

08003094 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8003094:	b480      	push	{r7}
 8003096:	b083      	sub	sp, #12
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 800309c:	4a04      	ldr	r2, [pc, #16]	; (80030b0 <LL_SetSystemCoreClock+0x1c>)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6013      	str	r3, [r2, #0]
}
 80030a2:	bf00      	nop
 80030a4:	370c      	adds	r7, #12
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr
 80030ae:	bf00      	nop
 80030b0:	20000000 	.word	0x20000000

080030b4 <LL_TIM_OC_SetCompareCH1>:
{
 80030b4:	b480      	push	{r7}
 80030b6:	b083      	sub	sp, #12
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
 80030bc:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	683a      	ldr	r2, [r7, #0]
 80030c2:	635a      	str	r2, [r3, #52]	; 0x34
}
 80030c4:	bf00      	nop
 80030c6:	370c      	adds	r7, #12
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr

080030d0 <backlight_set_brightness>:
#include "backlight.h"
#include "stm32g4xx_ll_tim.h"

void backlight_set_brightness(uint32_t percentage)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b082      	sub	sp, #8
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
    LL_TIM_OC_SetCompareCH1(TIM4, percentage);
 80030d8:	6879      	ldr	r1, [r7, #4]
 80030da:	4803      	ldr	r0, [pc, #12]	; (80030e8 <backlight_set_brightness+0x18>)
 80030dc:	f7ff ffea 	bl	80030b4 <LL_TIM_OC_SetCompareCH1>
}
 80030e0:	bf00      	nop
 80030e2:	3708      	adds	r7, #8
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}
 80030e8:	40000800 	.word	0x40000800

080030ec <LL_GPIO_SetOutputPin>:
{
 80030ec:	b480      	push	{r7}
 80030ee:	b083      	sub	sp, #12
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
 80030f4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	683a      	ldr	r2, [r7, #0]
 80030fa:	619a      	str	r2, [r3, #24]
}
 80030fc:	bf00      	nop
 80030fe:	370c      	adds	r7, #12
 8003100:	46bd      	mov	sp, r7
 8003102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003106:	4770      	bx	lr

08003108 <LL_GPIO_ResetOutputPin>:
{
 8003108:	b480      	push	{r7}
 800310a:	b083      	sub	sp, #12
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
 8003110:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	683a      	ldr	r2, [r7, #0]
 8003116:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003118:	bf00      	nop
 800311a:	370c      	adds	r7, #12
 800311c:	46bd      	mov	sp, r7
 800311e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003122:	4770      	bx	lr

08003124 <LL_DMA_EnableChannel>:
{
 8003124:	b480      	push	{r7}
 8003126:	b085      	sub	sp, #20
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
 800312c:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_EN);
 8003132:	4a0c      	ldr	r2, [pc, #48]	; (8003164 <LL_DMA_EnableChannel+0x40>)
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	4413      	add	r3, r2
 8003138:	781b      	ldrb	r3, [r3, #0]
 800313a:	461a      	mov	r2, r3
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	4413      	add	r3, r2
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4908      	ldr	r1, [pc, #32]	; (8003164 <LL_DMA_EnableChannel+0x40>)
 8003144:	683a      	ldr	r2, [r7, #0]
 8003146:	440a      	add	r2, r1
 8003148:	7812      	ldrb	r2, [r2, #0]
 800314a:	4611      	mov	r1, r2
 800314c:	68fa      	ldr	r2, [r7, #12]
 800314e:	440a      	add	r2, r1
 8003150:	f043 0301 	orr.w	r3, r3, #1
 8003154:	6013      	str	r3, [r2, #0]
}
 8003156:	bf00      	nop
 8003158:	3714      	adds	r7, #20
 800315a:	46bd      	mov	sp, r7
 800315c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003160:	4770      	bx	lr
 8003162:	bf00      	nop
 8003164:	080038b8 	.word	0x080038b8

08003168 <LL_DMA_DisableChannel>:
{
 8003168:	b480      	push	{r7}
 800316a:	b085      	sub	sp, #20
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
 8003170:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	60fb      	str	r3, [r7, #12]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_EN);
 8003176:	4a0c      	ldr	r2, [pc, #48]	; (80031a8 <LL_DMA_DisableChannel+0x40>)
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	4413      	add	r3, r2
 800317c:	781b      	ldrb	r3, [r3, #0]
 800317e:	461a      	mov	r2, r3
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	4413      	add	r3, r2
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4908      	ldr	r1, [pc, #32]	; (80031a8 <LL_DMA_DisableChannel+0x40>)
 8003188:	683a      	ldr	r2, [r7, #0]
 800318a:	440a      	add	r2, r1
 800318c:	7812      	ldrb	r2, [r2, #0]
 800318e:	4611      	mov	r1, r2
 8003190:	68fa      	ldr	r2, [r7, #12]
 8003192:	440a      	add	r2, r1
 8003194:	f023 0301 	bic.w	r3, r3, #1
 8003198:	6013      	str	r3, [r2, #0]
}
 800319a:	bf00      	nop
 800319c:	3714      	adds	r7, #20
 800319e:	46bd      	mov	sp, r7
 80031a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a4:	4770      	bx	lr
 80031a6:	bf00      	nop
 80031a8:	080038b8 	.word	0x080038b8

080031ac <LL_DMA_IsEnabledChannel>:
{
 80031ac:	b480      	push	{r7}
 80031ae:	b085      	sub	sp, #20
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
 80031b4:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	60fb      	str	r3, [r7, #12]
  return ((READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR,
 80031ba:	4a0a      	ldr	r2, [pc, #40]	; (80031e4 <LL_DMA_IsEnabledChannel+0x38>)
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	4413      	add	r3, r2
 80031c0:	781b      	ldrb	r3, [r3, #0]
 80031c2:	461a      	mov	r2, r3
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	4413      	add	r3, r2
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 0301 	and.w	r3, r3, #1
                    DMA_CCR_EN) == (DMA_CCR_EN)) ? 1UL : 0UL);
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d101      	bne.n	80031d6 <LL_DMA_IsEnabledChannel+0x2a>
 80031d2:	2301      	movs	r3, #1
 80031d4:	e000      	b.n	80031d8 <LL_DMA_IsEnabledChannel+0x2c>
 80031d6:	2300      	movs	r3, #0
}
 80031d8:	4618      	mov	r0, r3
 80031da:	3714      	adds	r7, #20
 80031dc:	46bd      	mov	sp, r7
 80031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e2:	4770      	bx	lr
 80031e4:	080038b8 	.word	0x080038b8

080031e8 <LL_DMA_SetDataLength>:
{
 80031e8:	b480      	push	{r7}
 80031ea:	b087      	sub	sp, #28
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	60f8      	str	r0, [r7, #12]
 80031f0:	60b9      	str	r1, [r7, #8]
 80031f2:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CNDTR,
 80031f8:	4a0d      	ldr	r2, [pc, #52]	; (8003230 <LL_DMA_SetDataLength+0x48>)
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	4413      	add	r3, r2
 80031fe:	781b      	ldrb	r3, [r3, #0]
 8003200:	461a      	mov	r2, r3
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	4413      	add	r3, r2
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	0c1b      	lsrs	r3, r3, #16
 800320a:	041b      	lsls	r3, r3, #16
 800320c:	4908      	ldr	r1, [pc, #32]	; (8003230 <LL_DMA_SetDataLength+0x48>)
 800320e:	68ba      	ldr	r2, [r7, #8]
 8003210:	440a      	add	r2, r1
 8003212:	7812      	ldrb	r2, [r2, #0]
 8003214:	4611      	mov	r1, r2
 8003216:	697a      	ldr	r2, [r7, #20]
 8003218:	440a      	add	r2, r1
 800321a:	4611      	mov	r1, r2
 800321c:	687a      	ldr	r2, [r7, #4]
 800321e:	4313      	orrs	r3, r2
 8003220:	604b      	str	r3, [r1, #4]
}
 8003222:	bf00      	nop
 8003224:	371c      	adds	r7, #28
 8003226:	46bd      	mov	sp, r7
 8003228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322c:	4770      	bx	lr
 800322e:	bf00      	nop
 8003230:	080038b8 	.word	0x080038b8

08003234 <LL_DMA_SetM2MSrcAddress>:
{
 8003234:	b480      	push	{r7}
 8003236:	b087      	sub	sp, #28
 8003238:	af00      	add	r7, sp, #0
 800323a:	60f8      	str	r0, [r7, #12]
 800323c:	60b9      	str	r1, [r7, #8]
 800323e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	617b      	str	r3, [r7, #20]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CPAR, MemoryAddress);
 8003244:	4a07      	ldr	r2, [pc, #28]	; (8003264 <LL_DMA_SetM2MSrcAddress+0x30>)
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	4413      	add	r3, r2
 800324a:	781b      	ldrb	r3, [r3, #0]
 800324c:	461a      	mov	r2, r3
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	4413      	add	r3, r2
 8003252:	461a      	mov	r2, r3
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6093      	str	r3, [r2, #8]
}
 8003258:	bf00      	nop
 800325a:	371c      	adds	r7, #28
 800325c:	46bd      	mov	sp, r7
 800325e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003262:	4770      	bx	lr
 8003264:	080038b8 	.word	0x080038b8

08003268 <LL_DMA_SetM2MDstAddress>:
{
 8003268:	b480      	push	{r7}
 800326a:	b087      	sub	sp, #28
 800326c:	af00      	add	r7, sp, #0
 800326e:	60f8      	str	r0, [r7, #12]
 8003270:	60b9      	str	r1, [r7, #8]
 8003272:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	617b      	str	r3, [r7, #20]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CMAR, MemoryAddress);
 8003278:	4a07      	ldr	r2, [pc, #28]	; (8003298 <LL_DMA_SetM2MDstAddress+0x30>)
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	4413      	add	r3, r2
 800327e:	781b      	ldrb	r3, [r3, #0]
 8003280:	461a      	mov	r2, r3
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	4413      	add	r3, r2
 8003286:	461a      	mov	r2, r3
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	60d3      	str	r3, [r2, #12]
}
 800328c:	bf00      	nop
 800328e:	371c      	adds	r7, #28
 8003290:	46bd      	mov	sp, r7
 8003292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003296:	4770      	bx	lr
 8003298:	080038b8 	.word	0x080038b8

0800329c <LL_DMA_IsActiveFlag_TC1>:
  * @rmtoll ISR          TCIF1         LL_DMA_IsActiveFlag_TC1
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC1(DMA_TypeDef *DMAx)
{
 800329c:	b480      	push	{r7}
 800329e:	b083      	sub	sp, #12
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF1) == (DMA_ISR_TCIF1)) ? 1UL : 0UL);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 0302 	and.w	r3, r3, #2
 80032ac:	2b02      	cmp	r3, #2
 80032ae:	d101      	bne.n	80032b4 <LL_DMA_IsActiveFlag_TC1+0x18>
 80032b0:	2301      	movs	r3, #1
 80032b2:	e000      	b.n	80032b6 <LL_DMA_IsActiveFlag_TC1+0x1a>
 80032b4:	2300      	movs	r3, #0
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	370c      	adds	r7, #12
 80032ba:	46bd      	mov	sp, r7
 80032bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c0:	4770      	bx	lr

080032c2 <LL_DMA_ClearFlag_TC1>:
  * @rmtoll IFCR         CTCIF1        LL_DMA_ClearFlag_TC1
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC1(DMA_TypeDef *DMAx)
{
 80032c2:	b480      	push	{r7}
 80032c4:	b083      	sub	sp, #12
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF1);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2202      	movs	r2, #2
 80032ce:	605a      	str	r2, [r3, #4]
}
 80032d0:	bf00      	nop
 80032d2:	370c      	adds	r7, #12
 80032d4:	46bd      	mov	sp, r7
 80032d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032da:	4770      	bx	lr

080032dc <ILI9341_init>:

#define FMC_BANK1_REG  ((uint16_t *)  0x60000000)
#define FMC_BANK1_MEM  ((uint16_t *) (0x60000000 | 0x0010000))

void ILI9341_init(void)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b082      	sub	sp, #8
 80032e0:	af00      	add	r7, sp, #0
    // ILI9341 Init
    ILI9341_hard_reset();
 80032e2:	f000 f8bf 	bl	8003464 <ILI9341_hard_reset>
    ILI9341_interface_control(0x49, 0x00, 0x20);
 80032e6:	2220      	movs	r2, #32
 80032e8:	2100      	movs	r1, #0
 80032ea:	2049      	movs	r0, #73	; 0x49
 80032ec:	f000 f8ce 	bl	800348c <ILI9341_interface_control>
    ILI9341_memory_access_control(0x60);
 80032f0:	2060      	movs	r0, #96	; 0x60
 80032f2:	f000 f8e7 	bl	80034c4 <ILI9341_memory_access_control>
    ILI9341_sleep_out();
 80032f6:	f000 f940 	bl	800357a <ILI9341_sleep_out>
    ILI9341_normal_display_mode_on();
 80032fa:	f000 f948 	bl	800358e <ILI9341_normal_display_mode_on>
    ILI9341_pixel_format_set(0x55);
 80032fe:	2055      	movs	r0, #85	; 0x55
 8003300:	f000 f94c 	bl	800359c <ILI9341_pixel_format_set>
    ILI9341_display_on();
 8003304:	f000 f95b 	bl	80035be <ILI9341_display_on>

    // DMA Init
    // Send the first DMA to set the TC1 flag. This sends NOP to ILI9341.
    uint16_t nop = 0x0000;
 8003308:	2300      	movs	r3, #0
 800330a:	80fb      	strh	r3, [r7, #6]

    // Disable the DMA channel and wait for it to properly disable.
    LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_1);
 800330c:	2100      	movs	r1, #0
 800330e:	481e      	ldr	r0, [pc, #120]	; (8003388 <ILI9341_init+0xac>)
 8003310:	f7ff ff2a 	bl	8003168 <LL_DMA_DisableChannel>
    while(LL_DMA_IsEnabledChannel(DMA1, LL_DMA_CHANNEL_1));
 8003314:	bf00      	nop
 8003316:	2100      	movs	r1, #0
 8003318:	481b      	ldr	r0, [pc, #108]	; (8003388 <ILI9341_init+0xac>)
 800331a:	f7ff ff47 	bl	80031ac <LL_DMA_IsEnabledChannel>
 800331e:	4603      	mov	r3, r0
 8003320:	2b00      	cmp	r3, #0
 8003322:	d1f8      	bne.n	8003316 <ILI9341_init+0x3a>

    LL_DMA_SetM2MSrcAddress(DMA1, LL_DMA_CHANNEL_1, (uint32_t) &nop);
 8003324:	1dbb      	adds	r3, r7, #6
 8003326:	461a      	mov	r2, r3
 8003328:	2100      	movs	r1, #0
 800332a:	4817      	ldr	r0, [pc, #92]	; (8003388 <ILI9341_init+0xac>)
 800332c:	f7ff ff82 	bl	8003234 <LL_DMA_SetM2MSrcAddress>
    LL_DMA_SetM2MDstAddress(DMA1, LL_DMA_CHANNEL_1, (uint32_t) FMC_BANK1_REG);
 8003330:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8003334:	2100      	movs	r1, #0
 8003336:	4814      	ldr	r0, [pc, #80]	; (8003388 <ILI9341_init+0xac>)
 8003338:	f7ff ff96 	bl	8003268 <LL_DMA_SetM2MDstAddress>
    LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_1, 1);
 800333c:	2201      	movs	r2, #1
 800333e:	2100      	movs	r1, #0
 8003340:	4811      	ldr	r0, [pc, #68]	; (8003388 <ILI9341_init+0xac>)
 8003342:	f7ff ff51 	bl	80031e8 <LL_DMA_SetDataLength>

    // Start DMA transfer
    LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_1);
 8003346:	2100      	movs	r1, #0
 8003348:	480f      	ldr	r0, [pc, #60]	; (8003388 <ILI9341_init+0xac>)
 800334a:	f7ff feeb 	bl	8003124 <LL_DMA_EnableChannel>

    // Wait for transfer to complete
    while(!LL_DMA_IsActiveFlag_TC1(DMA1));
 800334e:	bf00      	nop
 8003350:	480d      	ldr	r0, [pc, #52]	; (8003388 <ILI9341_init+0xac>)
 8003352:	f7ff ffa3 	bl	800329c <LL_DMA_IsActiveFlag_TC1>
 8003356:	4603      	mov	r3, r0
 8003358:	2b00      	cmp	r3, #0
 800335a:	d0f9      	beq.n	8003350 <ILI9341_init+0x74>

    // Disable the DMA channel and wait for it to properly disable.
    LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_1);
 800335c:	2100      	movs	r1, #0
 800335e:	480a      	ldr	r0, [pc, #40]	; (8003388 <ILI9341_init+0xac>)
 8003360:	f7ff ff02 	bl	8003168 <LL_DMA_DisableChannel>
    while(LL_DMA_IsEnabledChannel(DMA1, LL_DMA_CHANNEL_1));
 8003364:	bf00      	nop
 8003366:	2100      	movs	r1, #0
 8003368:	4807      	ldr	r0, [pc, #28]	; (8003388 <ILI9341_init+0xac>)
 800336a:	f7ff ff1f 	bl	80031ac <LL_DMA_IsEnabledChannel>
 800336e:	4603      	mov	r3, r0
 8003370:	2b00      	cmp	r3, #0
 8003372:	d1f8      	bne.n	8003366 <ILI9341_init+0x8a>

    // Set DMA destination address to FMC's memory.
    LL_DMA_SetM2MDstAddress(DMA1, LL_DMA_CHANNEL_1, (uint32_t) FMC_BANK1_MEM);
 8003374:	4a05      	ldr	r2, [pc, #20]	; (800338c <ILI9341_init+0xb0>)
 8003376:	2100      	movs	r1, #0
 8003378:	4803      	ldr	r0, [pc, #12]	; (8003388 <ILI9341_init+0xac>)
 800337a:	f7ff ff75 	bl	8003268 <LL_DMA_SetM2MDstAddress>
}
 800337e:	bf00      	nop
 8003380:	3708      	adds	r7, #8
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	40020000 	.word	0x40020000
 800338c:	60010000 	.word	0x60010000

08003390 <ILI9341_set_address>:

void ILI9341_set_address(uint16_t address)
{
 8003390:	b480      	push	{r7}
 8003392:	b083      	sub	sp, #12
 8003394:	af00      	add	r7, sp, #0
 8003396:	4603      	mov	r3, r0
 8003398:	80fb      	strh	r3, [r7, #6]
    *FMC_BANK1_REG = address;
 800339a:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 800339e:	88fb      	ldrh	r3, [r7, #6]
 80033a0:	8013      	strh	r3, [r2, #0]
    //__DSB();
}
 80033a2:	bf00      	nop
 80033a4:	370c      	adds	r7, #12
 80033a6:	46bd      	mov	sp, r7
 80033a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ac:	4770      	bx	lr
	...

080033b0 <ILI9341_send_data>:

void ILI9341_send_data(uint16_t *data, uint32_t length)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b085      	sub	sp, #20
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
 80033b8:	6039      	str	r1, [r7, #0]
    for (uint32_t i = 0; i < length; i++) {
 80033ba:	2300      	movs	r3, #0
 80033bc:	60fb      	str	r3, [r7, #12]
 80033be:	e009      	b.n	80033d4 <ILI9341_send_data+0x24>
        *FMC_BANK1_MEM = *(data + i);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	005b      	lsls	r3, r3, #1
 80033c4:	687a      	ldr	r2, [r7, #4]
 80033c6:	4413      	add	r3, r2
 80033c8:	4a08      	ldr	r2, [pc, #32]	; (80033ec <ILI9341_send_data+0x3c>)
 80033ca:	881b      	ldrh	r3, [r3, #0]
 80033cc:	8013      	strh	r3, [r2, #0]
    for (uint32_t i = 0; i < length; i++) {
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	3301      	adds	r3, #1
 80033d2:	60fb      	str	r3, [r7, #12]
 80033d4:	68fa      	ldr	r2, [r7, #12]
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	429a      	cmp	r2, r3
 80033da:	d3f1      	bcc.n	80033c0 <ILI9341_send_data+0x10>
        //__DSB();
    }
}
 80033dc:	bf00      	nop
 80033de:	bf00      	nop
 80033e0:	3714      	adds	r7, #20
 80033e2:	46bd      	mov	sp, r7
 80033e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e8:	4770      	bx	lr
 80033ea:	bf00      	nop
 80033ec:	60010000 	.word	0x60010000

080033f0 <ILI9341_send_data_DMA>:

void ILI9341_send_data_DMA(uint16_t *data, uint32_t length)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b082      	sub	sp, #8
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
 80033f8:	6039      	str	r1, [r7, #0]
    while(!LL_DMA_IsActiveFlag_TC1(DMA1));
 80033fa:	bf00      	nop
 80033fc:	4813      	ldr	r0, [pc, #76]	; (800344c <ILI9341_send_data_DMA+0x5c>)
 80033fe:	f7ff ff4d 	bl	800329c <LL_DMA_IsActiveFlag_TC1>
 8003402:	4603      	mov	r3, r0
 8003404:	2b00      	cmp	r3, #0
 8003406:	d0f9      	beq.n	80033fc <ILI9341_send_data_DMA+0xc>
    LL_DMA_ClearFlag_TC1(DMA1);
 8003408:	4810      	ldr	r0, [pc, #64]	; (800344c <ILI9341_send_data_DMA+0x5c>)
 800340a:	f7ff ff5a 	bl	80032c2 <LL_DMA_ClearFlag_TC1>
    LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_1);
 800340e:	2100      	movs	r1, #0
 8003410:	480e      	ldr	r0, [pc, #56]	; (800344c <ILI9341_send_data_DMA+0x5c>)
 8003412:	f7ff fea9 	bl	8003168 <LL_DMA_DisableChannel>
    while(LL_DMA_IsEnabledChannel(DMA1, LL_DMA_CHANNEL_1));
 8003416:	bf00      	nop
 8003418:	2100      	movs	r1, #0
 800341a:	480c      	ldr	r0, [pc, #48]	; (800344c <ILI9341_send_data_DMA+0x5c>)
 800341c:	f7ff fec6 	bl	80031ac <LL_DMA_IsEnabledChannel>
 8003420:	4603      	mov	r3, r0
 8003422:	2b00      	cmp	r3, #0
 8003424:	d1f8      	bne.n	8003418 <ILI9341_send_data_DMA+0x28>
    LL_DMA_SetM2MSrcAddress(DMA1, LL_DMA_CHANNEL_1, (uint32_t) data);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	461a      	mov	r2, r3
 800342a:	2100      	movs	r1, #0
 800342c:	4807      	ldr	r0, [pc, #28]	; (800344c <ILI9341_send_data_DMA+0x5c>)
 800342e:	f7ff ff01 	bl	8003234 <LL_DMA_SetM2MSrcAddress>
    LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_1, length);
 8003432:	683a      	ldr	r2, [r7, #0]
 8003434:	2100      	movs	r1, #0
 8003436:	4805      	ldr	r0, [pc, #20]	; (800344c <ILI9341_send_data_DMA+0x5c>)
 8003438:	f7ff fed6 	bl	80031e8 <LL_DMA_SetDataLength>
    LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_1);
 800343c:	2100      	movs	r1, #0
 800343e:	4803      	ldr	r0, [pc, #12]	; (800344c <ILI9341_send_data_DMA+0x5c>)
 8003440:	f7ff fe70 	bl	8003124 <LL_DMA_EnableChannel>
}
 8003444:	bf00      	nop
 8003446:	3708      	adds	r7, #8
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}
 800344c:	40020000 	.word	0x40020000

08003450 <ILI9341_is_DMA_ready>:

uint32_t ILI9341_is_DMA_ready(void)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	af00      	add	r7, sp, #0
    return LL_DMA_IsActiveFlag_TC1(DMA1);
 8003454:	4802      	ldr	r0, [pc, #8]	; (8003460 <ILI9341_is_DMA_ready+0x10>)
 8003456:	f7ff ff21 	bl	800329c <LL_DMA_IsActiveFlag_TC1>
 800345a:	4603      	mov	r3, r0
}
 800345c:	4618      	mov	r0, r3
 800345e:	bd80      	pop	{r7, pc}
 8003460:	40020000 	.word	0x40020000

08003464 <ILI9341_hard_reset>:

void ILI9341_hard_reset(void)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	af00      	add	r7, sp, #0
    LL_GPIO_ResetOutputPin(GPIOD, 0x01 << 3);
 8003468:	2108      	movs	r1, #8
 800346a:	4807      	ldr	r0, [pc, #28]	; (8003488 <ILI9341_hard_reset+0x24>)
 800346c:	f7ff fe4c 	bl	8003108 <LL_GPIO_ResetOutputPin>
    delay_millis(10);
 8003470:	200a      	movs	r0, #10
 8003472:	f000 f9c5 	bl	8003800 <delay_millis>
    LL_GPIO_SetOutputPin(GPIOD, 0x01 << 3);
 8003476:	2108      	movs	r1, #8
 8003478:	4803      	ldr	r0, [pc, #12]	; (8003488 <ILI9341_hard_reset+0x24>)
 800347a:	f7ff fe37 	bl	80030ec <LL_GPIO_SetOutputPin>
    delay_millis(120);
 800347e:	2078      	movs	r0, #120	; 0x78
 8003480:	f000 f9be 	bl	8003800 <delay_millis>
}
 8003484:	bf00      	nop
 8003486:	bd80      	pop	{r7, pc}
 8003488:	48000c00 	.word	0x48000c00

0800348c <ILI9341_interface_control>:

void ILI9341_interface_control(uint16_t param_1, uint16_t param_2, uint16_t param_3)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b084      	sub	sp, #16
 8003490:	af00      	add	r7, sp, #0
 8003492:	4603      	mov	r3, r0
 8003494:	80fb      	strh	r3, [r7, #6]
 8003496:	460b      	mov	r3, r1
 8003498:	80bb      	strh	r3, [r7, #4]
 800349a:	4613      	mov	r3, r2
 800349c:	807b      	strh	r3, [r7, #2]
    uint16_t param[3] = {param_1, param_2, param_3};
 800349e:	88fb      	ldrh	r3, [r7, #6]
 80034a0:	813b      	strh	r3, [r7, #8]
 80034a2:	88bb      	ldrh	r3, [r7, #4]
 80034a4:	817b      	strh	r3, [r7, #10]
 80034a6:	887b      	ldrh	r3, [r7, #2]
 80034a8:	81bb      	strh	r3, [r7, #12]
    ILI9341_set_address(ILI9341_INTERFACE_CONTROL);
 80034aa:	20f6      	movs	r0, #246	; 0xf6
 80034ac:	f7ff ff70 	bl	8003390 <ILI9341_set_address>
    ILI9341_send_data(param, 3);
 80034b0:	f107 0308 	add.w	r3, r7, #8
 80034b4:	2103      	movs	r1, #3
 80034b6:	4618      	mov	r0, r3
 80034b8:	f7ff ff7a 	bl	80033b0 <ILI9341_send_data>
}
 80034bc:	bf00      	nop
 80034be:	3710      	adds	r7, #16
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd80      	pop	{r7, pc}

080034c4 <ILI9341_memory_access_control>:

void ILI9341_memory_access_control(uint16_t param)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b082      	sub	sp, #8
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	4603      	mov	r3, r0
 80034cc:	80fb      	strh	r3, [r7, #6]
    ILI9341_set_address(ILI9341_MEMORY_ACCESS_CONTROL);
 80034ce:	2036      	movs	r0, #54	; 0x36
 80034d0:	f7ff ff5e 	bl	8003390 <ILI9341_set_address>
    ILI9341_send_data(&param, 1);
 80034d4:	1dbb      	adds	r3, r7, #6
 80034d6:	2101      	movs	r1, #1
 80034d8:	4618      	mov	r0, r3
 80034da:	f7ff ff69 	bl	80033b0 <ILI9341_send_data>
}
 80034de:	bf00      	nop
 80034e0:	3708      	adds	r7, #8
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}

080034e6 <ILI9341_column_address_set>:

void ILI9341_column_address_set(uint16_t param_1, uint16_t param_2)
{
 80034e6:	b580      	push	{r7, lr}
 80034e8:	b084      	sub	sp, #16
 80034ea:	af00      	add	r7, sp, #0
 80034ec:	4603      	mov	r3, r0
 80034ee:	460a      	mov	r2, r1
 80034f0:	80fb      	strh	r3, [r7, #6]
 80034f2:	4613      	mov	r3, r2
 80034f4:	80bb      	strh	r3, [r7, #4]
    uint16_t param[4] = {param_1 >> 8, param_1 & 0xFF, param_2 >> 8, param_2 & 0xFF};
 80034f6:	88fb      	ldrh	r3, [r7, #6]
 80034f8:	0a1b      	lsrs	r3, r3, #8
 80034fa:	b29b      	uxth	r3, r3
 80034fc:	813b      	strh	r3, [r7, #8]
 80034fe:	88fb      	ldrh	r3, [r7, #6]
 8003500:	b2db      	uxtb	r3, r3
 8003502:	b29b      	uxth	r3, r3
 8003504:	817b      	strh	r3, [r7, #10]
 8003506:	88bb      	ldrh	r3, [r7, #4]
 8003508:	0a1b      	lsrs	r3, r3, #8
 800350a:	b29b      	uxth	r3, r3
 800350c:	81bb      	strh	r3, [r7, #12]
 800350e:	88bb      	ldrh	r3, [r7, #4]
 8003510:	b2db      	uxtb	r3, r3
 8003512:	b29b      	uxth	r3, r3
 8003514:	81fb      	strh	r3, [r7, #14]
    ILI9341_set_address(ILI9341_COLUMN_ADDRESS_SET);
 8003516:	202a      	movs	r0, #42	; 0x2a
 8003518:	f7ff ff3a 	bl	8003390 <ILI9341_set_address>
    ILI9341_send_data(param, 4);
 800351c:	f107 0308 	add.w	r3, r7, #8
 8003520:	2104      	movs	r1, #4
 8003522:	4618      	mov	r0, r3
 8003524:	f7ff ff44 	bl	80033b0 <ILI9341_send_data>
}
 8003528:	bf00      	nop
 800352a:	3710      	adds	r7, #16
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}

08003530 <ILI9341_page_address_set>:

void ILI9341_page_address_set(uint16_t param_1, uint16_t param_2)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b084      	sub	sp, #16
 8003534:	af00      	add	r7, sp, #0
 8003536:	4603      	mov	r3, r0
 8003538:	460a      	mov	r2, r1
 800353a:	80fb      	strh	r3, [r7, #6]
 800353c:	4613      	mov	r3, r2
 800353e:	80bb      	strh	r3, [r7, #4]
    uint16_t param[4] = {param_1 >> 8, param_1 & 0xFF, param_2 >> 8, param_2 & 0xFF};
 8003540:	88fb      	ldrh	r3, [r7, #6]
 8003542:	0a1b      	lsrs	r3, r3, #8
 8003544:	b29b      	uxth	r3, r3
 8003546:	813b      	strh	r3, [r7, #8]
 8003548:	88fb      	ldrh	r3, [r7, #6]
 800354a:	b2db      	uxtb	r3, r3
 800354c:	b29b      	uxth	r3, r3
 800354e:	817b      	strh	r3, [r7, #10]
 8003550:	88bb      	ldrh	r3, [r7, #4]
 8003552:	0a1b      	lsrs	r3, r3, #8
 8003554:	b29b      	uxth	r3, r3
 8003556:	81bb      	strh	r3, [r7, #12]
 8003558:	88bb      	ldrh	r3, [r7, #4]
 800355a:	b2db      	uxtb	r3, r3
 800355c:	b29b      	uxth	r3, r3
 800355e:	81fb      	strh	r3, [r7, #14]
    ILI9341_set_address(ILI9341_PAGE_ADDRESS_SET);
 8003560:	202b      	movs	r0, #43	; 0x2b
 8003562:	f7ff ff15 	bl	8003390 <ILI9341_set_address>
    ILI9341_send_data(param, 4);
 8003566:	f107 0308 	add.w	r3, r7, #8
 800356a:	2104      	movs	r1, #4
 800356c:	4618      	mov	r0, r3
 800356e:	f7ff ff1f 	bl	80033b0 <ILI9341_send_data>
}
 8003572:	bf00      	nop
 8003574:	3710      	adds	r7, #16
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}

0800357a <ILI9341_sleep_out>:

void ILI9341_sleep_out(void)
{
 800357a:	b580      	push	{r7, lr}
 800357c:	af00      	add	r7, sp, #0
    ILI9341_set_address(ILI9341_SLEEP_OUT);
 800357e:	2011      	movs	r0, #17
 8003580:	f7ff ff06 	bl	8003390 <ILI9341_set_address>
    delay_millis(5);
 8003584:	2005      	movs	r0, #5
 8003586:	f000 f93b 	bl	8003800 <delay_millis>
}
 800358a:	bf00      	nop
 800358c:	bd80      	pop	{r7, pc}

0800358e <ILI9341_normal_display_mode_on>:

void ILI9341_normal_display_mode_on(void)
{
 800358e:	b580      	push	{r7, lr}
 8003590:	af00      	add	r7, sp, #0
    ILI9341_set_address(ILI9341_NORMAL_DISPLAY_MODE_ON);
 8003592:	2013      	movs	r0, #19
 8003594:	f7ff fefc 	bl	8003390 <ILI9341_set_address>
}
 8003598:	bf00      	nop
 800359a:	bd80      	pop	{r7, pc}

0800359c <ILI9341_pixel_format_set>:

void ILI9341_pixel_format_set(uint16_t param)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b082      	sub	sp, #8
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	4603      	mov	r3, r0
 80035a4:	80fb      	strh	r3, [r7, #6]
    ILI9341_set_address(ILI9341_PIXEL_FORMAT_SET);
 80035a6:	203a      	movs	r0, #58	; 0x3a
 80035a8:	f7ff fef2 	bl	8003390 <ILI9341_set_address>
    ILI9341_send_data(&param, 1);
 80035ac:	1dbb      	adds	r3, r7, #6
 80035ae:	2101      	movs	r1, #1
 80035b0:	4618      	mov	r0, r3
 80035b2:	f7ff fefd 	bl	80033b0 <ILI9341_send_data>
}
 80035b6:	bf00      	nop
 80035b8:	3708      	adds	r7, #8
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}

080035be <ILI9341_display_on>:

void ILI9341_display_on(void)
{
 80035be:	b580      	push	{r7, lr}
 80035c0:	af00      	add	r7, sp, #0
    ILI9341_set_address(ILI9341_DISPLAY_ON);
 80035c2:	2029      	movs	r0, #41	; 0x29
 80035c4:	f7ff fee4 	bl	8003390 <ILI9341_set_address>
}
 80035c8:	bf00      	nop
 80035ca:	bd80      	pop	{r7, pc}

080035cc <ILI9341_memory_write_start>:

void ILI9341_memory_write_start(void)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	af00      	add	r7, sp, #0
    ILI9341_set_address(ILI9341_MEMORY_WRITE);
 80035d0:	202c      	movs	r0, #44	; 0x2c
 80035d2:	f7ff fedd 	bl	8003390 <ILI9341_set_address>
}
 80035d6:	bf00      	nop
 80035d8:	bd80      	pop	{r7, pc}

080035da <joystick_init>:
#include "stm32g4xx_ll_adc.h"

//static uint16_t joystick[2];

void joystick_init(void)
{
 80035da:	b480      	push	{r7}
 80035dc:	af00      	add	r7, sp, #0
    /*LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_2);
    while(LL_DMA_IsEnabledChannel(DMA1, LL_DMA_CHANNEL_2));
    LL_DMA_SetMemoryAddress(DMA1, LL_DMA_CHANNEL_2, (uint32_t) joystick);
    LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_2, 1);
    LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_2);*/
}
 80035de:	bf00      	nop
 80035e0:	46bd      	mov	sp, r7
 80035e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e6:	4770      	bx	lr

080035e8 <LCD_init>:
} tile_t;

static tile_t screen[30][40] = {{{0, 0, 0}}};

void LCD_init(void)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b082      	sub	sp, #8
 80035ec:	af00      	add	r7, sp, #0
    // Initialize ILI9341.
    ILI9341_init();
 80035ee:	f7ff fe75 	bl	80032dc <ILI9341_init>

    // Clear Screen
    ILI9341_column_address_set(0, 319);
 80035f2:	f240 113f 	movw	r1, #319	; 0x13f
 80035f6:	2000      	movs	r0, #0
 80035f8:	f7ff ff75 	bl	80034e6 <ILI9341_column_address_set>
    ILI9341_page_address_set(0, 239);
 80035fc:	21ef      	movs	r1, #239	; 0xef
 80035fe:	2000      	movs	r0, #0
 8003600:	f7ff ff96 	bl	8003530 <ILI9341_page_address_set>
    ILI9341_memory_write_start();
 8003604:	f7ff ffe2 	bl	80035cc <ILI9341_memory_write_start>

    uint16_t data = 0x0000;
 8003608:	2300      	movs	r3, #0
 800360a:	807b      	strh	r3, [r7, #2]
    for (int i = 0; i < 320 * 240; i++)
 800360c:	2300      	movs	r3, #0
 800360e:	607b      	str	r3, [r7, #4]
 8003610:	e007      	b.n	8003622 <LCD_init+0x3a>
        ILI9341_send_data(&data, 1);
 8003612:	1cbb      	adds	r3, r7, #2
 8003614:	2101      	movs	r1, #1
 8003616:	4618      	mov	r0, r3
 8003618:	f7ff feca 	bl	80033b0 <ILI9341_send_data>
    for (int i = 0; i < 320 * 240; i++)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	3301      	adds	r3, #1
 8003620:	607b      	str	r3, [r7, #4]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
 8003628:	dbf3      	blt.n	8003612 <LCD_init+0x2a>

    // Wait for data to be sent completly.
    delay_millis(100);
 800362a:	2064      	movs	r0, #100	; 0x64
 800362c:	f000 f8e8 	bl	8003800 <delay_millis>

    // Turn on backlight.
    backlight_set_brightness(50);
 8003630:	2032      	movs	r0, #50	; 0x32
 8003632:	f7ff fd4d 	bl	80030d0 <backlight_set_brightness>
}
 8003636:	bf00      	nop
 8003638:	3708      	adds	r7, #8
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}

0800363e <LCD_update_screen>:

void LCD_update_screen(void)
{
 800363e:	b580      	push	{r7, lr}
 8003640:	b082      	sub	sp, #8
 8003642:	af00      	add	r7, sp, #0
    for (uint32_t y = 0; y < 30; y++) {
 8003644:	2300      	movs	r3, #0
 8003646:	607b      	str	r3, [r7, #4]
 8003648:	e015      	b.n	8003676 <LCD_update_screen+0x38>
        for (uint32_t x = 0; x < 40; x++) {
 800364a:	2300      	movs	r3, #0
 800364c:	603b      	str	r3, [r7, #0]
 800364e:	e00c      	b.n	800366a <LCD_update_screen+0x2c>
            while (LCD_is_DMA_ready() == 0);
 8003650:	bf00      	nop
 8003652:	f000 f8b9 	bl	80037c8 <LCD_is_DMA_ready>
 8003656:	4603      	mov	r3, r0
 8003658:	2b00      	cmp	r3, #0
 800365a:	d0fa      	beq.n	8003652 <LCD_update_screen+0x14>
            LCD_update_tile(x, y);
 800365c:	6879      	ldr	r1, [r7, #4]
 800365e:	6838      	ldr	r0, [r7, #0]
 8003660:	f000 f812 	bl	8003688 <LCD_update_tile>
        for (uint32_t x = 0; x < 40; x++) {
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	3301      	adds	r3, #1
 8003668:	603b      	str	r3, [r7, #0]
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	2b27      	cmp	r3, #39	; 0x27
 800366e:	d9ef      	bls.n	8003650 <LCD_update_screen+0x12>
    for (uint32_t y = 0; y < 30; y++) {
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	3301      	adds	r3, #1
 8003674:	607b      	str	r3, [r7, #4]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2b1d      	cmp	r3, #29
 800367a:	d9e6      	bls.n	800364a <LCD_update_screen+0xc>
        }
    }
}
 800367c:	bf00      	nop
 800367e:	bf00      	nop
 8003680:	3708      	adds	r7, #8
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}
	...

08003688 <LCD_update_tile>:

void LCD_update_tile(uint32_t x, uint32_t y)
{
 8003688:	b590      	push	{r4, r7, lr}
 800368a:	b083      	sub	sp, #12
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
 8003690:	6039      	str	r1, [r7, #0]
    if (screen[y][x].dirty == 0)
 8003692:	482c      	ldr	r0, [pc, #176]	; (8003744 <LCD_update_tile+0xbc>)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6839      	ldr	r1, [r7, #0]
 8003698:	461a      	mov	r2, r3
 800369a:	0052      	lsls	r2, r2, #1
 800369c:	441a      	add	r2, r3
 800369e:	460b      	mov	r3, r1
 80036a0:	011b      	lsls	r3, r3, #4
 80036a2:	1a5b      	subs	r3, r3, r1
 80036a4:	00db      	lsls	r3, r3, #3
 80036a6:	4413      	add	r3, r2
 80036a8:	4403      	add	r3, r0
 80036aa:	3302      	adds	r3, #2
 80036ac:	781b      	ldrb	r3, [r3, #0]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d044      	beq.n	800373c <LCD_update_tile+0xb4>
        return;

    ILI9341_column_address_set(x * 8, x * 8 + 7);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	b29b      	uxth	r3, r3
 80036b6:	00db      	lsls	r3, r3, #3
 80036b8:	b29a      	uxth	r2, r3
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	b29b      	uxth	r3, r3
 80036be:	00db      	lsls	r3, r3, #3
 80036c0:	b29b      	uxth	r3, r3
 80036c2:	3307      	adds	r3, #7
 80036c4:	b29b      	uxth	r3, r3
 80036c6:	4619      	mov	r1, r3
 80036c8:	4610      	mov	r0, r2
 80036ca:	f7ff ff0c 	bl	80034e6 <ILI9341_column_address_set>
    ILI9341_page_address_set(y * 8, y * 8 + 7);
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	b29b      	uxth	r3, r3
 80036d2:	00db      	lsls	r3, r3, #3
 80036d4:	b29a      	uxth	r2, r3
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	b29b      	uxth	r3, r3
 80036da:	00db      	lsls	r3, r3, #3
 80036dc:	b29b      	uxth	r3, r3
 80036de:	3307      	adds	r3, #7
 80036e0:	b29b      	uxth	r3, r3
 80036e2:	4619      	mov	r1, r3
 80036e4:	4610      	mov	r0, r2
 80036e6:	f7ff ff23 	bl	8003530 <ILI9341_page_address_set>
    ILI9341_memory_write_start();
 80036ea:	f7ff ff6f 	bl	80035cc <ILI9341_memory_write_start>

    ILI9341_send_data_DMA((uint16_t*) tileset[screen[y][x].color][screen[y][x].tile], 8 * 8);
 80036ee:	4815      	ldr	r0, [pc, #84]	; (8003744 <LCD_update_tile+0xbc>)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6839      	ldr	r1, [r7, #0]
 80036f4:	461a      	mov	r2, r3
 80036f6:	0052      	lsls	r2, r2, #1
 80036f8:	441a      	add	r2, r3
 80036fa:	460b      	mov	r3, r1
 80036fc:	011b      	lsls	r3, r3, #4
 80036fe:	1a5b      	subs	r3, r3, r1
 8003700:	00db      	lsls	r3, r3, #3
 8003702:	4413      	add	r3, r2
 8003704:	4403      	add	r3, r0
 8003706:	3301      	adds	r3, #1
 8003708:	781b      	ldrb	r3, [r3, #0]
 800370a:	461c      	mov	r4, r3
 800370c:	480d      	ldr	r0, [pc, #52]	; (8003744 <LCD_update_tile+0xbc>)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6839      	ldr	r1, [r7, #0]
 8003712:	461a      	mov	r2, r3
 8003714:	0052      	lsls	r2, r2, #1
 8003716:	441a      	add	r2, r3
 8003718:	460b      	mov	r3, r1
 800371a:	011b      	lsls	r3, r3, #4
 800371c:	1a5b      	subs	r3, r3, r1
 800371e:	00db      	lsls	r3, r3, #3
 8003720:	4413      	add	r3, r2
 8003722:	4403      	add	r3, r0
 8003724:	781b      	ldrb	r3, [r3, #0]
 8003726:	461a      	mov	r2, r3
 8003728:	0223      	lsls	r3, r4, #8
 800372a:	4413      	add	r3, r2
 800372c:	01db      	lsls	r3, r3, #7
 800372e:	4a06      	ldr	r2, [pc, #24]	; (8003748 <LCD_update_tile+0xc0>)
 8003730:	4413      	add	r3, r2
 8003732:	2140      	movs	r1, #64	; 0x40
 8003734:	4618      	mov	r0, r3
 8003736:	f7ff fe5b 	bl	80033f0 <ILI9341_send_data_DMA>
 800373a:	e000      	b.n	800373e <LCD_update_tile+0xb6>
        return;
 800373c:	bf00      	nop
}
 800373e:	370c      	adds	r7, #12
 8003740:	46bd      	mov	sp, r7
 8003742:	bd90      	pop	{r4, r7, pc}
 8003744:	20000090 	.word	0x20000090
 8003748:	080038c0 	.word	0x080038c0

0800374c <LCD_draw>:

void LCD_draw(uint8_t tile, uint32_t x, uint32_t y, color_t color)
{
 800374c:	b480      	push	{r7}
 800374e:	b085      	sub	sp, #20
 8003750:	af00      	add	r7, sp, #0
 8003752:	60b9      	str	r1, [r7, #8]
 8003754:	607a      	str	r2, [r7, #4]
 8003756:	461a      	mov	r2, r3
 8003758:	4603      	mov	r3, r0
 800375a:	73fb      	strb	r3, [r7, #15]
 800375c:	4613      	mov	r3, r2
 800375e:	73bb      	strb	r3, [r7, #14]
    screen[y][x].tile  = tile;
 8003760:	4818      	ldr	r0, [pc, #96]	; (80037c4 <LCD_draw+0x78>)
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	6879      	ldr	r1, [r7, #4]
 8003766:	461a      	mov	r2, r3
 8003768:	0052      	lsls	r2, r2, #1
 800376a:	441a      	add	r2, r3
 800376c:	460b      	mov	r3, r1
 800376e:	011b      	lsls	r3, r3, #4
 8003770:	1a5b      	subs	r3, r3, r1
 8003772:	00db      	lsls	r3, r3, #3
 8003774:	4413      	add	r3, r2
 8003776:	4403      	add	r3, r0
 8003778:	7bfa      	ldrb	r2, [r7, #15]
 800377a:	701a      	strb	r2, [r3, #0]
    screen[y][x].color = color;
 800377c:	4811      	ldr	r0, [pc, #68]	; (80037c4 <LCD_draw+0x78>)
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	6879      	ldr	r1, [r7, #4]
 8003782:	461a      	mov	r2, r3
 8003784:	0052      	lsls	r2, r2, #1
 8003786:	441a      	add	r2, r3
 8003788:	460b      	mov	r3, r1
 800378a:	011b      	lsls	r3, r3, #4
 800378c:	1a5b      	subs	r3, r3, r1
 800378e:	00db      	lsls	r3, r3, #3
 8003790:	4413      	add	r3, r2
 8003792:	4403      	add	r3, r0
 8003794:	3301      	adds	r3, #1
 8003796:	7bba      	ldrb	r2, [r7, #14]
 8003798:	701a      	strb	r2, [r3, #0]
    screen[y][x].dirty = 1;
 800379a:	480a      	ldr	r0, [pc, #40]	; (80037c4 <LCD_draw+0x78>)
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	6879      	ldr	r1, [r7, #4]
 80037a0:	461a      	mov	r2, r3
 80037a2:	0052      	lsls	r2, r2, #1
 80037a4:	441a      	add	r2, r3
 80037a6:	460b      	mov	r3, r1
 80037a8:	011b      	lsls	r3, r3, #4
 80037aa:	1a5b      	subs	r3, r3, r1
 80037ac:	00db      	lsls	r3, r3, #3
 80037ae:	4413      	add	r3, r2
 80037b0:	4403      	add	r3, r0
 80037b2:	3302      	adds	r3, #2
 80037b4:	2201      	movs	r2, #1
 80037b6:	701a      	strb	r2, [r3, #0]
}
 80037b8:	bf00      	nop
 80037ba:	3714      	adds	r7, #20
 80037bc:	46bd      	mov	sp, r7
 80037be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c2:	4770      	bx	lr
 80037c4:	20000090 	.word	0x20000090

080037c8 <LCD_is_DMA_ready>:

uint32_t LCD_is_DMA_ready(void)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	af00      	add	r7, sp, #0
    return ILI9341_is_DMA_ready();
 80037cc:	f7ff fe40 	bl	8003450 <ILI9341_is_DMA_ready>
 80037d0:	4603      	mov	r3, r0
}
 80037d2:	4618      	mov	r0, r3
 80037d4:	bd80      	pop	{r7, pc}

080037d6 <LL_TIM_GetCounter>:
{
 80037d6:	b480      	push	{r7}
 80037d8:	b083      	sub	sp, #12
 80037da:	af00      	add	r7, sp, #0
 80037dc:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(TIMx->CNT));
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	370c      	adds	r7, #12
 80037e6:	46bd      	mov	sp, r7
 80037e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ec:	4770      	bx	lr

080037ee <millis>:
#include "millis.h"
#include "stm32g4xx_ll_tim.h"

uint32_t millis(void)
{
 80037ee:	b580      	push	{r7, lr}
 80037f0:	af00      	add	r7, sp, #0
    return LL_TIM_GetCounter(TIM2);
 80037f2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80037f6:	f7ff ffee 	bl	80037d6 <LL_TIM_GetCounter>
 80037fa:	4603      	mov	r3, r0
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	bd80      	pop	{r7, pc}

08003800 <delay_millis>:

void delay_millis(uint32_t delay)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b084      	sub	sp, #16
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
    uint32_t start_time = millis();
 8003808:	f7ff fff1 	bl	80037ee <millis>
 800380c:	60f8      	str	r0, [r7, #12]

    while (millis() - start_time < delay);
 800380e:	bf00      	nop
 8003810:	f7ff ffed 	bl	80037ee <millis>
 8003814:	4602      	mov	r2, r0
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	1ad3      	subs	r3, r2, r3
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	429a      	cmp	r2, r3
 800381e:	d8f7      	bhi.n	8003810 <delay_millis+0x10>

    return;
 8003820:	bf00      	nop
}
 8003822:	3710      	adds	r7, #16
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}

08003828 <__libc_init_array>:
 8003828:	b570      	push	{r4, r5, r6, lr}
 800382a:	4d0d      	ldr	r5, [pc, #52]	; (8003860 <__libc_init_array+0x38>)
 800382c:	4c0d      	ldr	r4, [pc, #52]	; (8003864 <__libc_init_array+0x3c>)
 800382e:	1b64      	subs	r4, r4, r5
 8003830:	10a4      	asrs	r4, r4, #2
 8003832:	2600      	movs	r6, #0
 8003834:	42a6      	cmp	r6, r4
 8003836:	d109      	bne.n	800384c <__libc_init_array+0x24>
 8003838:	4d0b      	ldr	r5, [pc, #44]	; (8003868 <__libc_init_array+0x40>)
 800383a:	4c0c      	ldr	r4, [pc, #48]	; (800386c <__libc_init_array+0x44>)
 800383c:	f000 f820 	bl	8003880 <_init>
 8003840:	1b64      	subs	r4, r4, r5
 8003842:	10a4      	asrs	r4, r4, #2
 8003844:	2600      	movs	r6, #0
 8003846:	42a6      	cmp	r6, r4
 8003848:	d105      	bne.n	8003856 <__libc_init_array+0x2e>
 800384a:	bd70      	pop	{r4, r5, r6, pc}
 800384c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003850:	4798      	blx	r3
 8003852:	3601      	adds	r6, #1
 8003854:	e7ee      	b.n	8003834 <__libc_init_array+0xc>
 8003856:	f855 3b04 	ldr.w	r3, [r5], #4
 800385a:	4798      	blx	r3
 800385c:	3601      	adds	r6, #1
 800385e:	e7f2      	b.n	8003846 <__libc_init_array+0x1e>
 8003860:	080338c0 	.word	0x080338c0
 8003864:	080338c0 	.word	0x080338c0
 8003868:	080338c0 	.word	0x080338c0
 800386c:	080338c4 	.word	0x080338c4

08003870 <memset>:
 8003870:	4402      	add	r2, r0
 8003872:	4603      	mov	r3, r0
 8003874:	4293      	cmp	r3, r2
 8003876:	d100      	bne.n	800387a <memset+0xa>
 8003878:	4770      	bx	lr
 800387a:	f803 1b01 	strb.w	r1, [r3], #1
 800387e:	e7f9      	b.n	8003874 <memset+0x4>

08003880 <_init>:
 8003880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003882:	bf00      	nop
 8003884:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003886:	bc08      	pop	{r3}
 8003888:	469e      	mov	lr, r3
 800388a:	4770      	bx	lr

0800388c <_fini>:
 800388c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800388e:	bf00      	nop
 8003890:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003892:	bc08      	pop	{r3}
 8003894:	469e      	mov	lr, r3
 8003896:	4770      	bx	lr
